
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800102  00800102  00000d42  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003a1  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c39  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008cc  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001209  00000000  00000000  00003e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  00005024  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000655  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009cf  00000000  00000000  000058c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000231  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <Null_Menu>:
	...

00000072 <m_s1i1>:
  72:	7c 00 68 00 68 00 b8 00 02 00                       |.h.h.....

0000007c <m_s1i2>:
  7c:	86 00 72 00 68 00 c2 00 03 00                       ..r.h.....

00000086 <m_s1i3>:
  86:	90 00 7c 00 68 00 cc 00 04 00                       ..|.h.....

00000090 <m_s1i4>:
  90:	9a 00 86 00 68 00 68 00 08 00                       ....h.h...

0000009a <m_s1i5>:
  9a:	a4 00 90 00 68 00 68 00 09 00                       ....h.h...

000000a4 <m_s1i6>:
  a4:	ae 00 9a 00 68 00 68 00 0a 00                       ....h.h...

000000ae <m_s1i7>:
  ae:	68 00 a4 00 68 00 68 00 0b 00                       h...h.h...

000000b8 <m_s2i1>:
  b8:	68 00 68 00 72 00 68 00 05 00                       h.h.r.h...

000000c2 <m_s3i1>:
  c2:	68 00 68 00 7c 00 68 00 06 00                       h.h.|.h...

000000cc <m_s4i1>:
  cc:	68 00 68 00 86 00 68 00 07 00                       h.h...h...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf ef       	ldi	r28, 0xFF	; 255
  dc:	d4 e0       	ldi	r29, 0x04	; 4
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	ec ea       	ldi	r30, 0xAC	; 172
  ea:	fc e0       	ldi	r31, 0x0C	; 12
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a2 30       	cpi	r26, 0x02	; 2
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	11 e0       	ldi	r17, 0x01	; 1
  fa:	a2 e0       	ldi	r26, 0x02	; 2
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 33       	cpi	r26, 0x3B	; 59
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
 10c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
 114:	88 b1       	in	r24, 0x08	; 8
 116:	80 63       	ori	r24, 0x30	; 48
 118:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	8f 7c       	andi	r24, 0xCF	; 207
 11e:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
 126:	10 92 b9 00 	sts	0x00B9, r1
}
 12a:	08 95       	ret

0000012c <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 12c:	94 ea       	ldi	r25, 0xA4	; 164
 12e:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 132:	90 91 bc 00 	lds	r25, 0x00BC
 136:	97 ff       	sbrs	r25, 7
 138:	fc cf       	rjmp	.-8      	; 0x132 <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 13a:	90 91 b9 00 	lds	r25, 0x00B9
 13e:	98 7f       	andi	r25, 0xF8	; 248
 140:	98 30       	cpi	r25, 0x08	; 8
 142:	39 f5       	brne	.+78     	; 0x192 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 144:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 14e:	80 91 bc 00 	lds	r24, 0x00BC
 152:	87 ff       	sbrs	r24, 7
 154:	fc cf       	rjmp	.-8      	; 0x14e <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 156:	80 91 b9 00 	lds	r24, 0x00B9
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 31       	cpi	r24, 0x18	; 24
 15e:	c9 f4       	brne	.+50     	; 0x192 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 160:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 16a:	80 91 bc 00 	lds	r24, 0x00BC
 16e:	87 ff       	sbrs	r24, 7
 170:	fc cf       	rjmp	.-8      	; 0x16a <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 172:	80 91 b9 00 	lds	r24, 0x00B9
 176:	88 7f       	andi	r24, 0xF8	; 248
 178:	88 32       	cpi	r24, 0x28	; 40
 17a:	59 f4       	brne	.+22     	; 0x192 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 17c:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 180:	84 e8       	ldi	r24, 0x84	; 132
 182:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 186:	80 91 bc 00 	lds	r24, 0x00BC
 18a:	87 ff       	sbrs	r24, 7
 18c:	fc cf       	rjmp	.-8      	; 0x186 <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 18e:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	80 93 bc 00 	sts	0x00BC, r24
 198:	08 95       	ret

0000019a <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 19a:	94 ea       	ldi	r25, 0xA4	; 164
 19c:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1a0:	90 91 bc 00 	lds	r25, 0x00BC
 1a4:	97 ff       	sbrs	r25, 7
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 1a8:	90 91 b9 00 	lds	r25, 0x00B9
 1ac:	98 7f       	andi	r25, 0xF8	; 248
 1ae:	98 30       	cpi	r25, 0x08	; 8
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <I2C_Read+0x1a>
 1b2:	43 c0       	rjmp	.+134    	; 0x23a <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 1b4:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1b8:	94 e8       	ldi	r25, 0x84	; 132
 1ba:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1be:	90 91 bc 00 	lds	r25, 0x00BC
 1c2:	97 ff       	sbrs	r25, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 1c6:	90 91 b9 00 	lds	r25, 0x00B9
 1ca:	98 7f       	andi	r25, 0xF8	; 248
 1cc:	98 31       	cpi	r25, 0x18	; 24
 1ce:	a9 f5       	brne	.+106    	; 0x23a <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 1d0:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1d4:	94 e8       	ldi	r25, 0x84	; 132
 1d6:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1da:	90 91 bc 00 	lds	r25, 0x00BC
 1de:	97 ff       	sbrs	r25, 7
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1e2:	90 91 b9 00 	lds	r25, 0x00B9
 1e6:	98 7f       	andi	r25, 0xF8	; 248
 1e8:	98 32       	cpi	r25, 0x28	; 40
 1ea:	39 f5       	brne	.+78     	; 0x23a <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1ec:	94 ea       	ldi	r25, 0xA4	; 164
 1ee:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1f2:	90 91 bc 00 	lds	r25, 0x00BC
 1f6:	97 ff       	sbrs	r25, 7
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1fa:	90 91 b9 00 	lds	r25, 0x00B9
 1fe:	98 7f       	andi	r25, 0xF8	; 248
 200:	90 31       	cpi	r25, 0x10	; 16
 202:	d9 f4       	brne	.+54     	; 0x23a <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 20a:	84 e8       	ldi	r24, 0x84	; 132
 20c:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 210:	80 91 bc 00 	lds	r24, 0x00BC
 214:	87 ff       	sbrs	r24, 7
 216:	fc cf       	rjmp	.-8      	; 0x210 <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 218:	80 91 b9 00 	lds	r24, 0x00B9
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	80 34       	cpi	r24, 0x40	; 64
 220:	61 f4       	brne	.+24     	; 0x23a <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 222:	84 e8       	ldi	r24, 0x84	; 132
 224:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 228:	80 91 bc 00 	lds	r24, 0x00BC
 22c:	87 ff       	sbrs	r24, 7
 22e:	fc cf       	rjmp	.-8      	; 0x228 <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 230:	80 91 b9 00 	lds	r24, 0x00B9
 234:	88 7f       	andi	r24, 0xF8	; 248
 236:	88 35       	cpi	r24, 0x58	; 88
 238:	29 f0       	breq	.+10     	; 0x244 <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 23a:	84 e9       	ldi	r24, 0x94	; 148
 23c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	08 95       	ret
		
	}
	reg=TWDR;
 244:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 248:	94 e9       	ldi	r25, 0x94	; 148
 24a:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 24e:	08 95       	ret

00000250 <I2C_Read_Buf>:
//-----------------------------------------------------------
void 	I2C_Read_Buf(uint8_t address_mem, void* data, uint8_t data_len)
{
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	df 93       	push	r29
 25a:	cf 93       	push	r28
 25c:	0f 92       	push	r0
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	18 2f       	mov	r17, r24
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 264:	7b 01       	movw	r14, r22
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	0b c0       	rjmp	.+22     	; 0x280 <I2C_Read_Buf+0x30>
	{
		((uint8_t*)data)[i]=I2C_Read(TMR_ADDR,address_mem+i);
 26a:	60 2f       	mov	r22, r16
 26c:	61 0f       	add	r22, r17
 26e:	80 ed       	ldi	r24, 0xD0	; 208
 270:	49 83       	std	Y+1, r20	; 0x01
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 276:	f7 01       	movw	r30, r14
 278:	81 93       	st	Z+, r24
 27a:	7f 01       	movw	r14, r30
//-----------------------------------------------------------
void 	I2C_Read_Buf(uint8_t address_mem, void* data, uint8_t data_len)
{
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	49 81       	ldd	r20, Y+1	; 0x01
 280:	04 17       	cp	r16, r20
 282:	98 f3       	brcs	.-26     	; 0x26a <I2C_Read_Buf+0x1a>
	{
		((uint8_t*)data)[i]=I2C_Read(TMR_ADDR,address_mem+i);
	}
}
 284:	0f 90       	pop	r0
 286:	cf 91       	pop	r28
 288:	df 91       	pop	r29
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	08 95       	ret

00000294 <I2C_Write_Buf>:

void 	I2C_Write_Buf(uint8_t address_mem, void* data, uint8_t data_len)
{
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	18 2f       	mov	r17, r24
 2a4:	f4 2e       	mov	r15, r20
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 2a6:	c6 2e       	mov	r12, r22
 2a8:	e6 01       	movw	r28, r12
 2aa:	6e 01       	movw	r12, r28
 2ac:	d7 2e       	mov	r13, r23
 2ae:	e6 01       	movw	r28, r12
 2b0:	00 e0       	ldi	r16, 0x00	; 0
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <I2C_Write_Buf+0x2e>
	{
		I2C_Write(TMR_ADDR,address_mem+i,((uint8_t*)data)[i]);
 2b4:	49 91       	ld	r20, Y+
 2b6:	60 2f       	mov	r22, r16
 2b8:	61 0f       	add	r22, r17
 2ba:	80 ed       	ldi	r24, 0xD0	; 208
 2bc:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>

void 	I2C_Write_Buf(uint8_t address_mem, void* data, uint8_t data_len)
{
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	0f 15       	cp	r16, r15
 2c4:	b8 f3       	brcs	.-18     	; 0x2b4 <I2C_Write_Buf+0x20>
	{
		I2C_Write(TMR_ADDR,address_mem+i,((uint8_t*)data)[i]);
	}
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <I2C_ReadTime>:
//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 2dc:	80 ed       	ldi	r24, 0xD0	; 208
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 2e4:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	87 ec       	ldi	r24, 0xC7	; 199
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <I2C_ReadTime+0x14>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <I2C_ReadTime+0x1a>
 2f0:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 2f2:	80 ed       	ldi	r24, 0xD0	; 208
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	87 ec       	ldi	r24, 0xC7	; 199
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <I2C_ReadTime+0x2a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <I2C_ReadTime+0x30>
 306:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 308:	80 ed       	ldi	r24, 0xD0	; 208
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	87 ec       	ldi	r24, 0xC7	; 199
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <I2C_ReadTime+0x40>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <I2C_ReadTime+0x46>
 31c:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 31e:	80 ed       	ldi	r24, 0xD0	; 208
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 326:	8b 83       	std	Y+3, r24	; 0x03
 328:	87 ec       	ldi	r24, 0xC7	; 199
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <I2C_ReadTime+0x56>
 330:	00 c0       	rjmp	.+0      	; 0x332 <I2C_ReadTime+0x5c>
 332:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 334:	80 ed       	ldi	r24, 0xD0	; 208
 336:	64 e0       	ldi	r22, 0x04	; 4
 338:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 33c:	8c 83       	std	Y+4, r24	; 0x04
 33e:	87 ec       	ldi	r24, 0xC7	; 199
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <I2C_ReadTime+0x6c>
 346:	00 c0       	rjmp	.+0      	; 0x348 <I2C_ReadTime+0x72>
 348:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 34a:	80 ed       	ldi	r24, 0xD0	; 208
 34c:	65 e0       	ldi	r22, 0x05	; 5
 34e:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 352:	8d 83       	std	Y+5, r24	; 0x05
 354:	87 ec       	ldi	r24, 0xC7	; 199
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <I2C_ReadTime+0x82>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <I2C_ReadTime+0x88>
 35e:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 360:	80 ed       	ldi	r24, 0xD0	; 208
 362:	66 e0       	ldi	r22, 0x06	; 6
 364:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 368:	8e 83       	std	Y+6, r24	; 0x06
 36a:	87 ec       	ldi	r24, 0xC7	; 199
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <I2C_ReadTime+0x98>
 372:	00 c0       	rjmp	.+0      	; 0x374 <I2C_ReadTime+0x9e>
 374:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 376:	80 ed       	ldi	r24, 0xD0	; 208
 378:	67 e0       	ldi	r22, 0x07	; 7
 37a:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 37e:	8f 83       	std	Y+7, r24	; 0x07
 380:	87 ec       	ldi	r24, 0xC7	; 199
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <I2C_ReadTime+0xae>
 388:	00 c0       	rjmp	.+0      	; 0x38a <I2C_ReadTime+0xb4>
 38a:	00 00       	nop
	_delay_us(100);
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 392:	80 ed       	ldi	r24, 0xD0	; 208
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 39a:	ef ec       	ldi	r30, 0xCF	; 207
 39c:	f7 e0       	ldi	r31, 0x07	; 7
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <I2C_DS1307Init+0xc>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <I2C_DS1307Init+0x12>
 3a4:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 3a6:	87 ff       	sbrs	r24, 7
 3a8:	21 c0       	rjmp	.+66     	; 0x3ec <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 3aa:	80 ed       	ldi	r24, 0xD0	; 208
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	42 e1       	ldi	r20, 0x12	; 18
 3b0:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3b4:	87 ec       	ldi	r24, 0xC7	; 199
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <I2C_DS1307Init+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <I2C_DS1307Init+0x2c>
 3be:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 3c0:	80 ed       	ldi	r24, 0xD0	; 208
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3ca:	e7 ec       	ldi	r30, 0xC7	; 199
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <I2C_DS1307Init+0x3c>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <I2C_DS1307Init+0x42>
 3d4:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 3d6:	80 ed       	ldi	r24, 0xD0	; 208
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3e0:	87 ec       	ldi	r24, 0xC7	; 199
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <I2C_DS1307Init+0x52>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <I2C_DS1307Init+0x58>
 3ea:	00 00       	nop
 3ec:	08 95       	ret

000003ee <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 3f4:	80 ed       	ldi	r24, 0xD0	; 208
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	4a 81       	ldd	r20, Y+2	; 0x02
 3fa:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3fe:	87 ec       	ldi	r24, 0xC7	; 199
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <I2C_StoreTime+0x14>
 406:	00 c0       	rjmp	.+0      	; 0x408 <I2C_StoreTime+0x1a>
 408:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 40a:	80 ed       	ldi	r24, 0xD0	; 208
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	49 81       	ldd	r20, Y+1	; 0x01
 410:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 414:	87 ec       	ldi	r24, 0xC7	; 199
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <I2C_StoreTime+0x2a>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <I2C_StoreTime+0x30>
 41e:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 420:	80 ed       	ldi	r24, 0xD0	; 208
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 42a:	87 ec       	ldi	r24, 0xC7	; 199
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <I2C_StoreTime+0x40>
 432:	00 c0       	rjmp	.+0      	; 0x434 <I2C_StoreTime+0x46>
 434:	00 00       	nop
	_delay_us(100);
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 442:	80 ed       	ldi	r24, 0xD0	; 208
 444:	65 e0       	ldi	r22, 0x05	; 5
 446:	4d 81       	ldd	r20, Y+5	; 0x05
 448:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 44c:	87 ec       	ldi	r24, 0xC7	; 199
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <I2C_StoreDate+0x14>
 454:	00 c0       	rjmp	.+0      	; 0x456 <I2C_StoreDate+0x1a>
 456:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 458:	80 ed       	ldi	r24, 0xD0	; 208
 45a:	64 e0       	ldi	r22, 0x04	; 4
 45c:	4c 81       	ldd	r20, Y+4	; 0x04
 45e:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 462:	87 ec       	ldi	r24, 0xC7	; 199
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <I2C_StoreDate+0x2a>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <I2C_StoreDate+0x30>
 46c:	00 00       	nop
	_delay_us(100);	
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 474:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 476:	80 ed       	ldi	r24, 0xD0	; 208
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	46 81       	ldd	r20, Z+6	; 0x06
 47c:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 480:	87 ec       	ldi	r24, 0xC7	; 199
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <I2C_StoreYear+0x10>
 488:	00 c0       	rjmp	.+0      	; 0x48a <I2C_StoreYear+0x16>
 48a:	00 00       	nop
	_delay_us(100);
}
 48c:	08 95       	ret

0000048e <KBD_ReadPins>:

static uint8_t lastKEY=KEY_CODE_NONE, previousKEY=KEY_CODE_NONE;

uint8_t KBD_ReadPins(void)
{
	uint8_t key=0;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	48 99       	sbic	0x09, 0	; 9
 492:	80 e0       	ldi	r24, 0x00	; 0
	if((KBD_PIN & _BV(KBD_PIN_A))==0)
	{
		key|=(1<<0);
	}
	
	if((KBD_PIN & _BV(KBD_PIN_B))==0)
 494:	49 9b       	sbis	0x09, 1	; 9
	{
		key|=(1<<1);
 496:	82 60       	ori	r24, 0x02	; 2
	}
	
	if((KBD_PIN & _BV(KBD_PIN_C))==0)
 498:	4a 9b       	sbis	0x09, 2	; 9
	{
		key|=(1<<2);
 49a:	84 60       	ori	r24, 0x04	; 4
	}
	
	if((KBD_PIN & _BV(KBD_PIN_D))==0)
 49c:	4b 9b       	sbis	0x09, 3	; 9
	{
		key|=(1<<3);
 49e:	88 60       	ori	r24, 0x08	; 8
	}	
	
	return key;	
}
 4a0:	08 95       	ret

000004a2 <KBD_ReadKey>:

enKey KBD_ReadKey(void) 
{
 4a2:	1f 93       	push	r17
	lastKEY=KBD_ReadPins();
 4a4:	0e 94 47 02 	call	0x48e	; 0x48e <KBD_ReadPins>
 4a8:	80 93 02 01 	sts	0x0102, r24

	if(lastKEY!=KEY_CODE_NONE)
 4ac:	88 23       	and	r24, r24
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <KBD_ReadKey+0x40>
	{
		if(lastKEY!=previousKEY)
 4b0:	90 91 03 01 	lds	r25, 0x0103
 4b4:	89 17       	cp	r24, r25
 4b6:	b9 f0       	breq	.+46     	; 0x4e6 <KBD_ReadKey+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	30 e7       	ldi	r19, 0x70	; 112
 4bc:	42 e0       	ldi	r20, 0x02	; 2
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	30 40       	sbci	r19, 0x00	; 0
 4c2:	40 40       	sbci	r20, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <KBD_ReadKey+0x1c>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <KBD_ReadKey+0x26>
 4c8:	00 00       	nop
		{
			_delay_ms(100);
			if((lastKEY!=KEY_CODE_NONE) && (lastKEY==KBD_ReadPins()))
 4ca:	18 2f       	mov	r17, r24
 4cc:	88 23       	and	r24, r24
 4ce:	39 f0       	breq	.+14     	; 0x4de <KBD_ReadKey+0x3c>
 4d0:	0e 94 47 02 	call	0x48e	; 0x48e <KBD_ReadPins>
 4d4:	18 17       	cp	r17, r24
 4d6:	19 f4       	brne	.+6      	; 0x4de <KBD_ReadKey+0x3c>
			{
				previousKEY=lastKEY;
 4d8:	10 93 03 01 	sts	0x0103, r17
				return lastKEY;
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <KBD_ReadKey+0x46>
			}
			else
			{	
				lastKEY		= KEY_CODE_NONE;
 4de:	10 92 02 01 	sts	0x0102, r1
			return KEY_CODE_NONE;
		}
	}
	else
	{
		previousKEY = KEY_CODE_NONE;
 4e2:	10 92 03 01 	sts	0x0103, r1
				return KEY_CODE_NONE;	
			}
		}
		else
		{
			return KEY_CODE_NONE;
 4e6:	10 e0       	ldi	r17, 0x00	; 0
	{
		previousKEY = KEY_CODE_NONE;
		return KEY_CODE_NONE;
	}

}
 4e8:	81 2f       	mov	r24, r17
 4ea:	1f 91       	pop	r17
 4ec:	08 95       	ret

000004ee <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 4ee:	8b b1       	in	r24, 0x0b	; 11
 4f0:	8f 60       	ori	r24, 0x0F	; 15
 4f2:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR  &= ~ KBD_MASK;
 4f4:	8a b1       	in	r24, 0x0a	; 10
 4f6:	80 7f       	andi	r24, 0xF0	; 240
 4f8:	8a b9       	out	0x0a, r24	; 10
}
 4fa:	08 95       	ret

000004fc <main>:
#include "clock.h"
#include <avr/wdt.h> 

int main(void)
{
	Clock_Init();
 4fc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Clock_Init>
	wdt_enable(WDTO_1S);
 500:	2e e0       	ldi	r18, 0x0E	; 14
 502:	88 e1       	ldi	r24, 0x18	; 24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	a8 95       	wdr
 50c:	80 93 60 00 	sts	0x0060, r24
 510:	0f be       	out	0x3f, r0	; 63
 512:	20 93 60 00 	sts	0x0060, r18
	sei();
 516:	78 94       	sei

	while(1)
	{
		Clock_Cycle();
 518:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Clock_Cycle>
		wdt_reset();
 51c:	a8 95       	wdr
 51e:	fc cf       	rjmp	.-8      	; 0x518 <__stack+0x19>

00000520 <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 520:	84 b1       	in	r24, 0x04	; 4
 522:	8c 62       	ori	r24, 0x2C	; 44
 524:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 526:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 528:	80 e5       	ldi	r24, 0x50	; 80
 52a:	8c bd       	out	0x2c, r24	; 44

   SPSR = (0<<SPI2X);
 52c:	1d bc       	out	0x2d, r1	; 45
}
 52e:	08 95       	ret

00000530 <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 530:	df 93       	push	r29
 532:	cf 93       	push	r28
 534:	00 d0       	rcall	.+0      	; 0x536 <LED_SPI_WriteWord+0x6>
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 53e:	fe 01       	movw	r30, r28
 540:	31 96       	adiw	r30, 0x01	; 1
 542:	81 81       	ldd	r24, Z+1	; 0x01
 544:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 546:	0d b4       	in	r0, 0x2d	; 45
 548:	07 fe       	sbrs	r0, 7
 54a:	fd cf       	rjmp	.-6      	; 0x546 <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 54c:	80 81       	ld	r24, Z
 54e:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 550:	0d b4       	in	r0, 0x2d	; 45
 552:	07 fe       	sbrs	r0, 7
 554:	fd cf       	rjmp	.-6      	; 0x550 <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 556:	8a e1       	ldi	r24, 0x1A	; 26
 558:	8a 95       	dec	r24
 55a:	f1 f7       	brne	.-4      	; 0x558 <LED_SPI_WriteWord+0x28>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 55e:	2a 9a       	sbi	0x05, 2	; 5
 560:	8a e1       	ldi	r24, 0x1A	; 26
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <LED_SPI_WriteWord+0x32>
 566:	00 c0       	rjmp	.+0      	; 0x568 <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 568:	2a 98       	cbi	0x05, 2	; 5
 56a:	8a e1       	ldi	r24, 0x1A	; 26
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <LED_SPI_WriteWord+0x3c>
 570:	00 c0       	rjmp	.+0      	; 0x572 <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	08 95       	ret

0000057c <LED_Out>:
#include "led_display.h"


//--------------------------------------------------------------------------------
void LED_Out(stClock *clock, uint8_t out_buf_len)//вывод буфера в SPI bit-bang
{
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	ec 01       	movw	r28, r24
 58c:	d6 2e       	mov	r13, r22
	uint8_t i;

	clock->display_buf[0]=(0xA00|clock->brightnessCurrent|0x01);
 58e:	8e 85       	ldd	r24, Y+14	; 0x0e
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	81 60       	ori	r24, 0x01	; 1
 594:	9a 60       	ori	r25, 0x0A	; 10
 596:	98 8b       	std	Y+16, r25	; 0x10
 598:	8f 87       	std	Y+15, r24	; 0x0f
 59a:	7e 01       	movw	r14, r28

	for(i=0;i<out_buf_len;i++)
 59c:	00 e0       	ldi	r16, 0x00	; 0
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	1d c0       	rjmp	.+58     	; 0x5dc <LED_Out+0x60>
	{
		if(i>=5)
 5a2:	85 30       	cpi	r24, 0x05	; 5
 5a4:	80 f0       	brcs	.+32     	; 0x5c6 <LED_Out+0x4a>
		{
			if(clock->display_mask&(1<<(i-5)))
 5a6:	2f a5       	ldd	r18, Y+47	; 0x2f
 5a8:	30 e0       	ldi	r19, 0x00	; 0
#include "led_display.h"


//--------------------------------------------------------------------------------
void LED_Out(stClock *clock, uint8_t out_buf_len)//вывод буфера в SPI bit-bang
 5aa:	c8 01       	movw	r24, r16
 5ac:	05 97       	sbiw	r24, 0x05	; 5

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(clock->display_mask&(1<<(i-5)))
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <LED_Out+0x38>
 5b0:	35 95       	asr	r19
 5b2:	27 95       	ror	r18
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <LED_Out+0x34>
 5b8:	f7 01       	movw	r30, r14
 5ba:	87 85       	ldd	r24, Z+15	; 0x0f
 5bc:	90 89       	ldd	r25, Z+16	; 0x10
 5be:	20 fd       	sbrc	r18, 0
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <LED_Out+0x50>
			{
				LED_SPI_WriteWord(clock->display_buf[i]);
			}
			else
			{
				LED_SPI_WriteWord(clock->display_buf[i]|0xF);
 5c2:	8f 60       	ori	r24, 0x0F	; 15
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <LED_Out+0x50>
			}
		}
		else
		{
			LED_SPI_WriteWord(clock->display_buf[i]);
 5c6:	f7 01       	movw	r30, r14
 5c8:	87 85       	ldd	r24, Z+15	; 0x0f
 5ca:	90 89       	ldd	r25, Z+16	; 0x10
 5cc:	0e 94 98 02 	call	0x530	; 0x530 <LED_SPI_WriteWord>
 5d0:	0f 5f       	subi	r16, 0xFF	; 255
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	e8 0e       	add	r14, r24
 5da:	f9 1e       	adc	r15, r25
 5dc:	80 2f       	mov	r24, r16
{
	uint8_t i;

	clock->display_buf[0]=(0xA00|clock->brightnessCurrent|0x01);

	for(i=0;i<out_buf_len;i++)
 5de:	0d 15       	cp	r16, r13
 5e0:	00 f3       	brcs	.-64     	; 0x5a2 <LED_Out+0x26>
			LED_SPI_WriteWord(clock->display_buf[i]);
		}
	}

	return;	
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	08 95       	ret

000005f2 <Clock_Init>:
#include "utilites.h"

stClock clock;

void Clock_Init(void)
{
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
	Menu_Init();
 5f6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Menu_Init>
	I2C_Init();
 5fa:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 5fe:	c9 e0       	ldi	r28, 0x09	; 9
 600:	d1 e0       	ldi	r29, 0x01	; 1
 602:	ce 01       	movw	r24, r28
 604:	0e 94 c9 01 	call	0x392	; 0x392 <I2C_DS1307Init>
	KBD_Init();
 608:	0e 94 77 02 	call	0x4ee	; 0x4ee <KBD_Init>
	LED_SPI_Init();
 60c:	0e 94 90 02 	call	0x520	; 0x520 <LED_SPI_Init>

	I2C_Read_Buf(ADDR_BRIGHTNESS_DAY, 	(void*)&clock.brightnessDay, sizeof(stBrightness));
 610:	be 01       	movw	r22, r28
 612:	68 5f       	subi	r22, 0xF8	; 248
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	88 e0       	ldi	r24, 0x08	; 8
 618:	43 e0       	ldi	r20, 0x03	; 3
 61a:	0e 94 28 01 	call	0x250	; 0x250 <I2C_Read_Buf>
	I2C_Read_Buf(ADDR_BRIGHTNESS_NIGHT, (void*)&clock.brightnessNight, sizeof(stBrightness));
 61e:	be 01       	movw	r22, r28
 620:	65 5f       	subi	r22, 0xF5	; 245
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	80 e1       	ldi	r24, 0x10	; 16
 626:	43 e0       	ldi	r20, 0x03	; 3
 628:	0e 94 28 01 	call	0x250	; 0x250 <I2C_Read_Buf>
	
	clock.display_buf[0]=0xA0F;
 62c:	8f e0       	ldi	r24, 0x0F	; 15
 62e:	9a e0       	ldi	r25, 0x0A	; 10
 630:	90 93 19 01 	sts	0x0119, r25
 634:	80 93 18 01 	sts	0x0118, r24
	clock.display_buf[1]=0x9FF;
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	99 e0       	ldi	r25, 0x09	; 9
 63c:	90 93 1b 01 	sts	0x011B, r25
 640:	80 93 1a 01 	sts	0x011A, r24
	clock.display_buf[2]=0xB05;
 644:	85 e0       	ldi	r24, 0x05	; 5
 646:	9b e0       	ldi	r25, 0x0B	; 11
 648:	90 93 1d 01 	sts	0x011D, r25
 64c:	80 93 1c 01 	sts	0x011C, r24
	clock.display_buf[3]=0xC01;		
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	9c e0       	ldi	r25, 0x0C	; 12
 654:	90 93 1f 01 	sts	0x011F, r25
 658:	80 93 1e 01 	sts	0x011E, r24
	clock.display_buf[4]=0xF00;
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	9f e0       	ldi	r25, 0x0F	; 15
 660:	90 93 21 01 	sts	0x0121, r25
 664:	80 93 20 01 	sts	0x0120, r24
	
	clock.display_buf[5]=0x101;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	90 93 23 01 	sts	0x0123, r25
 670:	80 93 22 01 	sts	0x0122, r24
	clock.display_buf[6]=0x202;
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	92 e0       	ldi	r25, 0x02	; 2
 678:	90 93 25 01 	sts	0x0125, r25
 67c:	80 93 24 01 	sts	0x0124, r24
	clock.display_buf[7]=0x303;
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	93 e0       	ldi	r25, 0x03	; 3
 684:	90 93 27 01 	sts	0x0127, r25
 688:	80 93 26 01 	sts	0x0126, r24
	clock.display_buf[8]=0x404;
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	94 e0       	ldi	r25, 0x04	; 4
 690:	90 93 29 01 	sts	0x0129, r25
 694:	80 93 28 01 	sts	0x0128, r24
	clock.display_buf[9]=0x505;
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	95 e0       	ldi	r25, 0x05	; 5
 69c:	90 93 2b 01 	sts	0x012B, r25
 6a0:	80 93 2a 01 	sts	0x012A, r24


	//clock.brightnessCurrent=0xF;
	clock.display_mask	   =0xFF;
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	80 93 38 01 	sts	0x0138, r24

	Determine_Current_Brightness(&clock);
 6aa:	ce 01       	movw	r24, r28
 6ac:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Determine_Current_Brightness>
}
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <Clock_Cycle>:

void Clock_Cycle(void)
{
	static uint16_t dispCounter=0;

	Menu_Key(KBD_ReadKey(), &clock);
 6b6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <KBD_ReadKey>
 6ba:	69 e0       	ldi	r22, 0x09	; 9
 6bc:	71 e0       	ldi	r23, 0x01	; 1
 6be:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Menu_Key>

	if(dispCounter==DISP_COUNTER)
 6c2:	80 91 04 01 	lds	r24, 0x0104
 6c6:	90 91 05 01 	lds	r25, 0x0105
 6ca:	23 e0       	ldi	r18, 0x03	; 3
 6cc:	88 3e       	cpi	r24, 0xE8	; 232
 6ce:	92 07       	cpc	r25, r18
 6d0:	71 f4       	brne	.+28     	; 0x6ee <Clock_Cycle+0x38>
	{
		dispCounter=0;
 6d2:	10 92 05 01 	sts	0x0105, r1
 6d6:	10 92 04 01 	sts	0x0104, r1
		Menu_Display(&clock);
 6da:	89 e0       	ldi	r24, 0x09	; 9
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 86 03 	call	0x70c	; 0x70c <Menu_Display>
		LED_Out(&clock, LED_BUF_LEN);
 6e2:	89 e0       	ldi	r24, 0x09	; 9
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	6a e0       	ldi	r22, 0x0A	; 10
 6e8:	0e 94 be 02 	call	0x57c	; 0x57c <LED_Out>
 6ec:	08 95       	ret
	}
	else
	{
		dispCounter++;
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	90 93 05 01 	sts	0x0105, r25
 6f4:	80 93 04 01 	sts	0x0104, r24
 6f8:	08 95       	ret

000006fa <Menu_Change>:
MAKE_MENU(m_s4i1,  NULL_ENTRY,NULL_ENTRY,  m_s1i3,     NULL_ENTRY,   MENU_TUNE_YEAR, 		"");


void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	88 36       	cpi	r24, 0x68	; 104
 6fe:	92 07       	cpc	r25, r18
 700:	21 f0       	breq	.+8      	; 0x70a <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 702:	90 93 3a 01 	sts	0x013A, r25
 706:	80 93 39 01 	sts	0x0139, r24
 70a:	08 95       	ret

0000070c <Menu_Display>:
}

#define BLINK_CONST		30
//------------------------------------
void Menu_Display(stClock *clock) 
{
 70c:	ef 92       	push	r14
 70e:	ff 92       	push	r15
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	ec 01       	movw	r28, r24
	static uint8_t blink_mask=0xFF;
	static uint16_t blink_counter=0;

//wdt_reset();	
	if(blink_counter<BLINK_CONST)
 716:	80 91 06 01 	lds	r24, 0x0106
 71a:	90 91 07 01 	lds	r25, 0x0107
 71e:	8e 31       	cpi	r24, 0x1E	; 30
 720:	91 05       	cpc	r25, r1
 722:	30 f4       	brcc	.+12     	; 0x730 <Menu_Display+0x24>
	{
		blink_counter++;
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	90 93 07 01 	sts	0x0107, r25
 72a:	80 93 06 01 	sts	0x0106, r24
 72e:	09 c0       	rjmp	.+18     	; 0x742 <Menu_Display+0x36>
	}	
	else
	{
		blink_counter=0;
 730:	10 92 07 01 	sts	0x0107, r1
 734:	10 92 06 01 	sts	0x0106, r1
		blink_mask=~blink_mask;
 738:	80 91 00 01 	lds	r24, 0x0100
 73c:	80 95       	com	r24
 73e:	80 93 00 01 	sts	0x0100, r24
	}


	switch(SELECT)
 742:	e0 91 39 01 	lds	r30, 0x0139
 746:	f0 91 3a 01 	lds	r31, 0x013A
 74a:	38 96       	adiw	r30, 0x08	; 8
 74c:	e4 91       	lpm	r30, Z+
 74e:	e6 30       	cpi	r30, 0x06	; 6
 750:	09 f4       	brne	.+2      	; 0x754 <Menu_Display+0x48>
 752:	4b c0       	rjmp	.+150    	; 0x7ea <Menu_Display+0xde>
 754:	e7 30       	cpi	r30, 0x07	; 7
 756:	70 f4       	brcc	.+28     	; 0x774 <Menu_Display+0x68>
 758:	e3 30       	cpi	r30, 0x03	; 3
 75a:	49 f1       	breq	.+82     	; 0x7ae <Menu_Display+0xa2>
 75c:	e4 30       	cpi	r30, 0x04	; 4
 75e:	20 f4       	brcc	.+8      	; 0x768 <Menu_Display+0x5c>
 760:	e2 30       	cpi	r30, 0x02	; 2
 762:	09 f0       	breq	.+2      	; 0x766 <Menu_Display+0x5a>
 764:	45 c0       	rjmp	.+138    	; 0x7f0 <Menu_Display+0xe4>
 766:	14 c0       	rjmp	.+40     	; 0x790 <Menu_Display+0x84>
 768:	e4 30       	cpi	r30, 0x04	; 4
 76a:	81 f1       	breq	.+96     	; 0x7cc <Menu_Display+0xc0>
 76c:	e5 30       	cpi	r30, 0x05	; 5
 76e:	09 f0       	breq	.+2      	; 0x772 <Menu_Display+0x66>
 770:	3f c0       	rjmp	.+126    	; 0x7f0 <Menu_Display+0xe4>
 772:	3b c0       	rjmp	.+118    	; 0x7ea <Menu_Display+0xde>
 774:	e9 30       	cpi	r30, 0x09	; 9
 776:	c9 f1       	breq	.+114    	; 0x7ea <Menu_Display+0xde>
 778:	ea 30       	cpi	r30, 0x0A	; 10
 77a:	28 f4       	brcc	.+10     	; 0x786 <Menu_Display+0x7a>
 77c:	e7 30       	cpi	r30, 0x07	; 7
 77e:	a9 f1       	breq	.+106    	; 0x7ea <Menu_Display+0xde>
 780:	e8 30       	cpi	r30, 0x08	; 8
 782:	b1 f5       	brne	.+108    	; 0x7f0 <Menu_Display+0xe4>
 784:	32 c0       	rjmp	.+100    	; 0x7ea <Menu_Display+0xde>
 786:	ea 30       	cpi	r30, 0x0A	; 10
 788:	81 f1       	breq	.+96     	; 0x7ea <Menu_Display+0xde>
 78a:	eb 30       	cpi	r30, 0x0B	; 11
 78c:	89 f5       	brne	.+98     	; 0x7f0 <Menu_Display+0xe4>
 78e:	2d c0       	rjmp	.+90     	; 0x7ea <Menu_Display+0xde>
	{
		case MENU_TIME:
		{
			I2C_ReadTime(&clock->DS1307Time);
 790:	ce 01       	movw	r24, r28
 792:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ReadTime>
			clock->display_mask=0xFF;
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	8f a7       	std	Y+47, r24	; 0x2f
			Determine_Current_Brightness(clock);
 79a:	ce 01       	movw	r24, r28
 79c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Determine_Current_Brightness>
			Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 7a0:	be 01       	movw	r22, r28
 7a2:	67 5e       	subi	r22, 0xE7	; 231
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	ce 01       	movw	r24, r28
 7a8:	0e 94 56 05 	call	0xaac	; 0xaac <Time_To_Buf>
		}
		break;
 7ac:	21 c0       	rjmp	.+66     	; 0x7f0 <Menu_Display+0xe4>
		
		case MENU_DATE:
		{
			I2C_ReadTime(&clock->DS1307Time);
 7ae:	ce 01       	movw	r24, r28
 7b0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ReadTime>
			clock->display_mask=0xFF;
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	8f a7       	std	Y+47, r24	; 0x2f
			Determine_Current_Brightness(clock);
 7b8:	ce 01       	movw	r24, r28
 7ba:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Determine_Current_Brightness>
			Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 7be:	be 01       	movw	r22, r28
 7c0:	67 5e       	subi	r22, 0xE7	; 231
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	ce 01       	movw	r24, r28
 7c6:	0e 94 82 05 	call	0xb04	; 0xb04 <Date_To_Buf>
		}
		break;
 7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <Menu_Display+0xe4>

		case MENU_YEAR:
		{
			I2C_ReadTime(&clock->DS1307Time);
 7cc:	ce 01       	movw	r24, r28
 7ce:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ReadTime>
			clock->display_mask=0xFF;
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	8f a7       	std	Y+47, r24	; 0x2f
			Determine_Current_Brightness(clock);
 7d6:	ce 01       	movw	r24, r28
 7d8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Determine_Current_Brightness>
			Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 7dc:	be 01       	movw	r22, r28
 7de:	67 5e       	subi	r22, 0xE7	; 231
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	ce 01       	movw	r24, r28
 7e4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Year_To_Buf>
		}
		break;
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <Menu_Display+0xe4>
		}
		break;

		case MENU_TUNE_YEAR:
		{
			clock->display_mask=blink_mask;
 7ea:	80 91 00 01 	lds	r24, 0x0100
 7ee:	8f a7       	std	Y+47, r24	; 0x2f
		default:
		{
		}
		break;
	}
}
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	08 95       	ret

000007fa <Menu_Key>:

void Menu_Key(enKey key, stClock *clock) {
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	eb 01       	movw	r28, r22
	switch (key) 
 800:	83 30       	cpi	r24, 0x03	; 3
 802:	09 f4       	brne	.+2      	; 0x806 <Menu_Key+0xc>
 804:	31 c1       	rjmp	.+610    	; 0xa68 <Menu_Key+0x26e>
 806:	84 30       	cpi	r24, 0x04	; 4
 808:	30 f4       	brcc	.+12     	; 0x816 <Menu_Key+0x1c>
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	59 f0       	breq	.+22     	; 0x824 <Menu_Key+0x2a>
 80e:	82 30       	cpi	r24, 0x02	; 2
 810:	09 f0       	breq	.+2      	; 0x814 <Menu_Key+0x1a>
 812:	42 c1       	rjmp	.+644    	; 0xa98 <Menu_Key+0x29e>
 814:	88 c0       	rjmp	.+272    	; 0x926 <Menu_Key+0x12c>
 816:	84 30       	cpi	r24, 0x04	; 4
 818:	09 f4       	brne	.+2      	; 0x81c <Menu_Key+0x22>
 81a:	de c0       	rjmp	.+444    	; 0x9d8 <Menu_Key+0x1de>
 81c:	8c 30       	cpi	r24, 0x0C	; 12
 81e:	09 f0       	breq	.+2      	; 0x822 <Menu_Key+0x28>
 820:	3b c1       	rjmp	.+630    	; 0xa98 <Menu_Key+0x29e>
 822:	2e c1       	rjmp	.+604    	; 0xa80 <Menu_Key+0x286>
		}
		break;
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 824:	80 91 39 01 	lds	r24, 0x0139
 828:	90 91 3a 01 	lds	r25, 0x013A
 82c:	fc 01       	movw	r30, r24
 82e:	38 96       	adiw	r30, 0x08	; 8
 830:	e4 91       	lpm	r30, Z+
 832:	e6 30       	cpi	r30, 0x06	; 6
 834:	79 f1       	breq	.+94     	; 0x894 <Menu_Key+0x9a>
 836:	e7 30       	cpi	r30, 0x07	; 7
 838:	78 f4       	brcc	.+30     	; 0x858 <Menu_Key+0x5e>
 83a:	e3 30       	cpi	r30, 0x03	; 3
 83c:	19 f1       	breq	.+70     	; 0x884 <Menu_Key+0x8a>
 83e:	e4 30       	cpi	r30, 0x04	; 4
 840:	20 f4       	brcc	.+8      	; 0x84a <Menu_Key+0x50>
 842:	e2 30       	cpi	r30, 0x02	; 2
 844:	09 f0       	breq	.+2      	; 0x848 <Menu_Key+0x4e>
 846:	28 c1       	rjmp	.+592    	; 0xa98 <Menu_Key+0x29e>
 848:	19 c0       	rjmp	.+50     	; 0x87c <Menu_Key+0x82>
 84a:	e4 30       	cpi	r30, 0x04	; 4
 84c:	09 f4       	brne	.+2      	; 0x850 <Menu_Key+0x56>
 84e:	68 c0       	rjmp	.+208    	; 0x920 <Menu_Key+0x126>
 850:	e5 30       	cpi	r30, 0x05	; 5
 852:	09 f0       	breq	.+2      	; 0x856 <Menu_Key+0x5c>
 854:	21 c1       	rjmp	.+578    	; 0xa98 <Menu_Key+0x29e>
 856:	1a c0       	rjmp	.+52     	; 0x88c <Menu_Key+0x92>
 858:	e9 30       	cpi	r30, 0x09	; 9
 85a:	09 f4       	brne	.+2      	; 0x85e <Menu_Key+0x64>
 85c:	37 c0       	rjmp	.+110    	; 0x8cc <Menu_Key+0xd2>
 85e:	ea 30       	cpi	r30, 0x0A	; 10
 860:	30 f4       	brcc	.+12     	; 0x86e <Menu_Key+0x74>
 862:	e7 30       	cpi	r30, 0x07	; 7
 864:	e9 f0       	breq	.+58     	; 0x8a0 <Menu_Key+0xa6>
 866:	e8 30       	cpi	r30, 0x08	; 8
 868:	09 f0       	breq	.+2      	; 0x86c <Menu_Key+0x72>
 86a:	16 c1       	rjmp	.+556    	; 0xa98 <Menu_Key+0x29e>
 86c:	1f c0       	rjmp	.+62     	; 0x8ac <Menu_Key+0xb2>
 86e:	ea 30       	cpi	r30, 0x0A	; 10
 870:	09 f4       	brne	.+2      	; 0x874 <Menu_Key+0x7a>
 872:	40 c0       	rjmp	.+128    	; 0x8f4 <Menu_Key+0xfa>
 874:	eb 30       	cpi	r30, 0x0B	; 11
 876:	09 f0       	breq	.+2      	; 0x87a <Menu_Key+0x80>
 878:	0f c1       	rjmp	.+542    	; 0xa98 <Menu_Key+0x29e>
 87a:	4c c0       	rjmp	.+152    	; 0x914 <Menu_Key+0x11a>
			{
			//-----------------------------
				case MENU_TIME:
				{
					Menu_Change(NEXT);
 87c:	fc 01       	movw	r30, r24
 87e:	25 91       	lpm	r18, Z+
 880:	34 91       	lpm	r19, Z+
 882:	fc c0       	rjmp	.+504    	; 0xa7c <Menu_Key+0x282>
				}
				break;

				case MENU_DATE:
				{
					Menu_Change(NEXT);
 884:	fc 01       	movw	r30, r24
 886:	25 91       	lpm	r18, Z+
 888:	34 91       	lpm	r19, Z+
 88a:	f8 c0       	rjmp	.+496    	; 0xa7c <Menu_Key+0x282>
				}
				break;
			//------------------------------							
				case MENU_TUNE_TIME:
				{
					I2C_StoreTime(&clock->DS1307Time);
 88c:	cb 01       	movw	r24, r22
 88e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <I2C_StoreTime>
 892:	46 c0       	rjmp	.+140    	; 0x920 <Menu_Key+0x126>
				}
				break;

				case MENU_TUNE_DATE:
				{
					I2C_StoreDate(&clock->DS1307Time);
 894:	cb 01       	movw	r24, r22
 896:	0e 94 1e 02 	call	0x43c	; 0x43c <I2C_StoreDate>
					Menu_Change(&m_s1i2);
 89a:	8c e7       	ldi	r24, 0x7C	; 124
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	fa c0       	rjmp	.+500    	; 0xa94 <Menu_Key+0x29a>
				}
				break;

				case MENU_TUNE_YEAR:
				{
					I2C_StoreYear(&clock->DS1307Time);
 8a0:	cb 01       	movw	r24, r22
 8a2:	0e 94 3a 02 	call	0x474	; 0x474 <I2C_StoreYear>
					Menu_Change(&m_s1i3);
 8a6:	86 e8       	ldi	r24, 0x86	; 134
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	f4 c0       	rjmp	.+488    	; 0xa94 <Menu_Key+0x29a>
				}
				break;
			//--------------------------------
				case MENU_TUNE_BRIGHTNESS_DAY_VAL:
				{					
					Time_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 8ac:	67 5e       	subi	r22, 0xE7	; 231
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	ce 01       	movw	r24, r28
 8b2:	08 96       	adiw	r24, 0x08	; 8
 8b4:	0e 94 d4 05 	call	0xba8	; 0xba8 <Time_Brightness_To_Buf>
					Determine_Current_Brightness(clock);
 8b8:	ce 01       	movw	r24, r28
 8ba:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Determine_Current_Brightness>
					Menu_Change(NEXT);
 8be:	e0 91 39 01 	lds	r30, 0x0139
 8c2:	f0 91 3a 01 	lds	r31, 0x013A
 8c6:	25 91       	lpm	r18, Z+
 8c8:	34 91       	lpm	r19, Z+
 8ca:	d8 c0       	rjmp	.+432    	; 0xa7c <Menu_Key+0x282>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_DAY_TIME:
				{					
					I2C_Write_Buf(ADDR_BRIGHTNESS_DAY, 	(void*)&clock->brightnessDay, sizeof(stBrightness));
 8cc:	68 5f       	subi	r22, 0xF8	; 248
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	88 e0       	ldi	r24, 0x08	; 8
 8d2:	43 e0       	ldi	r20, 0x03	; 3
 8d4:	0e 94 4a 01 	call	0x294	; 0x294 <I2C_Write_Buf>
					Value_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 8d8:	be 01       	movw	r22, r28
 8da:	67 5e       	subi	r22, 0xE7	; 231
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	ce 01       	movw	r24, r28
 8e0:	0b 96       	adiw	r24, 0x0b	; 11
 8e2:	0e 94 00 06 	call	0xc00	; 0xc00 <Value_Brightness_To_Buf>
					Menu_Change(NEXT);
 8e6:	e0 91 39 01 	lds	r30, 0x0139
 8ea:	f0 91 3a 01 	lds	r31, 0x013A
 8ee:	25 91       	lpm	r18, Z+
 8f0:	34 91       	lpm	r19, Z+
 8f2:	c4 c0       	rjmp	.+392    	; 0xa7c <Menu_Key+0x282>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_VAL:
				{				
					Time_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 8f4:	67 5e       	subi	r22, 0xE7	; 231
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	ce 01       	movw	r24, r28
 8fa:	0b 96       	adiw	r24, 0x0b	; 11
 8fc:	0e 94 d4 05 	call	0xba8	; 0xba8 <Time_Brightness_To_Buf>
					Determine_Current_Brightness(clock);
 900:	ce 01       	movw	r24, r28
 902:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Determine_Current_Brightness>
					Menu_Change(NEXT);
 906:	e0 91 39 01 	lds	r30, 0x0139
 90a:	f0 91 3a 01 	lds	r31, 0x013A
 90e:	25 91       	lpm	r18, Z+
 910:	34 91       	lpm	r19, Z+
 912:	b4 c0       	rjmp	.+360    	; 0xa7c <Menu_Key+0x282>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_TIME:
				{
					I2C_Write_Buf(ADDR_BRIGHTNESS_NIGHT, 	(void*)&clock->brightnessNight, sizeof(stBrightness));
 914:	65 5f       	subi	r22, 0xF5	; 245
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	80 e1       	ldi	r24, 0x10	; 16
 91a:	43 e0       	ldi	r20, 0x03	; 3
 91c:	0e 94 4a 01 	call	0x294	; 0x294 <I2C_Write_Buf>
					Menu_Change(&m_s1i1);
 920:	82 e7       	ldi	r24, 0x72	; 114
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b7 c0       	rjmp	.+366    	; 0xa94 <Menu_Key+0x29a>
		break;

		//------------------------
		case KEY_CODE_B: 
		{
			switch(SELECT)//пункт меню
 926:	e0 91 39 01 	lds	r30, 0x0139
 92a:	f0 91 3a 01 	lds	r31, 0x013A
 92e:	38 96       	adiw	r30, 0x08	; 8
 930:	e4 91       	lpm	r30, Z+
 932:	e8 30       	cpi	r30, 0x08	; 8
 934:	d9 f1       	breq	.+118    	; 0x9ac <Menu_Key+0x1b2>
 936:	e9 30       	cpi	r30, 0x09	; 9
 938:	40 f4       	brcc	.+16     	; 0x94a <Menu_Key+0x150>
 93a:	e6 30       	cpi	r30, 0x06	; 6
 93c:	a9 f0       	breq	.+42     	; 0x968 <Menu_Key+0x16e>
 93e:	e7 30       	cpi	r30, 0x07	; 7
 940:	d0 f4       	brcc	.+52     	; 0x976 <Menu_Key+0x17c>
 942:	e5 30       	cpi	r30, 0x05	; 5
 944:	09 f0       	breq	.+2      	; 0x948 <Menu_Key+0x14e>
 946:	a8 c0       	rjmp	.+336    	; 0xa98 <Menu_Key+0x29e>
 948:	08 c0       	rjmp	.+16     	; 0x95a <Menu_Key+0x160>
 94a:	ea 30       	cpi	r30, 0x0A	; 10
 94c:	c9 f1       	breq	.+114    	; 0x9c0 <Menu_Key+0x1c6>
 94e:	ea 30       	cpi	r30, 0x0A	; 10
 950:	f8 f0       	brcs	.+62     	; 0x990 <Menu_Key+0x196>
 952:	eb 30       	cpi	r30, 0x0B	; 11
 954:	09 f0       	breq	.+2      	; 0x958 <Menu_Key+0x15e>
 956:	a0 c0       	rjmp	.+320    	; 0xa98 <Menu_Key+0x29e>
 958:	22 c0       	rjmp	.+68     	; 0x99e <Menu_Key+0x1a4>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Minutes=BCD_Increment(clock->DS1307Time.Minutes,0,((5<<4)|9));
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	60 e0       	ldi	r22, 0x00	; 0
 95e:	49 e5       	ldi	r20, 0x59	; 89
 960:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 964:	89 83       	std	Y+1, r24	; 0x01
 966:	52 c0       	rjmp	.+164    	; 0xa0c <Menu_Key+0x212>
				break;


				case MENU_TUNE_DATE:
				{
					clock->DS1307Time.Month=BCD_Increment(clock->DS1307Time.Month,1,((1<<4)|2));
 968:	8d 81       	ldd	r24, Y+5	; 0x05
 96a:	61 e0       	ldi	r22, 0x01	; 1
 96c:	42 e1       	ldi	r20, 0x12	; 18
 96e:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 972:	8d 83       	std	Y+5, r24	; 0x05
 974:	58 c0       	rjmp	.+176    	; 0xa26 <Menu_Key+0x22c>
				break;


				case MENU_TUNE_YEAR:
				{
					clock->DS1307Time.Year=BCD_Increment(clock->DS1307Time.Year,0,((9<<4)|9));
 976:	8e 81       	ldd	r24, Y+6	; 0x06
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	49 e9       	ldi	r20, 0x99	; 153
 97c:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 980:	8e 83       	std	Y+6, r24	; 0x06
					Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 982:	be 01       	movw	r22, r28
 984:	67 5e       	subi	r22, 0xE7	; 231
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	ce 01       	movw	r24, r28
 98a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Year_To_Buf>
				}
				break;
 98e:	84 c0       	rjmp	.+264    	; 0xa98 <Menu_Key+0x29e>

				case MENU_TUNE_BRIGHTNESS_DAY_TIME:
				{
					clock->brightnessDay.minute=BCD_Increment(clock->brightnessDay.minute,0,((5<<4)|9));
 990:	89 85       	ldd	r24, Y+9	; 0x09
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	49 e5       	ldi	r20, 0x59	; 89
 996:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 99a:	89 87       	std	Y+9, r24	; 0x09
 99c:	51 c0       	rjmp	.+162    	; 0xa40 <Menu_Key+0x246>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_TIME:
				{
					clock->brightnessNight.minute=BCD_Increment(clock->brightnessNight.minute,0,((5<<4)|9));
 99e:	8c 85       	ldd	r24, Y+12	; 0x0c
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	49 e5       	ldi	r20, 0x59	; 89
 9a4:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 9a8:	8c 87       	std	Y+12, r24	; 0x0c
 9aa:	56 c0       	rjmp	.+172    	; 0xa58 <Menu_Key+0x25e>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_DAY_VAL:
				{
					clock->brightnessDay.brightness=(clock->brightnessDay.brightness+2)&0xF;
 9ac:	8a 85       	ldd	r24, Y+10	; 0x0a
 9ae:	8e 5f       	subi	r24, 0xFE	; 254
 9b0:	8f 70       	andi	r24, 0x0F	; 15
 9b2:	8a 87       	std	Y+10, r24	; 0x0a
					clock->brightnessCurrent=clock->brightnessDay.brightness;
 9b4:	8e 87       	std	Y+14, r24	; 0x0e
					Value_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 9b6:	67 5e       	subi	r22, 0xE7	; 231
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	ce 01       	movw	r24, r28
 9bc:	08 96       	adiw	r24, 0x08	; 8
 9be:	09 c0       	rjmp	.+18     	; 0x9d2 <Menu_Key+0x1d8>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_VAL:
				{
					clock->brightnessNight.brightness=(clock->brightnessNight.brightness+2)&0xF;
 9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
 9c2:	8e 5f       	subi	r24, 0xFE	; 254
 9c4:	8f 70       	andi	r24, 0x0F	; 15
 9c6:	8d 87       	std	Y+13, r24	; 0x0d
					clock->brightnessCurrent=clock->brightnessNight.brightness;
 9c8:	8e 87       	std	Y+14, r24	; 0x0e
					Value_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 9ca:	67 5e       	subi	r22, 0xE7	; 231
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	ce 01       	movw	r24, r28
 9d0:	0b 96       	adiw	r24, 0x0b	; 11
 9d2:	0e 94 00 06 	call	0xc00	; 0xc00 <Value_Brightness_To_Buf>
				}
				break;
 9d6:	60 c0       	rjmp	.+192    	; 0xa98 <Menu_Key+0x29e>
		}
		break;
		//------------------------
		case KEY_CODE_C:
		{ 
			switch(SELECT)//пункт меню
 9d8:	e0 91 39 01 	lds	r30, 0x0139
 9dc:	f0 91 3a 01 	lds	r31, 0x013A
 9e0:	38 96       	adiw	r30, 0x08	; 8
 9e2:	e4 91       	lpm	r30, Z+
 9e4:	e6 30       	cpi	r30, 0x06	; 6
 9e6:	c9 f0       	breq	.+50     	; 0xa1a <Menu_Key+0x220>
 9e8:	e7 30       	cpi	r30, 0x07	; 7
 9ea:	20 f4       	brcc	.+8      	; 0x9f4 <Menu_Key+0x1fa>
 9ec:	e5 30       	cpi	r30, 0x05	; 5
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <Menu_Key+0x1f8>
 9f0:	53 c0       	rjmp	.+166    	; 0xa98 <Menu_Key+0x29e>
 9f2:	06 c0       	rjmp	.+12     	; 0xa00 <Menu_Key+0x206>
 9f4:	e9 30       	cpi	r30, 0x09	; 9
 9f6:	f1 f0       	breq	.+60     	; 0xa34 <Menu_Key+0x23a>
 9f8:	eb 30       	cpi	r30, 0x0B	; 11
 9fa:	09 f0       	breq	.+2      	; 0x9fe <Menu_Key+0x204>
 9fc:	4d c0       	rjmp	.+154    	; 0xa98 <Menu_Key+0x29e>
 9fe:	26 c0       	rjmp	.+76     	; 0xa4c <Menu_Key+0x252>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Hours=BCD_Increment(clock->DS1307Time.Hours,0,((2<<4)|3));
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	43 e2       	ldi	r20, 0x23	; 35
 a06:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 a0a:	8a 83       	std	Y+2, r24	; 0x02
					Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a0c:	be 01       	movw	r22, r28
 a0e:	67 5e       	subi	r22, 0xE7	; 231
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	ce 01       	movw	r24, r28
 a14:	0e 94 56 05 	call	0xaac	; 0xaac <Time_To_Buf>
				}
				break;
 a18:	3f c0       	rjmp	.+126    	; 0xa98 <Menu_Key+0x29e>


				case MENU_TUNE_DATE:
				{
					clock->DS1307Time.Date=BCD_Increment(clock->DS1307Time.Date,1,((3<<4)|1));
 a1a:	8c 81       	ldd	r24, Y+4	; 0x04
 a1c:	61 e0       	ldi	r22, 0x01	; 1
 a1e:	41 e3       	ldi	r20, 0x31	; 49
 a20:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 a24:	8c 83       	std	Y+4, r24	; 0x04
					Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a26:	be 01       	movw	r22, r28
 a28:	67 5e       	subi	r22, 0xE7	; 231
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	ce 01       	movw	r24, r28
 a2e:	0e 94 82 05 	call	0xb04	; 0xb04 <Date_To_Buf>
				}
				break;
 a32:	32 c0       	rjmp	.+100    	; 0xa98 <Menu_Key+0x29e>


				case MENU_TUNE_BRIGHTNESS_DAY_TIME:
				{
					clock->brightnessDay.hour=BCD_Increment(clock->brightnessDay.hour,(((MIN_NIGHT_TO_DAY_HOUR/10)<<4)|(MIN_NIGHT_TO_DAY_HOUR%10)),(((MAX_NIGHT_TO_DAY_HOUR/10)<<4)|(MAX_NIGHT_TO_DAY_HOUR%10)));
 a34:	88 85       	ldd	r24, Y+8	; 0x08
 a36:	61 e0       	ldi	r22, 0x01	; 1
 a38:	41 e1       	ldi	r20, 0x11	; 17
 a3a:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 a3e:	88 87       	std	Y+8, r24	; 0x08
					Time_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a40:	be 01       	movw	r22, r28
 a42:	67 5e       	subi	r22, 0xE7	; 231
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	ce 01       	movw	r24, r28
 a48:	08 96       	adiw	r24, 0x08	; 8
 a4a:	0b c0       	rjmp	.+22     	; 0xa62 <Menu_Key+0x268>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_TIME:
				{
					clock->brightnessNight.hour=BCD_Increment(clock->brightnessNight.hour,(((MIN_DAY_TO_NIGHT_HOUR/10)<<4)|(MIN_DAY_TO_NIGHT_HOUR%10)),(((MAX_DAY_TO_NIGHT_HOUR/10)<<4)|(MAX_DAY_TO_NIGHT_HOUR%10)));
 a4c:	8b 85       	ldd	r24, Y+11	; 0x0b
 a4e:	62 e1       	ldi	r22, 0x12	; 18
 a50:	43 e2       	ldi	r20, 0x23	; 35
 a52:	0e 94 42 06 	call	0xc84	; 0xc84 <BCD_Increment>
 a56:	8b 87       	std	Y+11, r24	; 0x0b
					Time_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a58:	be 01       	movw	r22, r28
 a5a:	67 5e       	subi	r22, 0xE7	; 231
 a5c:	7f 4f       	sbci	r23, 0xFF	; 255
 a5e:	ce 01       	movw	r24, r28
 a60:	0b 96       	adiw	r24, 0x0b	; 11
 a62:	0e 94 d4 05 	call	0xba8	; 0xba8 <Time_Brightness_To_Buf>
				}
				break;
 a66:	18 c0       	rjmp	.+48     	; 0xa98 <Menu_Key+0x29e>
		break;
			
		//------------------------
		case KEY_CODE_AB://переход в режим настройки времени/даты/года
		{ 
			I2C_ReadTime(&clock->DS1307Time);
 a68:	cb 01       	movw	r24, r22
 a6a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ReadTime>
			Menu_Change(CHILD);
 a6e:	e0 91 39 01 	lds	r30, 0x0139
 a72:	f0 91 3a 01 	lds	r31, 0x013A
 a76:	36 96       	adiw	r30, 0x06	; 6
 a78:	25 91       	lpm	r18, Z+
 a7a:	34 91       	lpm	r19, Z+
 a7c:	c9 01       	movw	r24, r18
 a7e:	0a c0       	rjmp	.+20     	; 0xa94 <Menu_Key+0x29a>
		}
		break;
		//------------------------
		case KEY_CODE_CD:
		{
			clock->brightnessCurrent=clock->brightnessDay.brightness;
 a80:	8a 85       	ldd	r24, Y+10	; 0x0a
 a82:	8e 87       	std	Y+14, r24	; 0x0e
			Value_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a84:	67 5e       	subi	r22, 0xE7	; 231
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	ce 01       	movw	r24, r28
 a8a:	08 96       	adiw	r24, 0x08	; 8
 a8c:	0e 94 00 06 	call	0xc00	; 0xc00 <Value_Brightness_To_Buf>
			Menu_Change(&m_s1i4);
 a90:	80 e9       	ldi	r24, 0x90	; 144
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Menu_Change>
		{

		}
		break;
	}
}
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	08 95       	ret

00000a9e <Menu_Init>:
//---------------------------------------------------
void Menu_Init(void) 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 a9e:	82 e7       	ldi	r24, 0x72	; 114
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	90 93 3a 01 	sts	0x013A, r25
 aa6:	80 93 39 01 	sts	0x0139, r24
}
 aaa:	08 95       	ret

00000aac <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 aac:	fc 01       	movw	r30, r24
 aae:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 ab0:	82 81       	ldd	r24, Z+2	; 0x02
 ab2:	82 95       	swap	r24
 ab4:	8f 70       	andi	r24, 0x0F	; 15
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	95 60       	ori	r25, 0x05	; 5
 aba:	11 96       	adiw	r26, 0x01	; 1
 abc:	9c 93       	st	X, r25
 abe:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	8f 70       	andi	r24, 0x0F	; 15
 ac6:	90 70       	andi	r25, 0x00	; 0
 ac8:	94 60       	ori	r25, 0x04	; 4
 aca:	13 96       	adiw	r26, 0x03	; 3
 acc:	9c 93       	st	X, r25
 ace:	8e 93       	st	-X, r24
 ad0:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 ad2:	8a e0       	ldi	r24, 0x0A	; 10
 ad4:	93 e0       	ldi	r25, 0x03	; 3
 ad6:	15 96       	adiw	r26, 0x05	; 5
 ad8:	9c 93       	st	X, r25
 ada:	8e 93       	st	-X, r24
 adc:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 ade:	81 81       	ldd	r24, Z+1	; 0x01
 ae0:	82 95       	swap	r24
 ae2:	8f 70       	andi	r24, 0x0F	; 15
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	92 60       	ori	r25, 0x02	; 2
 ae8:	17 96       	adiw	r26, 0x07	; 7
 aea:	9c 93       	st	X, r25
 aec:	8e 93       	st	-X, r24
 aee:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 af0:	81 81       	ldd	r24, Z+1	; 0x01
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	8f 70       	andi	r24, 0x0F	; 15
 af6:	90 70       	andi	r25, 0x00	; 0
 af8:	91 60       	ori	r25, 0x01	; 1
 afa:	19 96       	adiw	r26, 0x09	; 9
 afc:	9c 93       	st	X, r25
 afe:	8e 93       	st	-X, r24
 b00:	18 97       	sbiw	r26, 0x08	; 8
}
 b02:	08 95       	ret

00000b04 <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 b04:	fc 01       	movw	r30, r24
 b06:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Date>>4);
 b08:	84 81       	ldd	r24, Z+4	; 0x04
 b0a:	82 95       	swap	r24
 b0c:	8f 70       	andi	r24, 0x0F	; 15
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	95 60       	ori	r25, 0x05	; 5
 b12:	11 96       	adiw	r26, 0x01	; 1
 b14:	9c 93       	st	X, r25
 b16:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Date&0x0F);
 b18:	84 81       	ldd	r24, Z+4	; 0x04
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	8f 70       	andi	r24, 0x0F	; 15
 b1e:	90 70       	andi	r25, 0x00	; 0
 b20:	94 60       	ori	r25, 0x04	; 4
 b22:	13 96       	adiw	r26, 0x03	; 3
 b24:	9c 93       	st	X, r25
 b26:	8e 93       	st	-X, r24
 b28:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0xFF);//"."
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	93 e0       	ldi	r25, 0x03	; 3
 b2e:	15 96       	adiw	r26, 0x05	; 5
 b30:	9c 93       	st	X, r25
 b32:	8e 93       	st	-X, r24
 b34:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Month>>4);
 b36:	85 81       	ldd	r24, Z+5	; 0x05
 b38:	82 95       	swap	r24
 b3a:	8f 70       	andi	r24, 0x0F	; 15
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	92 60       	ori	r25, 0x02	; 2
 b40:	17 96       	adiw	r26, 0x07	; 7
 b42:	9c 93       	st	X, r25
 b44:	8e 93       	st	-X, r24
 b46:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Month&0x0F);
 b48:	85 81       	ldd	r24, Z+5	; 0x05
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	8f 70       	andi	r24, 0x0F	; 15
 b4e:	90 70       	andi	r25, 0x00	; 0
 b50:	91 60       	ori	r25, 0x01	; 1
 b52:	19 96       	adiw	r26, 0x09	; 9
 b54:	9c 93       	st	X, r25
 b56:	8e 93       	st	-X, r24
 b58:	18 97       	sbiw	r26, 0x08	; 8
}
 b5a:	08 95       	ret

00000b5c <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 b5c:	fc 01       	movw	r30, r24
 b5e:	db 01       	movw	r26, r22
	buf[0]=0x0500|(0xF);
 b60:	8f e0       	ldi	r24, 0x0F	; 15
 b62:	95 e0       	ldi	r25, 0x05	; 5
 b64:	11 96       	adiw	r26, 0x01	; 1
 b66:	9c 93       	st	X, r25
 b68:	8e 93       	st	-X, r24
	buf[1]=0x0400|(2);
 b6a:	82 e0       	ldi	r24, 0x02	; 2
 b6c:	94 e0       	ldi	r25, 0x04	; 4
 b6e:	13 96       	adiw	r26, 0x03	; 3
 b70:	9c 93       	st	X, r25
 b72:	8e 93       	st	-X, r24
 b74:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0);
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	93 e0       	ldi	r25, 0x03	; 3
 b7a:	15 96       	adiw	r26, 0x05	; 5
 b7c:	9c 93       	st	X, r25
 b7e:	8e 93       	st	-X, r24
 b80:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Year>>4);
 b82:	86 81       	ldd	r24, Z+6	; 0x06
 b84:	82 95       	swap	r24
 b86:	8f 70       	andi	r24, 0x0F	; 15
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	92 60       	ori	r25, 0x02	; 2
 b8c:	17 96       	adiw	r26, 0x07	; 7
 b8e:	9c 93       	st	X, r25
 b90:	8e 93       	st	-X, r24
 b92:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Year&0x0F);
 b94:	86 81       	ldd	r24, Z+6	; 0x06
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	8f 70       	andi	r24, 0x0F	; 15
 b9a:	90 70       	andi	r25, 0x00	; 0
 b9c:	91 60       	ori	r25, 0x01	; 1
 b9e:	19 96       	adiw	r26, 0x09	; 9
 ba0:	9c 93       	st	X, r25
 ba2:	8e 93       	st	-X, r24
 ba4:	18 97       	sbiw	r26, 0x08	; 8
}
 ba6:	08 95       	ret

00000ba8 <Time_Brightness_To_Buf>:

void Time_Brightness_To_Buf(stBrightness *brightness, uint16_t *buf)
{
 ba8:	fc 01       	movw	r30, r24
 baa:	db 01       	movw	r26, r22
	buf[0]=0x0500|(brightness->hour>>4);
 bac:	80 81       	ld	r24, Z
 bae:	82 95       	swap	r24
 bb0:	8f 70       	andi	r24, 0x0F	; 15
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	95 60       	ori	r25, 0x05	; 5
 bb6:	11 96       	adiw	r26, 0x01	; 1
 bb8:	9c 93       	st	X, r25
 bba:	8e 93       	st	-X, r24
	buf[1]=0x0400|(brightness->hour&0x0F);
 bbc:	80 81       	ld	r24, Z
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	8f 70       	andi	r24, 0x0F	; 15
 bc2:	90 70       	andi	r25, 0x00	; 0
 bc4:	94 60       	ori	r25, 0x04	; 4
 bc6:	13 96       	adiw	r26, 0x03	; 3
 bc8:	9c 93       	st	X, r25
 bca:	8e 93       	st	-X, r24
 bcc:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 bce:	8a e0       	ldi	r24, 0x0A	; 10
 bd0:	93 e0       	ldi	r25, 0x03	; 3
 bd2:	15 96       	adiw	r26, 0x05	; 5
 bd4:	9c 93       	st	X, r25
 bd6:	8e 93       	st	-X, r24
 bd8:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(brightness->minute>>4);
 bda:	81 81       	ldd	r24, Z+1	; 0x01
 bdc:	82 95       	swap	r24
 bde:	8f 70       	andi	r24, 0x0F	; 15
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	92 60       	ori	r25, 0x02	; 2
 be4:	17 96       	adiw	r26, 0x07	; 7
 be6:	9c 93       	st	X, r25
 be8:	8e 93       	st	-X, r24
 bea:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(brightness->minute&0x0F);		
 bec:	81 81       	ldd	r24, Z+1	; 0x01
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	8f 70       	andi	r24, 0x0F	; 15
 bf2:	90 70       	andi	r25, 0x00	; 0
 bf4:	91 60       	ori	r25, 0x01	; 1
 bf6:	19 96       	adiw	r26, 0x09	; 9
 bf8:	9c 93       	st	X, r25
 bfa:	8e 93       	st	-X, r24
 bfc:	18 97       	sbiw	r26, 0x08	; 8
}
 bfe:	08 95       	ret

00000c00 <Value_Brightness_To_Buf>:

void Value_Brightness_To_Buf(stBrightness *brightness, uint16_t *buf)
{
 c00:	fb 01       	movw	r30, r22
	buf[0]=0x0500|(0xF);
 c02:	2f e0       	ldi	r18, 0x0F	; 15
 c04:	35 e0       	ldi	r19, 0x05	; 5
 c06:	31 83       	std	Z+1, r19	; 0x01
 c08:	20 83       	st	Z, r18
	buf[1]=0x0400|(0xF);
 c0a:	2f e0       	ldi	r18, 0x0F	; 15
 c0c:	34 e0       	ldi	r19, 0x04	; 4
 c0e:	33 83       	std	Z+3, r19	; 0x03
 c10:	22 83       	std	Z+2, r18	; 0x02
	buf[2]=0x0300|(0xF);
 c12:	2f e0       	ldi	r18, 0x0F	; 15
 c14:	33 e0       	ldi	r19, 0x03	; 3
 c16:	35 83       	std	Z+5, r19	; 0x05
 c18:	24 83       	std	Z+4, r18	; 0x04
	buf[3]=0x0200|(0xF);
 c1a:	2f e0       	ldi	r18, 0x0F	; 15
 c1c:	32 e0       	ldi	r19, 0x02	; 2
 c1e:	37 83       	std	Z+7, r19	; 0x07
 c20:	26 83       	std	Z+6, r18	; 0x06
	buf[4]=0x0100|((brightness->brightness>>1)&0x0F);	
 c22:	dc 01       	movw	r26, r24
 c24:	12 96       	adiw	r26, 0x02	; 2
 c26:	8c 91       	ld	r24, X
 c28:	12 97       	sbiw	r26, 0x02	; 2
 c2a:	86 95       	lsr	r24
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	8f 70       	andi	r24, 0x0F	; 15
 c30:	90 70       	andi	r25, 0x00	; 0
 c32:	91 60       	ori	r25, 0x01	; 1
 c34:	91 87       	std	Z+9, r25	; 0x09
 c36:	80 87       	std	Z+8, r24	; 0x08
}
 c38:	08 95       	ret

00000c3a <Determine_Current_Brightness>:

void Determine_Current_Brightness(stClock *clock)
{
 c3a:	fc 01       	movw	r30, r24
	if((clock->brightnessDay.hour<MIN_NIGHT_TO_DAY_HOUR) | (clock->brightnessDay.hour>MAX_NIGHT_TO_DAY_HOUR))
 c3c:	80 85       	ldd	r24, Z+8	; 0x08
 c3e:	81 50       	subi	r24, 0x01	; 1
 c40:	8b 30       	cpi	r24, 0x0B	; 11
 c42:	10 f0       	brcs	.+4      	; 0xc48 <Determine_Current_Brightness+0xe>
	{
		clock->brightnessDay.hour=MAX_NIGHT_TO_DAY_HOUR;
 c44:	8b e0       	ldi	r24, 0x0B	; 11
 c46:	80 87       	std	Z+8, r24	; 0x08
	}

	if((clock->brightnessNight.hour<MIN_DAY_TO_NIGHT_HOUR) | (clock->brightnessNight.hour>MAX_DAY_TO_NIGHT_HOUR))
 c48:	83 85       	ldd	r24, Z+11	; 0x0b
 c4a:	8c 50       	subi	r24, 0x0C	; 12
 c4c:	8c 30       	cpi	r24, 0x0C	; 12
 c4e:	10 f0       	brcs	.+4      	; 0xc54 <Determine_Current_Brightness+0x1a>
	{
		clock->brightnessNight.hour=MAX_DAY_TO_NIGHT_HOUR;
 c50:	87 e1       	ldi	r24, 0x17	; 23
 c52:	83 87       	std	Z+11, r24	; 0x0b
	}

	if((clock->DS1307Time.Hours==clock->brightnessDay.hour) && (clock->DS1307Time.Minutes==clock->brightnessDay.minute) && (clock->brightnessCurrent!=clock->brightnessDay.brightness))
 c54:	82 81       	ldd	r24, Z+2	; 0x02
 c56:	90 85       	ldd	r25, Z+8	; 0x08
 c58:	89 17       	cp	r24, r25
 c5a:	41 f4       	brne	.+16     	; 0xc6c <Determine_Current_Brightness+0x32>
 c5c:	21 81       	ldd	r18, Z+1	; 0x01
 c5e:	91 85       	ldd	r25, Z+9	; 0x09
 c60:	29 17       	cp	r18, r25
 c62:	21 f4       	brne	.+8      	; 0xc6c <Determine_Current_Brightness+0x32>
 c64:	92 85       	ldd	r25, Z+10	; 0x0a
 c66:	26 85       	ldd	r18, Z+14	; 0x0e
 c68:	29 13       	cpse	r18, r25
	{
		clock->brightnessCurrent=clock->brightnessDay.brightness;	
 c6a:	96 87       	std	Z+14, r25	; 0x0e
	}

	if((clock->DS1307Time.Hours==clock->brightnessNight.hour) && (clock->DS1307Time.Minutes==clock->brightnessNight.minute) && (clock->brightnessCurrent!=clock->brightnessNight.brightness))
 c6c:	93 85       	ldd	r25, Z+11	; 0x0b
 c6e:	89 17       	cp	r24, r25
 c70:	41 f4       	brne	.+16     	; 0xc82 <Determine_Current_Brightness+0x48>
 c72:	91 81       	ldd	r25, Z+1	; 0x01
 c74:	84 85       	ldd	r24, Z+12	; 0x0c
 c76:	98 17       	cp	r25, r24
 c78:	21 f4       	brne	.+8      	; 0xc82 <Determine_Current_Brightness+0x48>
 c7a:	85 85       	ldd	r24, Z+13	; 0x0d
 c7c:	96 85       	ldd	r25, Z+14	; 0x0e
 c7e:	98 13       	cpse	r25, r24
	{
		clock->brightnessCurrent=clock->brightnessNight.brightness;	
 c80:	86 87       	std	Z+14, r24	; 0x0e
 c82:	08 95       	ret

00000c84 <BCD_Increment>:
	}
}

uint8_t BCD_Increment(uint8_t bcd, uint8_t bcd_min, uint8_t bcd_max)
{	
	if((bcd&0xF)<9)
 c84:	28 2f       	mov	r18, r24
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	2f 70       	andi	r18, 0x0F	; 15
 c8a:	30 70       	andi	r19, 0x00	; 0
 c8c:	29 30       	cpi	r18, 0x09	; 9
 c8e:	31 05       	cpc	r19, r1
 c90:	14 f4       	brge	.+4      	; 0xc96 <BCD_Increment+0x12>
	{
		bcd+=0x01;
 c92:	8f 5f       	subi	r24, 0xFF	; 255
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <BCD_Increment+0x16>
	}
	else
	{
		bcd+=0x10;
 c96:	80 5f       	subi	r24, 0xF0	; 240
		bcd&=0xF0;
 c98:	80 7f       	andi	r24, 0xF0	; 240
 c9a:	86 17       	cp	r24, r22
 c9c:	08 f4       	brcc	.+2      	; 0xca0 <BCD_Increment+0x1c>
 c9e:	86 2f       	mov	r24, r22
	if(bcd<bcd_min)
	{
		bcd=bcd_min;			
	}

	if(bcd>bcd_max)
 ca0:	48 17       	cp	r20, r24
 ca2:	08 f4       	brcc	.+2      	; 0xca6 <BCD_Increment+0x22>
 ca4:	86 2f       	mov	r24, r22
	{
		bcd=bcd_min;			
	}

	return bcd;
}
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
