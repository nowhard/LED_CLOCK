
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800102  00800102  000007f8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000363  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017be  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000833  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dc1  00000000  00000000  0000337d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000210  00000000  00000000  00004140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000651  00000000  00000000  00004350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000455  00000000  00000000  000049a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001aa  00000000  00000000  00004df6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

00000068 <strNULL>:
	...

00000069 <Null_Menu>:
	...

00000073 <m_s1i1>:
  73:	7d 00 69 00 69 00 9b 00 02 00                       }.i.i.....

0000007d <m_s1i2>:
  7d:	87 00 73 00 69 00 af 00 03 00                       ..s.i.....

00000087 <m_s1i3>:
  87:	91 00 7d 00 69 00 c3 00 04 00                       ..}.i.....

00000091 <m_s1i4>:
  91:	69 00 87 00 69 00 69 00 0a 00                       i...i.i...

0000009b <m_s2i1>:
  9b:	a5 00 69 00 73 00 69 00 05 00                       ..i.s.i...

000000a5 <m_s2i2>:
  a5:	69 00 9b 00 73 00 69 00 06 00                       i...s.i...

000000af <m_s3i1>:
  af:	b9 00 69 00 7d 00 69 00 07 00                       ..i.}.i...

000000b9 <m_s3i2>:
  b9:	69 00 af 00 7d 00 69 00 08 00                       i...}.i...

000000c3 <m_s4i1>:
  c3:	69 00 69 00 87 00 69 00 09 00 00                    i.i...i....

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf ef       	ldi	r28, 0xFF	; 255
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
  da:	11 e0       	ldi	r17, 0x01	; 1
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	e2 e6       	ldi	r30, 0x62	; 98
  e2:	f7 e0       	ldi	r31, 0x07	; 7
  e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 30       	cpi	r26, 0x02	; 2
  ec:	b1 07       	cpc	r27, r17
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a2 e0       	ldi	r26, 0x02	; 2
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	ac 33       	cpi	r26, 0x3C	; 60
  fc:	b1 07       	cpc	r27, r17
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 37 02 	call	0x46e	; 0x46e <main>
 104:	0c 94 af 03 	jmp	0x75e	; 0x75e <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	80 63       	ori	r24, 0x30	; 48
 110:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
 112:	87 b1       	in	r24, 0x07	; 7
 114:	8f 7c       	andi	r24, 0xCF	; 207
 116:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
 11e:	10 92 b9 00 	sts	0x00B9, r1
}
 122:	08 95       	ret

00000124 <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 124:	94 ea       	ldi	r25, 0xA4	; 164
 126:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 12a:	90 91 bc 00 	lds	r25, 0x00BC
 12e:	97 ff       	sbrs	r25, 7
 130:	fc cf       	rjmp	.-8      	; 0x12a <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 132:	90 91 b9 00 	lds	r25, 0x00B9
 136:	98 7f       	andi	r25, 0xF8	; 248
 138:	98 30       	cpi	r25, 0x08	; 8
 13a:	39 f5       	brne	.+78     	; 0x18a <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 13c:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 146:	80 91 bc 00 	lds	r24, 0x00BC
 14a:	87 ff       	sbrs	r24, 7
 14c:	fc cf       	rjmp	.-8      	; 0x146 <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 14e:	80 91 b9 00 	lds	r24, 0x00B9
 152:	88 7f       	andi	r24, 0xF8	; 248
 154:	88 31       	cpi	r24, 0x18	; 24
 156:	c9 f4       	brne	.+50     	; 0x18a <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 158:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 162:	80 91 bc 00 	lds	r24, 0x00BC
 166:	87 ff       	sbrs	r24, 7
 168:	fc cf       	rjmp	.-8      	; 0x162 <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 16a:	80 91 b9 00 	lds	r24, 0x00B9
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	88 32       	cpi	r24, 0x28	; 40
 172:	59 f4       	brne	.+22     	; 0x18a <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 174:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 178:	84 e8       	ldi	r24, 0x84	; 132
 17a:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 17e:	80 91 bc 00 	lds	r24, 0x00BC
 182:	87 ff       	sbrs	r24, 7
 184:	fc cf       	rjmp	.-8      	; 0x17e <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 186:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 18a:	84 e9       	ldi	r24, 0x94	; 148
 18c:	80 93 bc 00 	sts	0x00BC, r24
 190:	08 95       	ret

00000192 <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 192:	94 ea       	ldi	r25, 0xA4	; 164
 194:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 198:	90 91 bc 00 	lds	r25, 0x00BC
 19c:	97 ff       	sbrs	r25, 7
 19e:	fc cf       	rjmp	.-8      	; 0x198 <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 1a0:	90 91 b9 00 	lds	r25, 0x00B9
 1a4:	98 7f       	andi	r25, 0xF8	; 248
 1a6:	98 30       	cpi	r25, 0x08	; 8
 1a8:	09 f0       	breq	.+2      	; 0x1ac <I2C_Read+0x1a>
 1aa:	43 c0       	rjmp	.+134    	; 0x232 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 1ac:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1b0:	94 e8       	ldi	r25, 0x84	; 132
 1b2:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1b6:	90 91 bc 00 	lds	r25, 0x00BC
 1ba:	97 ff       	sbrs	r25, 7
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 1be:	90 91 b9 00 	lds	r25, 0x00B9
 1c2:	98 7f       	andi	r25, 0xF8	; 248
 1c4:	98 31       	cpi	r25, 0x18	; 24
 1c6:	a9 f5       	brne	.+106    	; 0x232 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 1c8:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1cc:	94 e8       	ldi	r25, 0x84	; 132
 1ce:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1d2:	90 91 bc 00 	lds	r25, 0x00BC
 1d6:	97 ff       	sbrs	r25, 7
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1da:	90 91 b9 00 	lds	r25, 0x00B9
 1de:	98 7f       	andi	r25, 0xF8	; 248
 1e0:	98 32       	cpi	r25, 0x28	; 40
 1e2:	39 f5       	brne	.+78     	; 0x232 <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1e4:	94 ea       	ldi	r25, 0xA4	; 164
 1e6:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1ea:	90 91 bc 00 	lds	r25, 0x00BC
 1ee:	97 ff       	sbrs	r25, 7
 1f0:	fc cf       	rjmp	.-8      	; 0x1ea <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1f2:	90 91 b9 00 	lds	r25, 0x00B9
 1f6:	98 7f       	andi	r25, 0xF8	; 248
 1f8:	90 31       	cpi	r25, 0x10	; 16
 1fa:	d9 f4       	brne	.+54     	; 0x232 <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 208:	80 91 bc 00 	lds	r24, 0x00BC
 20c:	87 ff       	sbrs	r24, 7
 20e:	fc cf       	rjmp	.-8      	; 0x208 <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 210:	80 91 b9 00 	lds	r24, 0x00B9
 214:	88 7f       	andi	r24, 0xF8	; 248
 216:	80 34       	cpi	r24, 0x40	; 64
 218:	61 f4       	brne	.+24     	; 0x232 <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 21a:	84 e8       	ldi	r24, 0x84	; 132
 21c:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 220:	80 91 bc 00 	lds	r24, 0x00BC
 224:	87 ff       	sbrs	r24, 7
 226:	fc cf       	rjmp	.-8      	; 0x220 <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 228:	80 91 b9 00 	lds	r24, 0x00B9
 22c:	88 7f       	andi	r24, 0xF8	; 248
 22e:	88 35       	cpi	r24, 0x58	; 88
 230:	29 f0       	breq	.+10     	; 0x23c <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 232:	84 e9       	ldi	r24, 0x94	; 148
 234:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret
		
	}
	reg=TWDR;
 23c:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 240:	94 e9       	ldi	r25, 0x94	; 148
 242:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 246:	08 95       	ret

00000248 <I2C_ReadTime>:

//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 24e:	80 ed       	ldi	r24, 0xD0	; 208
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 256:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	87 ec       	ldi	r24, 0xC7	; 199
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <I2C_ReadTime+0x14>
 260:	00 c0       	rjmp	.+0      	; 0x262 <I2C_ReadTime+0x1a>
 262:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 264:	80 ed       	ldi	r24, 0xD0	; 208
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	87 ec       	ldi	r24, 0xC7	; 199
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <I2C_ReadTime+0x2a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <I2C_ReadTime+0x30>
 278:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 27a:	80 ed       	ldi	r24, 0xD0	; 208
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 282:	8a 83       	std	Y+2, r24	; 0x02
 284:	87 ec       	ldi	r24, 0xC7	; 199
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <I2C_ReadTime+0x40>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <I2C_ReadTime+0x46>
 28e:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 290:	80 ed       	ldi	r24, 0xD0	; 208
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 298:	8b 83       	std	Y+3, r24	; 0x03
 29a:	87 ec       	ldi	r24, 0xC7	; 199
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <I2C_ReadTime+0x56>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <I2C_ReadTime+0x5c>
 2a4:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 2a6:	80 ed       	ldi	r24, 0xD0	; 208
 2a8:	64 e0       	ldi	r22, 0x04	; 4
 2aa:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 2ae:	8c 83       	std	Y+4, r24	; 0x04
 2b0:	87 ec       	ldi	r24, 0xC7	; 199
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <I2C_ReadTime+0x6c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <I2C_ReadTime+0x72>
 2ba:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 2bc:	80 ed       	ldi	r24, 0xD0	; 208
 2be:	65 e0       	ldi	r22, 0x05	; 5
 2c0:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 2c4:	8d 83       	std	Y+5, r24	; 0x05
 2c6:	87 ec       	ldi	r24, 0xC7	; 199
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <I2C_ReadTime+0x82>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <I2C_ReadTime+0x88>
 2d0:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 2d2:	80 ed       	ldi	r24, 0xD0	; 208
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 2da:	8e 83       	std	Y+6, r24	; 0x06
 2dc:	87 ec       	ldi	r24, 0xC7	; 199
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <I2C_ReadTime+0x98>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <I2C_ReadTime+0x9e>
 2e6:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 2e8:	80 ed       	ldi	r24, 0xD0	; 208
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 2f0:	8f 83       	std	Y+7, r24	; 0x07
 2f2:	87 ec       	ldi	r24, 0xC7	; 199
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <I2C_ReadTime+0xae>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <I2C_ReadTime+0xb4>
 2fc:	00 00       	nop
	_delay_us(100);
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 304:	80 ed       	ldi	r24, 0xD0	; 208
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Read>
 30c:	ef ec       	ldi	r30, 0xCF	; 207
 30e:	f7 e0       	ldi	r31, 0x07	; 7
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <I2C_DS1307Init+0xc>
 314:	00 c0       	rjmp	.+0      	; 0x316 <I2C_DS1307Init+0x12>
 316:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 318:	87 ff       	sbrs	r24, 7
 31a:	21 c0       	rjmp	.+66     	; 0x35e <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 31c:	80 ed       	ldi	r24, 0xD0	; 208
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	42 e1       	ldi	r20, 0x12	; 18
 322:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 326:	87 ec       	ldi	r24, 0xC7	; 199
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <I2C_DS1307Init+0x26>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <I2C_DS1307Init+0x2c>
 330:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 332:	80 ed       	ldi	r24, 0xD0	; 208
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 33c:	e7 ec       	ldi	r30, 0xC7	; 199
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <I2C_DS1307Init+0x3c>
 344:	00 c0       	rjmp	.+0      	; 0x346 <I2C_DS1307Init+0x42>
 346:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 348:	80 ed       	ldi	r24, 0xD0	; 208
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 352:	87 ec       	ldi	r24, 0xC7	; 199
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <I2C_DS1307Init+0x52>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <I2C_DS1307Init+0x58>
 35c:	00 00       	nop
 35e:	08 95       	ret

00000360 <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 366:	80 ed       	ldi	r24, 0xD0	; 208
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	4a 81       	ldd	r20, Y+2	; 0x02
 36c:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 370:	87 ec       	ldi	r24, 0xC7	; 199
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <I2C_StoreTime+0x14>
 378:	00 c0       	rjmp	.+0      	; 0x37a <I2C_StoreTime+0x1a>
 37a:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 37c:	80 ed       	ldi	r24, 0xD0	; 208
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	49 81       	ldd	r20, Y+1	; 0x01
 382:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 386:	87 ec       	ldi	r24, 0xC7	; 199
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <I2C_StoreTime+0x2a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <I2C_StoreTime+0x30>
 390:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 392:	80 ed       	ldi	r24, 0xD0	; 208
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 39c:	87 ec       	ldi	r24, 0xC7	; 199
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <I2C_StoreTime+0x40>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <I2C_StoreTime+0x46>
 3a6:	00 00       	nop
	_delay_us(100);
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 3b4:	80 ed       	ldi	r24, 0xD0	; 208
 3b6:	65 e0       	ldi	r22, 0x05	; 5
 3b8:	4d 81       	ldd	r20, Y+5	; 0x05
 3ba:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 3be:	87 ec       	ldi	r24, 0xC7	; 199
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <I2C_StoreDate+0x14>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <I2C_StoreDate+0x1a>
 3c8:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 3ca:	80 ed       	ldi	r24, 0xD0	; 208
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	4c 81       	ldd	r20, Y+4	; 0x04
 3d0:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 3d4:	87 ec       	ldi	r24, 0xC7	; 199
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <I2C_StoreDate+0x2a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <I2C_StoreDate+0x30>
 3de:	00 00       	nop
	_delay_us(100);	
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 3e6:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 3e8:	80 ed       	ldi	r24, 0xD0	; 208
 3ea:	66 e0       	ldi	r22, 0x06	; 6
 3ec:	46 81       	ldd	r20, Z+6	; 0x06
 3ee:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Write>
 3f2:	87 ec       	ldi	r24, 0xC7	; 199
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <I2C_StoreYear+0x10>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <I2C_StoreYear+0x16>
 3fc:	00 00       	nop
	_delay_us(100);
}
 3fe:	08 95       	ret

00000400 <KBD_ReadKey>:

static uint8_t lastPIN, previousPIN;

enKey KBD_ReadKey(void) 
{
	lastPIN=(KBD_PIN & KBD_MASK);
 400:	89 b1       	in	r24, 0x09	; 9
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	80 93 02 01 	sts	0x0102, r24

	if((lastPIN!=KBD_MASK) && (lastPIN!=previousPIN))
 408:	80 3f       	cpi	r24, 0xF0	; 240
 40a:	f1 f0       	breq	.+60     	; 0x448 <KBD_ReadKey+0x48>
 40c:	90 91 03 01 	lds	r25, 0x0103
 410:	89 17       	cp	r24, r25
 412:	d1 f0       	breq	.+52     	; 0x448 <KBD_ReadKey+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	ef ec       	ldi	r30, 0xCF	; 207
 416:	f7 e0       	ldi	r31, 0x07	; 7
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <KBD_ReadKey+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <KBD_ReadKey+0x1e>
 41e:	00 00       	nop
	{
		_delay_ms(1);
		if((lastPIN!=KBD_MASK) && (lastPIN==(KBD_PIN & KBD_MASK)))
 420:	80 3f       	cpi	r24, 0xF0	; 240
 422:	71 f0       	breq	.+28     	; 0x440 <KBD_ReadKey+0x40>
 424:	29 b1       	in	r18, 0x09	; 9
 426:	48 2f       	mov	r20, r24
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	20 7f       	andi	r18, 0xF0	; 240
 42e:	30 70       	andi	r19, 0x00	; 0
 430:	42 17       	cp	r20, r18
 432:	53 07       	cpc	r21, r19
 434:	29 f4       	brne	.+10     	; 0x440 <KBD_ReadKey+0x40>
		{
			previousPIN=lastPIN;
 436:	80 93 03 01 	sts	0x0103, r24

			if(lastPIN==KEY_A)  return KEY_CODE_A;
 43a:	88 23       	and	r24, r24
 43c:	59 f4       	brne	.+22     	; 0x454 <KBD_ReadKey+0x54>
 43e:	09 c0       	rjmp	.+18     	; 0x452 <KBD_ReadKey+0x52>

			return lastPIN;
		}
		else
		{	
			lastPIN		=KBD_MASK;
 440:	80 ef       	ldi	r24, 0xF0	; 240
 442:	80 93 02 01 	sts	0x0102, r24
 446:	01 c0       	rjmp	.+2      	; 0x44a <KBD_ReadKey+0x4a>
			return KEY_CODE_NONE;	
		}
	}
	else
	{
		previousPIN = KBD_MASK;
 448:	80 ef       	ldi	r24, 0xF0	; 240
 44a:	80 93 03 01 	sts	0x0103, r24
		return KEY_CODE_NONE;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
		_delay_ms(1);
		if((lastPIN!=KBD_MASK) && (lastPIN==(KBD_PIN & KBD_MASK)))
		{
			previousPIN=lastPIN;

			if(lastPIN==KEY_A)  return KEY_CODE_A;
 452:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		previousPIN = KBD_MASK;
		return KEY_CODE_NONE;
	}
}
 454:	08 95       	ret

00000456 <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 456:	8b b1       	in	r24, 0x0b	; 11
 458:	80 6f       	ori	r24, 0xF0	; 240
 45a:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR &= ~ KBD_MASK;
 45c:	8a b1       	in	r24, 0x0a	; 10
 45e:	8f 70       	andi	r24, 0x0F	; 15
 460:	8a b9       	out	0x0a, r24	; 10

	lastPIN 	= KBD_MASK;
 462:	80 ef       	ldi	r24, 0xF0	; 240
 464:	80 93 02 01 	sts	0x0102, r24
	previousPIN = KBD_MASK;
 468:	80 93 03 01 	sts	0x0103, r24
}
 46c:	08 95       	ret

0000046e <main>:
#include "clock.h"


int main(void)
{
	Clock_Init();
 46e:	0e 94 a1 02 	call	0x542	; 0x542 <Clock_Init>
	sei();
 472:	78 94       	sei

	while(1)
	{
		Clock_Cycle();
 474:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <Clock_Cycle>
 478:	fd cf       	rjmp	.-6      	; 0x474 <main+0x6>

0000047a <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 47a:	84 b1       	in	r24, 0x04	; 4
 47c:	8c 62       	ori	r24, 0x2C	; 44
 47e:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 480:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 482:	80 e5       	ldi	r24, 0x50	; 80
 484:	8c bd       	out	0x2c, r24	; 44

   SPSR = (1<<SPI2X);
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	8d bd       	out	0x2d, r24	; 45
}
 48a:	08 95       	ret

0000048c <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	00 d0       	rcall	.+0      	; 0x492 <LED_SPI_WriteWord+0x6>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	9a 83       	std	Y+2, r25	; 0x02
 498:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 49a:	fe 01       	movw	r30, r28
 49c:	31 96       	adiw	r30, 0x01	; 1
 49e:	81 81       	ldd	r24, Z+1	; 0x01
 4a0:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 4a2:	0d b4       	in	r0, 0x2d	; 45
 4a4:	07 fe       	sbrs	r0, 7
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 4a8:	80 81       	ld	r24, Z
 4aa:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 4ac:	0d b4       	in	r0, 0x2d	; 45
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	8a e1       	ldi	r24, 0x1A	; 26
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LED_SPI_WriteWord+0x28>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 4ba:	2a 9a       	sbi	0x05, 2	; 5
 4bc:	8a e1       	ldi	r24, 0x1A	; 26
 4be:	8a 95       	dec	r24
 4c0:	f1 f7       	brne	.-4      	; 0x4be <LED_SPI_WriteWord+0x32>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 4c4:	2a 98       	cbi	0x05, 2	; 5
 4c6:	8a e1       	ldi	r24, 0x1A	; 26
 4c8:	8a 95       	dec	r24
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LED_SPI_WriteWord+0x3c>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	cf 91       	pop	r28
 4d4:	df 91       	pop	r29
 4d6:	08 95       	ret

000004d8 <LED_Out_Buf>:
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	d6 2e       	mov	r13, r22
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4e8:	08 2f       	mov	r16, r24
 4ea:	19 2f       	mov	r17, r25
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4f0:	e4 2e       	mov	r14, r20
 4f2:	ff 24       	eor	r15, r15
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4f4:	1b c0       	rjmp	.+54     	; 0x52c <__stack+0x2d>
	{
		if(i>=5)
 4f6:	85 30       	cpi	r24, 0x05	; 5
 4f8:	88 f0       	brcs	.+34     	; 0x51c <__stack+0x1d>
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
 4fa:	9e 01       	movw	r18, r28
 4fc:	25 50       	subi	r18, 0x05	; 5
 4fe:	30 40       	sbci	r19, 0x00	; 0

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 500:	c7 01       	movw	r24, r14
 502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
 504:	95 95       	asr	r25
 506:	87 95       	ror	r24
 508:	2a 95       	dec	r18
 50a:	e2 f7       	brpl	.-8      	; 0x504 <__stack+0x5>
 50c:	9c 01       	movw	r18, r24
 50e:	f8 01       	movw	r30, r16
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	20 ff       	sbrs	r18, 0
 516:	05 c0       	rjmp	.+10     	; 0x522 <__stack+0x23>
			{
				LED_SPI_WriteWord(out_buf[i]|0xF);
 518:	8f 60       	ori	r24, 0x0F	; 15
 51a:	03 c0       	rjmp	.+6      	; 0x522 <__stack+0x23>
				LED_SPI_WriteWord(out_buf[i]);
			}
		}
		else
		{
			LED_SPI_WriteWord(out_buf[i]);
 51c:	f8 01       	movw	r30, r16
 51e:	80 81       	ld	r24, Z
 520:	91 81       	ldd	r25, Z+1	; 0x01
 522:	0e 94 46 02 	call	0x48c	; 0x48c <LED_SPI_WriteWord>
 526:	21 96       	adiw	r28, 0x01	; 1
 528:	0e 5f       	subi	r16, 0xFE	; 254
 52a:	1f 4f       	sbci	r17, 0xFF	; 255
 52c:	8c 2f       	mov	r24, r28
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 52e:	cd 15       	cp	r28, r13
 530:	10 f3       	brcs	.-60     	; 0x4f6 <LED_Out_Buf+0x1e>
			LED_SPI_WriteWord(out_buf[i]);
		}
	}

	return;	
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	df 90       	pop	r13
 540:	08 95       	ret

00000542 <Clock_Init>:
stClock clock;
enClockState ClockState;

void Clock_Init(void)
{
	I2C_Init();
 542:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 546:	8f e0       	ldi	r24, 0x0F	; 15
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 82 01 	call	0x304	; 0x304 <I2C_DS1307Init>
	KBD_Init();
 54e:	0e 94 2b 02 	call	0x456	; 0x456 <KBD_Init>
	LED_SPI_Init();
 552:	0e 94 3d 02 	call	0x47a	; 0x47a <LED_SPI_Init>

	//clock.brightness=I2C_Read(SLA_ADDR,ADDR_BRIGHTNESS);
	clock.display_buf[0]=0xA0F;
 556:	8f e0       	ldi	r24, 0x0F	; 15
 558:	9a e0       	ldi	r25, 0x0A	; 10
 55a:	90 93 19 01 	sts	0x0119, r25
 55e:	80 93 18 01 	sts	0x0118, r24
	clock.display_buf[1]=0x9FF;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	99 e0       	ldi	r25, 0x09	; 9
 566:	90 93 1b 01 	sts	0x011B, r25
 56a:	80 93 1a 01 	sts	0x011A, r24
	clock.display_buf[2]=0xB05;
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	9b e0       	ldi	r25, 0x0B	; 11
 572:	90 93 1d 01 	sts	0x011D, r25
 576:	80 93 1c 01 	sts	0x011C, r24
	clock.display_buf[3]=0xC01;		
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	9c e0       	ldi	r25, 0x0C	; 12
 57e:	90 93 1f 01 	sts	0x011F, r25
 582:	80 93 1e 01 	sts	0x011E, r24
	clock.display_buf[4]=0xF00;
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	9f e0       	ldi	r25, 0x0F	; 15
 58a:	90 93 21 01 	sts	0x0121, r25
 58e:	80 93 20 01 	sts	0x0120, r24
	//clock.display_buf[3]=(0xA00|clock.brightness);
	
	clock.display_buf[5]=0x101;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	90 93 23 01 	sts	0x0123, r25
 59a:	80 93 22 01 	sts	0x0122, r24
	clock.display_buf[6]=0x202;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	90 93 25 01 	sts	0x0125, r25
 5a6:	80 93 24 01 	sts	0x0124, r24
	clock.display_buf[7]=0x303;
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	93 e0       	ldi	r25, 0x03	; 3
 5ae:	90 93 27 01 	sts	0x0127, r25
 5b2:	80 93 26 01 	sts	0x0126, r24
	clock.display_buf[8]=0x404;
 5b6:	84 e0       	ldi	r24, 0x04	; 4
 5b8:	94 e0       	ldi	r25, 0x04	; 4
 5ba:	90 93 29 01 	sts	0x0129, r25
 5be:	80 93 28 01 	sts	0x0128, r24
	clock.display_buf[9]=0x505;
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	95 e0       	ldi	r25, 0x05	; 5
 5c6:	90 93 2b 01 	sts	0x012B, r25
 5ca:	80 93 2a 01 	sts	0x012A, r24

	clock.display_mask	=0xFF;
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	80 93 38 01 	sts	0x0138, r24
}
 5d4:	08 95       	ret

000005d6 <Clock_Cycle>:
void Clock_Cycle(void)
{
	static uint16_t dispCounter=0;
	static uint8_t  keyCode=KEY_NONE;

	keyCode=KBD_ReadKey();
 5d6:	0e 94 00 02 	call	0x400	; 0x400 <KBD_ReadKey>
 5da:	80 93 00 01 	sts	0x0100, r24

	Menu_Key(keyCode);
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 22 03 	call	0x644	; 0x644 <Menu_Key>


	if(dispCounter==DISP_COUNTER)
 5e4:	80 91 04 01 	lds	r24, 0x0104
 5e8:	90 91 05 01 	lds	r25, 0x0105
 5ec:	23 e0       	ldi	r18, 0x03	; 3
 5ee:	88 3e       	cpi	r24, 0xE8	; 232
 5f0:	92 07       	cpc	r25, r18
 5f2:	39 f4       	brne	.+14     	; 0x602 <Clock_Cycle+0x2c>
	{
		dispCounter=0;
 5f4:	10 92 05 01 	sts	0x0105, r1
 5f8:	10 92 04 01 	sts	0x0104, r1
		Menu_Display();
 5fc:	0e 94 10 03 	call	0x620	; 0x620 <Menu_Display>
 600:	08 95       	ret
	}
	else
	{
		dispCounter++;
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	90 93 05 01 	sts	0x0105, r25
 608:	80 93 04 01 	sts	0x0104, r24
 60c:	08 95       	ret

0000060e <Menu_Change>:
//extern volatile unsigned char brightness;
//uint8_t selectMenu(msg_par par);

void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	89 36       	cpi	r24, 0x69	; 105
 612:	92 07       	cpc	r25, r18
 614:	21 f0       	breq	.+8      	; 0x61e <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 616:	90 93 3b 01 	sts	0x013B, r25
 61a:	80 93 3a 01 	sts	0x013A, r24
 61e:	08 95       	ret

00000620 <Menu_Display>:
//	menuItem* tempMenu;
//	tempMenu = (menuItem*)pgm_read_word(&selectedMenuItem);
	static unsigned char blink=100,blink_flag=0;
//	static unsigned char blink_mask=0xFF;
//wdt_reset();	
	if(blink<2)
 620:	80 91 01 01 	lds	r24, 0x0101
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	20 f4       	brcc	.+8      	; 0x630 <Menu_Display+0x10>
	{
		blink++;
 628:	8f 5f       	subi	r24, 0xFF	; 255
 62a:	80 93 01 01 	sts	0x0101, r24
 62e:	08 95       	ret
	}	
	else
	{
		blink_flag=!blink_flag;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 91 0c 01 	lds	r25, 0x010C
 636:	91 11       	cpse	r25, r1
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	80 93 0c 01 	sts	0x010C, r24
		blink=0;
 63e:	10 92 01 01 	sts	0x0101, r1
 642:	08 95       	ret

00000644 <Menu_Key>:
	}

}

void Menu_Key(enKey key) {
	switch (key) 
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	09 f4       	brne	.+2      	; 0x64a <Menu_Key+0x6>
 648:	3d c0       	rjmp	.+122    	; 0x6c4 <Menu_Key+0x80>
 64a:	84 30       	cpi	r24, 0x04	; 4
 64c:	38 f4       	brcc	.+14     	; 0x65c <Menu_Key+0x18>
 64e:	20 91 3a 01 	lds	r18, 0x013A
 652:	30 91 3b 01 	lds	r19, 0x013B
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	50 f0       	brcs	.+20     	; 0x66e <Menu_Key+0x2a>
 65a:	15 c0       	rjmp	.+42     	; 0x686 <Menu_Key+0x42>
 65c:	85 30       	cpi	r24, 0x05	; 5
 65e:	e9 f0       	breq	.+58     	; 0x69a <Menu_Key+0x56>
 660:	85 30       	cpi	r24, 0x05	; 5
 662:	08 f4       	brcc	.+2      	; 0x666 <Menu_Key+0x22>
 664:	2f c0       	rjmp	.+94     	; 0x6c4 <Menu_Key+0x80>
 666:	86 30       	cpi	r24, 0x06	; 6
 668:	09 f0       	breq	.+2      	; 0x66c <Menu_Key+0x28>
 66a:	2c c0       	rjmp	.+88     	; 0x6c4 <Menu_Key+0x80>
 66c:	21 c0       	rjmp	.+66     	; 0x6b0 <Menu_Key+0x6c>

		}
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 66e:	f9 01       	movw	r30, r18
 670:	38 96       	adiw	r30, 0x08	; 8
 672:	e4 91       	lpm	r30, Z+
 674:	e5 50       	subi	r30, 0x05	; 5
 676:	e5 30       	cpi	r30, 0x05	; 5
 678:	28 f1       	brcs	.+74     	; 0x6c4 <Menu_Key+0x80>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 67a:	2e 5f       	subi	r18, 0xFE	; 254
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	f9 01       	movw	r30, r18
 680:	25 91       	lpm	r18, Z+
 682:	34 91       	lpm	r19, Z+
 684:	11 c0       	rjmp	.+34     	; 0x6a8 <Menu_Key+0x64>
		break;

		//------------------------
		case KEY_CODE_B: 
		{
			switch(SELECT)//пункт меню
 686:	f9 01       	movw	r30, r18
 688:	38 96       	adiw	r30, 0x08	; 8
 68a:	e4 91       	lpm	r30, Z+
 68c:	e5 50       	subi	r30, 0x05	; 5
 68e:	e5 30       	cpi	r30, 0x05	; 5
 690:	c8 f0       	brcs	.+50     	; 0x6c4 <Menu_Key+0x80>
				}
				break;

				default:
				{
					Menu_Change(NEXT);
 692:	f9 01       	movw	r30, r18
 694:	25 91       	lpm	r18, Z+
 696:	34 91       	lpm	r19, Z+
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <Menu_Key+0x64>
		break;
			
		//------------------------
		case KEY_CODE_AB:
		{ 
			switch(SELECT)
 69a:	e0 91 3a 01 	lds	r30, 0x013A
 69e:	f0 91 3b 01 	lds	r31, 0x013B
				}
				break;*/
				
				default:
				{
					Menu_Change(CHILD);	
 6a2:	36 96       	adiw	r30, 0x06	; 6
 6a4:	25 91       	lpm	r18, Z+
 6a6:	34 91       	lpm	r19, Z+
 6a8:	c9 01       	movw	r24, r18
 6aa:	0e 94 07 03 	call	0x60e	; 0x60e <Menu_Change>
				}
				break;				
 6ae:	08 95       	ret
		}
		break;
		//------------------------
		case KEY_CODE_CD:
		{
			Menu_Change(PARENT);
 6b0:	e0 91 3a 01 	lds	r30, 0x013A
 6b4:	f0 91 3b 01 	lds	r31, 0x013B
 6b8:	34 96       	adiw	r30, 0x04	; 4
 6ba:	25 91       	lpm	r18, Z+
 6bc:	34 91       	lpm	r19, Z+
 6be:	c9 01       	movw	r24, r18
 6c0:	0e 94 07 03 	call	0x60e	; 0x60e <Menu_Change>
 6c4:	08 95       	ret

000006c6 <Menu_Start>:
	//dispMenu(0);
}
//---------------------------------------------------
void Menu_Start() 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 6c6:	83 e7       	ldi	r24, 0x73	; 115
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	90 93 3b 01 	sts	0x013B, r25
 6ce:	80 93 3a 01 	sts	0x013A, r24

}
 6d2:	08 95       	ret

000006d4 <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 6d4:	fc 01       	movw	r30, r24
 6d6:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	82 95       	swap	r24
 6dc:	8f 70       	andi	r24, 0x0F	; 15
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	95 60       	ori	r25, 0x05	; 5
 6e2:	11 96       	adiw	r26, 0x01	; 1
 6e4:	9c 93       	st	X, r25
 6e6:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 6e8:	82 81       	ldd	r24, Z+2	; 0x02
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	8f 70       	andi	r24, 0x0F	; 15
 6ee:	90 70       	andi	r25, 0x00	; 0
 6f0:	94 60       	ori	r25, 0x04	; 4
 6f2:	13 96       	adiw	r26, 0x03	; 3
 6f4:	9c 93       	st	X, r25
 6f6:	8e 93       	st	-X, r24
 6f8:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
 6fc:	93 e0       	ldi	r25, 0x03	; 3
 6fe:	15 96       	adiw	r26, 0x05	; 5
 700:	9c 93       	st	X, r25
 702:	8e 93       	st	-X, r24
 704:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 706:	81 81       	ldd	r24, Z+1	; 0x01
 708:	82 95       	swap	r24
 70a:	8f 70       	andi	r24, 0x0F	; 15
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	92 60       	ori	r25, 0x02	; 2
 710:	17 96       	adiw	r26, 0x07	; 7
 712:	9c 93       	st	X, r25
 714:	8e 93       	st	-X, r24
 716:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 718:	81 81       	ldd	r24, Z+1	; 0x01
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	8f 70       	andi	r24, 0x0F	; 15
 71e:	90 70       	andi	r25, 0x00	; 0
 720:	91 60       	ori	r25, 0x01	; 1
 722:	19 96       	adiw	r26, 0x09	; 9
 724:	9c 93       	st	X, r25
 726:	8e 93       	st	-X, r24
 728:	18 97       	sbiw	r26, 0x08	; 8
}
 72a:	08 95       	ret

0000072c <Buf_To_Time>:


void Buf_To_Time(uint16_t *buf, stDS1307Time *time)
{
 72c:	fc 01       	movw	r30, r24
 72e:	db 01       	movw	r26, r22
	time->Hours		=((buf[0]&0x0F)<<4)|(buf[1]&0x0F);
 730:	82 81       	ldd	r24, Z+2	; 0x02
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	90 81       	ld	r25, Z
 736:	92 95       	swap	r25
 738:	90 7f       	andi	r25, 0xF0	; 240
 73a:	89 2b       	or	r24, r25
 73c:	12 96       	adiw	r26, 0x02	; 2
 73e:	8c 93       	st	X, r24
 740:	12 97       	sbiw	r26, 0x02	; 2
	time->Minutes	=((buf[3]&0x0F)<<4)|(buf[4]&0x0F);
 742:	80 85       	ldd	r24, Z+8	; 0x08
 744:	8f 70       	andi	r24, 0x0F	; 15
 746:	96 81       	ldd	r25, Z+6	; 0x06
 748:	92 95       	swap	r25
 74a:	90 7f       	andi	r25, 0xF0	; 240
 74c:	89 2b       	or	r24, r25
 74e:	11 96       	adiw	r26, 0x01	; 1
 750:	8c 93       	st	X, r24
 752:	11 97       	sbiw	r26, 0x01	; 1
}
 754:	08 95       	ret

00000756 <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{

}
 756:	08 95       	ret

00000758 <Buf_To_Date>:


void Buf_To_Date(uint16_t *buf, stDS1307Time *time)
{

}
 758:	08 95       	ret

0000075a <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{

}
 75a:	08 95       	ret

0000075c <Buf_To_Year>:


void Buf_To_Year(uint16_t *buf, stDS1307Time *time)
{

}
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
