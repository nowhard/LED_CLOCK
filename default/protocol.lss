
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000c86  00000d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800102  00800102  00000d1c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003a1  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cb1  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008c5  00000000  00000000  0000359f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011e6  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  0000504c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000655  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a5b  00000000  00000000  000058f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000231  00000000  00000000  0000634c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <Null_Menu>:
	...

00000072 <m_s1i1>:
  72:	7c 00 68 00 68 00 b8 00 02 00                       |.h.h.....

0000007c <m_s1i2>:
  7c:	86 00 72 00 68 00 c2 00 03 00                       ..r.h.....

00000086 <m_s1i3>:
  86:	90 00 7c 00 68 00 cc 00 04 00                       ..|.h.....

00000090 <m_s1i4>:
  90:	9a 00 86 00 68 00 68 00 08 00                       ....h.h...

0000009a <m_s1i5>:
  9a:	a4 00 90 00 68 00 68 00 09 00                       ....h.h...

000000a4 <m_s1i6>:
  a4:	ae 00 9a 00 68 00 68 00 0a 00                       ....h.h...

000000ae <m_s1i7>:
  ae:	68 00 a4 00 68 00 68 00 0b 00                       h...h.h...

000000b8 <m_s2i1>:
  b8:	68 00 68 00 72 00 68 00 05 00                       h.h.r.h...

000000c2 <m_s3i1>:
  c2:	68 00 68 00 7c 00 68 00 06 00                       h.h.|.h...

000000cc <m_s4i1>:
  cc:	68 00 68 00 86 00 68 00 07 00                       h.h...h...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf ef       	ldi	r28, 0xFF	; 255
  dc:	d4 e0       	ldi	r29, 0x04	; 4
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	e6 e8       	ldi	r30, 0x86	; 134
  ea:	fc e0       	ldi	r31, 0x0C	; 12
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a2 30       	cpi	r26, 0x02	; 2
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	11 e0       	ldi	r17, 0x01	; 1
  fa:	a2 e0       	ldi	r26, 0x02	; 2
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 33       	cpi	r26, 0x3B	; 59
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 8a 02 	call	0x514	; 0x514 <main>
 10c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
 114:	88 b1       	in	r24, 0x08	; 8
 116:	80 63       	ori	r24, 0x30	; 48
 118:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	8f 7c       	andi	r24, 0xCF	; 207
 11e:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
 126:	10 92 b9 00 	sts	0x00B9, r1
}
 12a:	08 95       	ret

0000012c <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 12c:	94 ea       	ldi	r25, 0xA4	; 164
 12e:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 132:	90 91 bc 00 	lds	r25, 0x00BC
 136:	97 ff       	sbrs	r25, 7
 138:	fc cf       	rjmp	.-8      	; 0x132 <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 13a:	90 91 b9 00 	lds	r25, 0x00B9
 13e:	98 7f       	andi	r25, 0xF8	; 248
 140:	98 30       	cpi	r25, 0x08	; 8
 142:	39 f5       	brne	.+78     	; 0x192 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 144:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 14e:	80 91 bc 00 	lds	r24, 0x00BC
 152:	87 ff       	sbrs	r24, 7
 154:	fc cf       	rjmp	.-8      	; 0x14e <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 156:	80 91 b9 00 	lds	r24, 0x00B9
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 31       	cpi	r24, 0x18	; 24
 15e:	c9 f4       	brne	.+50     	; 0x192 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 160:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 16a:	80 91 bc 00 	lds	r24, 0x00BC
 16e:	87 ff       	sbrs	r24, 7
 170:	fc cf       	rjmp	.-8      	; 0x16a <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 172:	80 91 b9 00 	lds	r24, 0x00B9
 176:	88 7f       	andi	r24, 0xF8	; 248
 178:	88 32       	cpi	r24, 0x28	; 40
 17a:	59 f4       	brne	.+22     	; 0x192 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 17c:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 180:	84 e8       	ldi	r24, 0x84	; 132
 182:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 186:	80 91 bc 00 	lds	r24, 0x00BC
 18a:	87 ff       	sbrs	r24, 7
 18c:	fc cf       	rjmp	.-8      	; 0x186 <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 18e:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	80 93 bc 00 	sts	0x00BC, r24
 198:	08 95       	ret

0000019a <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 19a:	94 ea       	ldi	r25, 0xA4	; 164
 19c:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1a0:	90 91 bc 00 	lds	r25, 0x00BC
 1a4:	97 ff       	sbrs	r25, 7
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 1a8:	90 91 b9 00 	lds	r25, 0x00B9
 1ac:	98 7f       	andi	r25, 0xF8	; 248
 1ae:	98 30       	cpi	r25, 0x08	; 8
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <I2C_Read+0x1a>
 1b2:	43 c0       	rjmp	.+134    	; 0x23a <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 1b4:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1b8:	94 e8       	ldi	r25, 0x84	; 132
 1ba:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1be:	90 91 bc 00 	lds	r25, 0x00BC
 1c2:	97 ff       	sbrs	r25, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 1c6:	90 91 b9 00 	lds	r25, 0x00B9
 1ca:	98 7f       	andi	r25, 0xF8	; 248
 1cc:	98 31       	cpi	r25, 0x18	; 24
 1ce:	a9 f5       	brne	.+106    	; 0x23a <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 1d0:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1d4:	94 e8       	ldi	r25, 0x84	; 132
 1d6:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1da:	90 91 bc 00 	lds	r25, 0x00BC
 1de:	97 ff       	sbrs	r25, 7
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1e2:	90 91 b9 00 	lds	r25, 0x00B9
 1e6:	98 7f       	andi	r25, 0xF8	; 248
 1e8:	98 32       	cpi	r25, 0x28	; 40
 1ea:	39 f5       	brne	.+78     	; 0x23a <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1ec:	94 ea       	ldi	r25, 0xA4	; 164
 1ee:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1f2:	90 91 bc 00 	lds	r25, 0x00BC
 1f6:	97 ff       	sbrs	r25, 7
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1fa:	90 91 b9 00 	lds	r25, 0x00B9
 1fe:	98 7f       	andi	r25, 0xF8	; 248
 200:	90 31       	cpi	r25, 0x10	; 16
 202:	d9 f4       	brne	.+54     	; 0x23a <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 20a:	84 e8       	ldi	r24, 0x84	; 132
 20c:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 210:	80 91 bc 00 	lds	r24, 0x00BC
 214:	87 ff       	sbrs	r24, 7
 216:	fc cf       	rjmp	.-8      	; 0x210 <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 218:	80 91 b9 00 	lds	r24, 0x00B9
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	80 34       	cpi	r24, 0x40	; 64
 220:	61 f4       	brne	.+24     	; 0x23a <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 222:	84 e8       	ldi	r24, 0x84	; 132
 224:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 228:	80 91 bc 00 	lds	r24, 0x00BC
 22c:	87 ff       	sbrs	r24, 7
 22e:	fc cf       	rjmp	.-8      	; 0x228 <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 230:	80 91 b9 00 	lds	r24, 0x00B9
 234:	88 7f       	andi	r24, 0xF8	; 248
 236:	88 35       	cpi	r24, 0x58	; 88
 238:	29 f0       	breq	.+10     	; 0x244 <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 23a:	84 e9       	ldi	r24, 0x94	; 148
 23c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	08 95       	ret
		
	}
	reg=TWDR;
 244:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 248:	94 e9       	ldi	r25, 0x94	; 148
 24a:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 24e:	08 95       	ret

00000250 <I2C_Read_Buf>:
//-----------------------------------------------------------
void 	I2C_Read_Buf(uint8_t address_mem, uint8_t* data, uint8_t data_len)
{
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	df 93       	push	r29
 25a:	cf 93       	push	r28
 25c:	0f 92       	push	r0
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	18 2f       	mov	r17, r24
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 264:	7b 01       	movw	r14, r22
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	11 c0       	rjmp	.+34     	; 0x28c <I2C_Read_Buf+0x3c>
	{
		data[i]=I2C_Read(TMR_ADDR,address_mem+i);
 26a:	60 2f       	mov	r22, r16
 26c:	61 0f       	add	r22, r17
 26e:	80 ed       	ldi	r24, 0xD0	; 208
 270:	49 83       	std	Y+1, r20	; 0x01
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 276:	f7 01       	movw	r30, r14
 278:	81 93       	st	Z+, r24
 27a:	7f 01       	movw	r14, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	87 ec       	ldi	r24, 0xC7	; 199
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <I2C_Read_Buf+0x30>
 284:	00 c0       	rjmp	.+0      	; 0x286 <I2C_Read_Buf+0x36>
 286:	00 00       	nop
//-----------------------------------------------------------
void 	I2C_Read_Buf(uint8_t address_mem, uint8_t* data, uint8_t data_len)
{
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 288:	0f 5f       	subi	r16, 0xFF	; 255
 28a:	49 81       	ldd	r20, Y+1	; 0x01
 28c:	04 17       	cp	r16, r20
 28e:	68 f3       	brcs	.-38     	; 0x26a <I2C_Read_Buf+0x1a>
	{
		data[i]=I2C_Read(TMR_ADDR,address_mem+i);
		_delay_us(100);
	}
}
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <I2C_Write_Buf>:

void 	I2C_Write_Buf(uint8_t address_mem, uint8_t* data, uint8_t data_len)
{
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	18 2f       	mov	r17, r24
 2b0:	f4 2e       	mov	r15, r20
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 2b2:	c6 2e       	mov	r12, r22
 2b4:	e6 01       	movw	r28, r12
 2b6:	6e 01       	movw	r12, r28
 2b8:	d7 2e       	mov	r13, r23
 2ba:	e6 01       	movw	r28, r12
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	0d c0       	rjmp	.+26     	; 0x2da <I2C_Write_Buf+0x3a>
	{
		I2C_Write(TMR_ADDR,address_mem+i,data[i]);
 2c0:	49 91       	ld	r20, Y+
 2c2:	60 2f       	mov	r22, r16
 2c4:	61 0f       	add	r22, r17
 2c6:	80 ed       	ldi	r24, 0xD0	; 208
 2c8:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 2cc:	87 ec       	ldi	r24, 0xC7	; 199
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <I2C_Write_Buf+0x30>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <I2C_Write_Buf+0x36>
 2d6:	00 00       	nop

void 	I2C_Write_Buf(uint8_t address_mem, uint8_t* data, uint8_t data_len)
{
	uint8_t i=0;

	for(i=0;i<data_len;i++)
 2d8:	0f 5f       	subi	r16, 0xFF	; 255
 2da:	0f 15       	cp	r16, r15
 2dc:	88 f3       	brcs	.-30     	; 0x2c0 <I2C_Write_Buf+0x20>
	{
		I2C_Write(TMR_ADDR,address_mem+i,data[i]);
		_delay_us(100);
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	08 95       	ret

000002ee <I2C_ReadTime>:
//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 2f4:	80 ed       	ldi	r24, 0xD0	; 208
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 2fc:	88 83       	st	Y, r24
 2fe:	87 ec       	ldi	r24, 0xC7	; 199
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <I2C_ReadTime+0x14>
 306:	00 c0       	rjmp	.+0      	; 0x308 <I2C_ReadTime+0x1a>
 308:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 30a:	80 ed       	ldi	r24, 0xD0	; 208
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	87 ec       	ldi	r24, 0xC7	; 199
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <I2C_ReadTime+0x2a>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <I2C_ReadTime+0x30>
 31e:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 320:	80 ed       	ldi	r24, 0xD0	; 208
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 328:	8a 83       	std	Y+2, r24	; 0x02
 32a:	87 ec       	ldi	r24, 0xC7	; 199
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <I2C_ReadTime+0x40>
 332:	00 c0       	rjmp	.+0      	; 0x334 <I2C_ReadTime+0x46>
 334:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 336:	80 ed       	ldi	r24, 0xD0	; 208
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 33e:	8b 83       	std	Y+3, r24	; 0x03
 340:	87 ec       	ldi	r24, 0xC7	; 199
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <I2C_ReadTime+0x56>
 348:	00 c0       	rjmp	.+0      	; 0x34a <I2C_ReadTime+0x5c>
 34a:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 34c:	80 ed       	ldi	r24, 0xD0	; 208
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 354:	8c 83       	std	Y+4, r24	; 0x04
 356:	87 ec       	ldi	r24, 0xC7	; 199
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <I2C_ReadTime+0x6c>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <I2C_ReadTime+0x72>
 360:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 362:	80 ed       	ldi	r24, 0xD0	; 208
 364:	65 e0       	ldi	r22, 0x05	; 5
 366:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 36a:	8d 83       	std	Y+5, r24	; 0x05
 36c:	87 ec       	ldi	r24, 0xC7	; 199
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <I2C_ReadTime+0x82>
 374:	00 c0       	rjmp	.+0      	; 0x376 <I2C_ReadTime+0x88>
 376:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 378:	80 ed       	ldi	r24, 0xD0	; 208
 37a:	66 e0       	ldi	r22, 0x06	; 6
 37c:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 380:	8e 83       	std	Y+6, r24	; 0x06
 382:	87 ec       	ldi	r24, 0xC7	; 199
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <I2C_ReadTime+0x98>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <I2C_ReadTime+0x9e>
 38c:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 38e:	80 ed       	ldi	r24, 0xD0	; 208
 390:	67 e0       	ldi	r22, 0x07	; 7
 392:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 396:	8f 83       	std	Y+7, r24	; 0x07
 398:	87 ec       	ldi	r24, 0xC7	; 199
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <I2C_ReadTime+0xae>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <I2C_ReadTime+0xb4>
 3a2:	00 00       	nop
	_delay_us(100);
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 3aa:	80 ed       	ldi	r24, 0xD0	; 208
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Read>
 3b2:	ef ec       	ldi	r30, 0xCF	; 207
 3b4:	f7 e0       	ldi	r31, 0x07	; 7
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <I2C_DS1307Init+0xc>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <I2C_DS1307Init+0x12>
 3bc:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 3be:	87 ff       	sbrs	r24, 7
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 3c2:	80 ed       	ldi	r24, 0xD0	; 208
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	42 e1       	ldi	r20, 0x12	; 18
 3c8:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3cc:	87 ec       	ldi	r24, 0xC7	; 199
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <I2C_DS1307Init+0x26>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <I2C_DS1307Init+0x2c>
 3d6:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 3d8:	80 ed       	ldi	r24, 0xD0	; 208
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3e2:	e7 ec       	ldi	r30, 0xC7	; 199
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <I2C_DS1307Init+0x3c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <I2C_DS1307Init+0x42>
 3ec:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 3ee:	80 ed       	ldi	r24, 0xD0	; 208
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 3f8:	87 ec       	ldi	r24, 0xC7	; 199
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <I2C_DS1307Init+0x52>
 400:	00 c0       	rjmp	.+0      	; 0x402 <I2C_DS1307Init+0x58>
 402:	00 00       	nop
 404:	08 95       	ret

00000406 <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 40c:	80 ed       	ldi	r24, 0xD0	; 208
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	4a 81       	ldd	r20, Y+2	; 0x02
 412:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 416:	87 ec       	ldi	r24, 0xC7	; 199
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <I2C_StoreTime+0x14>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <I2C_StoreTime+0x1a>
 420:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 422:	80 ed       	ldi	r24, 0xD0	; 208
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	49 81       	ldd	r20, Y+1	; 0x01
 428:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 42c:	87 ec       	ldi	r24, 0xC7	; 199
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <I2C_StoreTime+0x2a>
 434:	00 c0       	rjmp	.+0      	; 0x436 <I2C_StoreTime+0x30>
 436:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 438:	80 ed       	ldi	r24, 0xD0	; 208
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 442:	87 ec       	ldi	r24, 0xC7	; 199
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <I2C_StoreTime+0x40>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <I2C_StoreTime+0x46>
 44c:	00 00       	nop
	_delay_us(100);
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 45a:	80 ed       	ldi	r24, 0xD0	; 208
 45c:	65 e0       	ldi	r22, 0x05	; 5
 45e:	4d 81       	ldd	r20, Y+5	; 0x05
 460:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 464:	87 ec       	ldi	r24, 0xC7	; 199
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <I2C_StoreDate+0x14>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <I2C_StoreDate+0x1a>
 46e:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 470:	80 ed       	ldi	r24, 0xD0	; 208
 472:	64 e0       	ldi	r22, 0x04	; 4
 474:	4c 81       	ldd	r20, Y+4	; 0x04
 476:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 47a:	87 ec       	ldi	r24, 0xC7	; 199
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <I2C_StoreDate+0x2a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <I2C_StoreDate+0x30>
 484:	00 00       	nop
	_delay_us(100);	
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 48c:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 48e:	80 ed       	ldi	r24, 0xD0	; 208
 490:	66 e0       	ldi	r22, 0x06	; 6
 492:	46 81       	ldd	r20, Z+6	; 0x06
 494:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Write>
 498:	87 ec       	ldi	r24, 0xC7	; 199
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <I2C_StoreYear+0x10>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <I2C_StoreYear+0x16>
 4a2:	00 00       	nop
	_delay_us(100);
}
 4a4:	08 95       	ret

000004a6 <KBD_ReadPins>:

static uint8_t lastKEY=KEY_CODE_NONE, previousKEY=KEY_CODE_NONE;

uint8_t KBD_ReadPins(void)
{
	uint8_t key=0;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	48 99       	sbic	0x09, 0	; 9
 4aa:	80 e0       	ldi	r24, 0x00	; 0
	if((KBD_PIN & _BV(KBD_PIN_A))==0)
	{
		key|=(1<<0);
	}
	
	if((KBD_PIN & _BV(KBD_PIN_B))==0)
 4ac:	49 9b       	sbis	0x09, 1	; 9
	{
		key|=(1<<1);
 4ae:	82 60       	ori	r24, 0x02	; 2
	}
	
	if((KBD_PIN & _BV(KBD_PIN_C))==0)
 4b0:	4a 9b       	sbis	0x09, 2	; 9
	{
		key|=(1<<2);
 4b2:	84 60       	ori	r24, 0x04	; 4
	}
	
	if((KBD_PIN & _BV(KBD_PIN_D))==0)
 4b4:	4b 9b       	sbis	0x09, 3	; 9
	{
		key|=(1<<3);
 4b6:	88 60       	ori	r24, 0x08	; 8
	}	
	
	return key;	
}
 4b8:	08 95       	ret

000004ba <KBD_ReadKey>:

enKey KBD_ReadKey(void) 
{
 4ba:	1f 93       	push	r17
	lastKEY=KBD_ReadPins();
 4bc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KBD_ReadPins>
 4c0:	80 93 02 01 	sts	0x0102, r24

	if(lastKEY!=KEY_CODE_NONE)
 4c4:	88 23       	and	r24, r24
 4c6:	c9 f0       	breq	.+50     	; 0x4fa <KBD_ReadKey+0x40>
	{
		if(lastKEY!=previousKEY)
 4c8:	90 91 03 01 	lds	r25, 0x0103
 4cc:	89 17       	cp	r24, r25
 4ce:	b9 f0       	breq	.+46     	; 0x4fe <KBD_ReadKey+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	30 e7       	ldi	r19, 0x70	; 112
 4d4:	42 e0       	ldi	r20, 0x02	; 2
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	30 40       	sbci	r19, 0x00	; 0
 4da:	40 40       	sbci	r20, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <KBD_ReadKey+0x1c>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <KBD_ReadKey+0x26>
 4e0:	00 00       	nop
		{
			_delay_ms(100);
			if((lastKEY!=KEY_CODE_NONE) && (lastKEY==KBD_ReadPins()))
 4e2:	18 2f       	mov	r17, r24
 4e4:	88 23       	and	r24, r24
 4e6:	39 f0       	breq	.+14     	; 0x4f6 <KBD_ReadKey+0x3c>
 4e8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KBD_ReadPins>
 4ec:	18 17       	cp	r17, r24
 4ee:	19 f4       	brne	.+6      	; 0x4f6 <KBD_ReadKey+0x3c>
			{
				previousKEY=lastKEY;
 4f0:	10 93 03 01 	sts	0x0103, r17
				return lastKEY;
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <__stack+0x1>
			}
			else
			{	
				lastKEY		= KEY_CODE_NONE;
 4f6:	10 92 02 01 	sts	0x0102, r1
			return KEY_CODE_NONE;
		}
	}
	else
	{
		previousKEY = KEY_CODE_NONE;
 4fa:	10 92 03 01 	sts	0x0103, r1
				return KEY_CODE_NONE;	
			}
		}
		else
		{
			return KEY_CODE_NONE;
 4fe:	10 e0       	ldi	r17, 0x00	; 0
	{
		previousKEY = KEY_CODE_NONE;
		return KEY_CODE_NONE;
	}

}
 500:	81 2f       	mov	r24, r17
 502:	1f 91       	pop	r17
 504:	08 95       	ret

00000506 <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 506:	8b b1       	in	r24, 0x0b	; 11
 508:	8f 60       	ori	r24, 0x0F	; 15
 50a:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR  &= ~ KBD_MASK;
 50c:	8a b1       	in	r24, 0x0a	; 10
 50e:	80 7f       	andi	r24, 0xF0	; 240
 510:	8a b9       	out	0x0a, r24	; 10
}
 512:	08 95       	ret

00000514 <main>:
#include "clock.h"
#include <avr/wdt.h> 

int main(void)
{
	Clock_Init();
 514:	0e 94 05 03 	call	0x60a	; 0x60a <Clock_Init>
	wdt_enable(WDTO_1S);
 518:	2e e0       	ldi	r18, 0x0E	; 14
 51a:	88 e1       	ldi	r24, 0x18	; 24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	a8 95       	wdr
 524:	80 93 60 00 	sts	0x0060, r24
 528:	0f be       	out	0x3f, r0	; 63
 52a:	20 93 60 00 	sts	0x0060, r18
	sei();
 52e:	78 94       	sei

	while(1)
	{
		Clock_Cycle();
 530:	0e 94 4c 03 	call	0x698	; 0x698 <Clock_Cycle>
		wdt_reset();
 534:	a8 95       	wdr
 536:	fc cf       	rjmp	.-8      	; 0x530 <main+0x1c>

00000538 <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 538:	84 b1       	in	r24, 0x04	; 4
 53a:	8c 62       	ori	r24, 0x2C	; 44
 53c:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 53e:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 540:	80 e5       	ldi	r24, 0x50	; 80
 542:	8c bd       	out	0x2c, r24	; 44

   SPSR = (0<<SPI2X);
 544:	1d bc       	out	0x2d, r1	; 45
}
 546:	08 95       	ret

00000548 <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <LED_SPI_WriteWord+0x6>
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	9a 83       	std	Y+2, r25	; 0x02
 554:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 556:	fe 01       	movw	r30, r28
 558:	31 96       	adiw	r30, 0x01	; 1
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 55e:	0d b4       	in	r0, 0x2d	; 45
 560:	07 fe       	sbrs	r0, 7
 562:	fd cf       	rjmp	.-6      	; 0x55e <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 564:	80 81       	ld	r24, Z
 566:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 568:	0d b4       	in	r0, 0x2d	; 45
 56a:	07 fe       	sbrs	r0, 7
 56c:	fd cf       	rjmp	.-6      	; 0x568 <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 56e:	8a e1       	ldi	r24, 0x1A	; 26
 570:	8a 95       	dec	r24
 572:	f1 f7       	brne	.-4      	; 0x570 <LED_SPI_WriteWord+0x28>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 576:	2a 9a       	sbi	0x05, 2	; 5
 578:	8a e1       	ldi	r24, 0x1A	; 26
 57a:	8a 95       	dec	r24
 57c:	f1 f7       	brne	.-4      	; 0x57a <LED_SPI_WriteWord+0x32>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 580:	2a 98       	cbi	0x05, 2	; 5
 582:	8a e1       	ldi	r24, 0x1A	; 26
 584:	8a 95       	dec	r24
 586:	f1 f7       	brne	.-4      	; 0x584 <LED_SPI_WriteWord+0x3c>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	cf 91       	pop	r28
 590:	df 91       	pop	r29
 592:	08 95       	ret

00000594 <LED_Out>:
#include "led_display.h"


//--------------------------------------------------------------------------------
void LED_Out(stClock *clock, uint8_t out_buf_len)//вывод буфера в SPI bit-bang
{
 594:	df 92       	push	r13
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ec 01       	movw	r28, r24
 5a4:	d6 2e       	mov	r13, r22
	uint8_t i;

	clock->display_buf[0]=(0xA00|clock->brightnessCurrent|0x01);
 5a6:	8e 85       	ldd	r24, Y+14	; 0x0e
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	9a 60       	ori	r25, 0x0A	; 10
 5ae:	98 8b       	std	Y+16, r25	; 0x10
 5b0:	8f 87       	std	Y+15, r24	; 0x0f
 5b2:	7e 01       	movw	r14, r28

	for(i=0;i<out_buf_len;i++)
 5b4:	00 e0       	ldi	r16, 0x00	; 0
 5b6:	10 e0       	ldi	r17, 0x00	; 0
 5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <LED_Out+0x60>
	{
		if(i>=5)
 5ba:	85 30       	cpi	r24, 0x05	; 5
 5bc:	80 f0       	brcs	.+32     	; 0x5de <LED_Out+0x4a>
		{
			if(clock->display_mask&(1<<(i-5)))
 5be:	2f a5       	ldd	r18, Y+47	; 0x2f
 5c0:	30 e0       	ldi	r19, 0x00	; 0
#include "led_display.h"


//--------------------------------------------------------------------------------
void LED_Out(stClock *clock, uint8_t out_buf_len)//вывод буфера в SPI bit-bang
 5c2:	c8 01       	movw	r24, r16
 5c4:	05 97       	sbiw	r24, 0x05	; 5

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(clock->display_mask&(1<<(i-5)))
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <LED_Out+0x38>
 5c8:	35 95       	asr	r19
 5ca:	27 95       	ror	r18
 5cc:	8a 95       	dec	r24
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <LED_Out+0x34>
 5d0:	f7 01       	movw	r30, r14
 5d2:	87 85       	ldd	r24, Z+15	; 0x0f
 5d4:	90 89       	ldd	r25, Z+16	; 0x10
 5d6:	20 fd       	sbrc	r18, 0
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <LED_Out+0x50>
			{
				LED_SPI_WriteWord(clock->display_buf[i]);
			}
			else
			{
				LED_SPI_WriteWord(clock->display_buf[i]|0xF);
 5da:	8f 60       	ori	r24, 0x0F	; 15
 5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <LED_Out+0x50>
			}
		}
		else
		{
			LED_SPI_WriteWord(clock->display_buf[i]);
 5de:	f7 01       	movw	r30, r14
 5e0:	87 85       	ldd	r24, Z+15	; 0x0f
 5e2:	90 89       	ldd	r25, Z+16	; 0x10
 5e4:	0e 94 a4 02 	call	0x548	; 0x548 <LED_SPI_WriteWord>
 5e8:	0f 5f       	subi	r16, 0xFF	; 255
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	e8 0e       	add	r14, r24
 5f2:	f9 1e       	adc	r15, r25
 5f4:	80 2f       	mov	r24, r16
{
	uint8_t i;

	clock->display_buf[0]=(0xA00|clock->brightnessCurrent|0x01);

	for(i=0;i<out_buf_len;i++)
 5f6:	0d 15       	cp	r16, r13
 5f8:	00 f3       	brcs	.-64     	; 0x5ba <LED_Out+0x26>
			LED_SPI_WriteWord(clock->display_buf[i]);
		}
	}

	return;	
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	df 90       	pop	r13
 608:	08 95       	ret

0000060a <Clock_Init>:

stClock clock;

void Clock_Init(void)
{
	Menu_Init();
 60a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Menu_Init>
	I2C_Init();
 60e:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 612:	89 e0       	ldi	r24, 0x09	; 9
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_DS1307Init>
	KBD_Init();
 61a:	0e 94 83 02 	call	0x506	; 0x506 <KBD_Init>
	LED_SPI_Init();
 61e:	0e 94 9c 02 	call	0x538	; 0x538 <LED_SPI_Init>

	I2C_Read_Buf(ADDR_BRIGHTNESS_DAY, 	(uint8_t*)&clock.brightnessDay, sizeof(stBrightness));
 622:	88 e0       	ldi	r24, 0x08	; 8
 624:	61 e1       	ldi	r22, 0x11	; 17
 626:	71 e0       	ldi	r23, 0x01	; 1
 628:	43 e0       	ldi	r20, 0x03	; 3
 62a:	0e 94 28 01 	call	0x250	; 0x250 <I2C_Read_Buf>
	I2C_Read_Buf(ADDR_BRIGHTNESS_NIGHT, (uint8_t*)&clock.brightnessNight, sizeof(stBrightness));
 62e:	80 e1       	ldi	r24, 0x10	; 16
 630:	64 e1       	ldi	r22, 0x14	; 20
 632:	71 e0       	ldi	r23, 0x01	; 1
 634:	43 e0       	ldi	r20, 0x03	; 3
 636:	0e 94 28 01 	call	0x250	; 0x250 <I2C_Read_Buf>
	
	if((clock.brightnessDay.hour<MIN_NIGHT_TO_DAY_HOUR) | (clock.brightnessDay.hour>MAX_NIGHT_TO_DAY_HOUR))
 63a:	80 91 11 01 	lds	r24, 0x0111
 63e:	81 50       	subi	r24, 0x01	; 1
 640:	81 31       	cpi	r24, 0x11	; 17
 642:	18 f0       	brcs	.+6      	; 0x64a <Clock_Init+0x40>
	{
		clock.brightnessDay.hour=MAX_NIGHT_TO_DAY_HOUR;
 644:	81 e1       	ldi	r24, 0x11	; 17
 646:	80 93 11 01 	sts	0x0111, r24
	}

	if((clock.brightnessNight.hour<MIN_DAY_TO_NIGHT_HOUR) | (clock.brightnessNight.hour>MAX_DAY_TO_NIGHT_HOUR))
 64a:	80 91 14 01 	lds	r24, 0x0114
 64e:	82 51       	subi	r24, 0x12	; 18
 650:	82 31       	cpi	r24, 0x12	; 18
 652:	18 f0       	brcs	.+6      	; 0x65a <Clock_Init+0x50>
	{
		clock.brightnessNight.hour=MAX_DAY_TO_NIGHT_HOUR;
 654:	83 e2       	ldi	r24, 0x23	; 35
 656:	80 93 14 01 	sts	0x0114, r24
	}


	clock.display_buf[0]=0xA0F;
 65a:	8f e0       	ldi	r24, 0x0F	; 15
 65c:	9a e0       	ldi	r25, 0x0A	; 10
 65e:	90 93 19 01 	sts	0x0119, r25
 662:	80 93 18 01 	sts	0x0118, r24
	clock.display_buf[1]=0x9FF;
 666:	8f ef       	ldi	r24, 0xFF	; 255
 668:	99 e0       	ldi	r25, 0x09	; 9
 66a:	90 93 1b 01 	sts	0x011B, r25
 66e:	80 93 1a 01 	sts	0x011A, r24
	clock.display_buf[2]=0xB05;
 672:	85 e0       	ldi	r24, 0x05	; 5
 674:	9b e0       	ldi	r25, 0x0B	; 11
 676:	90 93 1d 01 	sts	0x011D, r25
 67a:	80 93 1c 01 	sts	0x011C, r24
	clock.display_buf[3]=0xC01;		
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	9c e0       	ldi	r25, 0x0C	; 12
 682:	90 93 1f 01 	sts	0x011F, r25
 686:	80 93 1e 01 	sts	0x011E, r24
	clock.display_buf[4]=0xF00;
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	9f e0       	ldi	r25, 0x0F	; 15
 68e:	90 93 21 01 	sts	0x0121, r25
 692:	80 93 20 01 	sts	0x0120, r24
/*	clock.display_buf[5]=0x101;
	clock.display_buf[6]=0x202;
	clock.display_buf[7]=0x303;
	clock.display_buf[8]=0x404;
	clock.display_buf[9]=0x505;*/
}
 696:	08 95       	ret

00000698 <Clock_Cycle>:

void Clock_Cycle(void)
{
	static uint16_t dispCounter=0;

	Menu_Key(KBD_ReadKey(), &clock);
 698:	0e 94 5d 02 	call	0x4ba	; 0x4ba <KBD_ReadKey>
 69c:	69 e0       	ldi	r22, 0x09	; 9
 69e:	71 e0       	ldi	r23, 0x01	; 1
 6a0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Menu_Key>

	if(dispCounter==DISP_COUNTER)
 6a4:	80 91 04 01 	lds	r24, 0x0104
 6a8:	90 91 05 01 	lds	r25, 0x0105
 6ac:	23 e0       	ldi	r18, 0x03	; 3
 6ae:	88 3e       	cpi	r24, 0xE8	; 232
 6b0:	92 07       	cpc	r25, r18
 6b2:	71 f4       	brne	.+28     	; 0x6d0 <Clock_Cycle+0x38>
	{
		dispCounter=0;
 6b4:	10 92 05 01 	sts	0x0105, r1
 6b8:	10 92 04 01 	sts	0x0104, r1
		Menu_Display(&clock);
 6bc:	89 e0       	ldi	r24, 0x09	; 9
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	0e 94 77 03 	call	0x6ee	; 0x6ee <Menu_Display>
		LED_Out(&clock, LED_BUF_LEN);
 6c4:	89 e0       	ldi	r24, 0x09	; 9
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	6a e0       	ldi	r22, 0x0A	; 10
 6ca:	0e 94 ca 02 	call	0x594	; 0x594 <LED_Out>
 6ce:	08 95       	ret
	}
	else
	{
		dispCounter++;
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	90 93 05 01 	sts	0x0105, r25
 6d6:	80 93 04 01 	sts	0x0104, r24
 6da:	08 95       	ret

000006dc <Menu_Change>:
MAKE_MENU(m_s4i1,  NULL_ENTRY,NULL_ENTRY,  m_s1i3,     NULL_ENTRY,   MENU_TUNE_YEAR, 		"");


void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	88 36       	cpi	r24, 0x68	; 104
 6e0:	92 07       	cpc	r25, r18
 6e2:	21 f0       	breq	.+8      	; 0x6ec <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 6e4:	90 93 3a 01 	sts	0x013A, r25
 6e8:	80 93 39 01 	sts	0x0139, r24
 6ec:	08 95       	ret

000006ee <Menu_Display>:
}

#define BLINK_CONST		30
//------------------------------------
void Menu_Display(stClock *clock) 
{
 6ee:	ef 92       	push	r14
 6f0:	ff 92       	push	r15
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	ec 01       	movw	r28, r24
	static uint8_t blink_mask=0xFF;
	static uint16_t blink_counter=0;
	
	if(blink_counter<BLINK_CONST)
 6f8:	80 91 06 01 	lds	r24, 0x0106
 6fc:	90 91 07 01 	lds	r25, 0x0107
 700:	8e 31       	cpi	r24, 0x1E	; 30
 702:	91 05       	cpc	r25, r1
 704:	30 f4       	brcc	.+12     	; 0x712 <Menu_Display+0x24>
	{
		blink_counter++;
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	90 93 07 01 	sts	0x0107, r25
 70c:	80 93 06 01 	sts	0x0106, r24
 710:	09 c0       	rjmp	.+18     	; 0x724 <Menu_Display+0x36>
	}	
	else
	{
		blink_counter=0;
 712:	10 92 07 01 	sts	0x0107, r1
 716:	10 92 06 01 	sts	0x0106, r1
		blink_mask=~blink_mask;
 71a:	80 91 00 01 	lds	r24, 0x0100
 71e:	80 95       	com	r24
 720:	80 93 00 01 	sts	0x0100, r24
	}


	switch(SELECT)
 724:	e0 91 39 01 	lds	r30, 0x0139
 728:	f0 91 3a 01 	lds	r31, 0x013A
 72c:	38 96       	adiw	r30, 0x08	; 8
 72e:	e4 91       	lpm	r30, Z+
 730:	e6 30       	cpi	r30, 0x06	; 6
 732:	09 f4       	brne	.+2      	; 0x736 <Menu_Display+0x48>
 734:	4b c0       	rjmp	.+150    	; 0x7cc <Menu_Display+0xde>
 736:	e7 30       	cpi	r30, 0x07	; 7
 738:	70 f4       	brcc	.+28     	; 0x756 <Menu_Display+0x68>
 73a:	e3 30       	cpi	r30, 0x03	; 3
 73c:	49 f1       	breq	.+82     	; 0x790 <Menu_Display+0xa2>
 73e:	e4 30       	cpi	r30, 0x04	; 4
 740:	20 f4       	brcc	.+8      	; 0x74a <Menu_Display+0x5c>
 742:	e2 30       	cpi	r30, 0x02	; 2
 744:	09 f0       	breq	.+2      	; 0x748 <Menu_Display+0x5a>
 746:	45 c0       	rjmp	.+138    	; 0x7d2 <Menu_Display+0xe4>
 748:	14 c0       	rjmp	.+40     	; 0x772 <Menu_Display+0x84>
 74a:	e4 30       	cpi	r30, 0x04	; 4
 74c:	81 f1       	breq	.+96     	; 0x7ae <Menu_Display+0xc0>
 74e:	e5 30       	cpi	r30, 0x05	; 5
 750:	09 f0       	breq	.+2      	; 0x754 <Menu_Display+0x66>
 752:	3f c0       	rjmp	.+126    	; 0x7d2 <Menu_Display+0xe4>
 754:	3b c0       	rjmp	.+118    	; 0x7cc <Menu_Display+0xde>
 756:	e9 30       	cpi	r30, 0x09	; 9
 758:	c9 f1       	breq	.+114    	; 0x7cc <Menu_Display+0xde>
 75a:	ea 30       	cpi	r30, 0x0A	; 10
 75c:	28 f4       	brcc	.+10     	; 0x768 <Menu_Display+0x7a>
 75e:	e7 30       	cpi	r30, 0x07	; 7
 760:	a9 f1       	breq	.+106    	; 0x7cc <Menu_Display+0xde>
 762:	e8 30       	cpi	r30, 0x08	; 8
 764:	b1 f5       	brne	.+108    	; 0x7d2 <Menu_Display+0xe4>
 766:	32 c0       	rjmp	.+100    	; 0x7cc <Menu_Display+0xde>
 768:	ea 30       	cpi	r30, 0x0A	; 10
 76a:	81 f1       	breq	.+96     	; 0x7cc <Menu_Display+0xde>
 76c:	eb 30       	cpi	r30, 0x0B	; 11
 76e:	89 f5       	brne	.+98     	; 0x7d2 <Menu_Display+0xe4>
 770:	2d c0       	rjmp	.+90     	; 0x7cc <Menu_Display+0xde>
	{
		case MENU_TIME:
		{
			I2C_ReadTime(&clock->DS1307Time);
 772:	ce 01       	movw	r24, r28
 774:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_ReadTime>
			clock->display_mask=0xFF;
 778:	8f ef       	ldi	r24, 0xFF	; 255
 77a:	8f a7       	std	Y+47, r24	; 0x2f
			Determine_Current_Brightness(clock);
 77c:	ce 01       	movw	r24, r28
 77e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Determine_Current_Brightness>
			Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 782:	be 01       	movw	r22, r28
 784:	67 5e       	subi	r22, 0xE7	; 231
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	ce 01       	movw	r24, r28
 78a:	0e 94 46 05 	call	0xa8c	; 0xa8c <Time_To_Buf>
		}
		break;
 78e:	21 c0       	rjmp	.+66     	; 0x7d2 <Menu_Display+0xe4>
		
		case MENU_DATE:
		{
			I2C_ReadTime(&clock->DS1307Time);
 790:	ce 01       	movw	r24, r28
 792:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_ReadTime>
			clock->display_mask=0xFF;
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	8f a7       	std	Y+47, r24	; 0x2f
			Determine_Current_Brightness(clock);
 79a:	ce 01       	movw	r24, r28
 79c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Determine_Current_Brightness>
			Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 7a0:	be 01       	movw	r22, r28
 7a2:	67 5e       	subi	r22, 0xE7	; 231
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	ce 01       	movw	r24, r28
 7a8:	0e 94 72 05 	call	0xae4	; 0xae4 <Date_To_Buf>
		}
		break;
 7ac:	12 c0       	rjmp	.+36     	; 0x7d2 <Menu_Display+0xe4>

		case MENU_YEAR:
		{
			I2C_ReadTime(&clock->DS1307Time);
 7ae:	ce 01       	movw	r24, r28
 7b0:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_ReadTime>
			clock->display_mask=0xFF;
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	8f a7       	std	Y+47, r24	; 0x2f
			Determine_Current_Brightness(clock);
 7b8:	ce 01       	movw	r24, r28
 7ba:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Determine_Current_Brightness>
			Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 7be:	be 01       	movw	r22, r28
 7c0:	67 5e       	subi	r22, 0xE7	; 231
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	ce 01       	movw	r24, r28
 7c6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Year_To_Buf>
		}
		break;
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <Menu_Display+0xe4>
		}
		break;

		case MENU_TUNE_YEAR:
		{
			clock->display_mask=blink_mask;
 7cc:	80 91 00 01 	lds	r24, 0x0100
 7d0:	8f a7       	std	Y+47, r24	; 0x2f
		default:
		{
		}
		break;
	}
}
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	08 95       	ret

000007dc <Menu_Key>:

void Menu_Key(enKey key, stClock *clock) {
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	eb 01       	movw	r28, r22
	switch (key) 
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <Menu_Key+0xc>
 7e6:	30 c1       	rjmp	.+608    	; 0xa48 <Menu_Key+0x26c>
 7e8:	84 30       	cpi	r24, 0x04	; 4
 7ea:	30 f4       	brcc	.+12     	; 0x7f8 <Menu_Key+0x1c>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	59 f0       	breq	.+22     	; 0x806 <Menu_Key+0x2a>
 7f0:	82 30       	cpi	r24, 0x02	; 2
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <Menu_Key+0x1a>
 7f4:	41 c1       	rjmp	.+642    	; 0xa78 <Menu_Key+0x29c>
 7f6:	87 c0       	rjmp	.+270    	; 0x906 <Menu_Key+0x12a>
 7f8:	84 30       	cpi	r24, 0x04	; 4
 7fa:	09 f4       	brne	.+2      	; 0x7fe <Menu_Key+0x22>
 7fc:	dd c0       	rjmp	.+442    	; 0x9b8 <Menu_Key+0x1dc>
 7fe:	8c 30       	cpi	r24, 0x0C	; 12
 800:	09 f0       	breq	.+2      	; 0x804 <Menu_Key+0x28>
 802:	3a c1       	rjmp	.+628    	; 0xa78 <Menu_Key+0x29c>
 804:	2d c1       	rjmp	.+602    	; 0xa60 <Menu_Key+0x284>
		}
		break;
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 806:	80 91 39 01 	lds	r24, 0x0139
 80a:	90 91 3a 01 	lds	r25, 0x013A
 80e:	fc 01       	movw	r30, r24
 810:	38 96       	adiw	r30, 0x08	; 8
 812:	e4 91       	lpm	r30, Z+
 814:	e6 30       	cpi	r30, 0x06	; 6
 816:	79 f1       	breq	.+94     	; 0x876 <Menu_Key+0x9a>
 818:	e7 30       	cpi	r30, 0x07	; 7
 81a:	78 f4       	brcc	.+30     	; 0x83a <Menu_Key+0x5e>
 81c:	e3 30       	cpi	r30, 0x03	; 3
 81e:	19 f1       	breq	.+70     	; 0x866 <Menu_Key+0x8a>
 820:	e4 30       	cpi	r30, 0x04	; 4
 822:	20 f4       	brcc	.+8      	; 0x82c <Menu_Key+0x50>
 824:	e2 30       	cpi	r30, 0x02	; 2
 826:	09 f0       	breq	.+2      	; 0x82a <Menu_Key+0x4e>
 828:	27 c1       	rjmp	.+590    	; 0xa78 <Menu_Key+0x29c>
 82a:	19 c0       	rjmp	.+50     	; 0x85e <Menu_Key+0x82>
 82c:	e4 30       	cpi	r30, 0x04	; 4
 82e:	09 f4       	brne	.+2      	; 0x832 <Menu_Key+0x56>
 830:	67 c0       	rjmp	.+206    	; 0x900 <Menu_Key+0x124>
 832:	e5 30       	cpi	r30, 0x05	; 5
 834:	09 f0       	breq	.+2      	; 0x838 <Menu_Key+0x5c>
 836:	20 c1       	rjmp	.+576    	; 0xa78 <Menu_Key+0x29c>
 838:	1a c0       	rjmp	.+52     	; 0x86e <Menu_Key+0x92>
 83a:	e9 30       	cpi	r30, 0x09	; 9
 83c:	09 f4       	brne	.+2      	; 0x840 <Menu_Key+0x64>
 83e:	34 c0       	rjmp	.+104    	; 0x8a8 <Menu_Key+0xcc>
 840:	ea 30       	cpi	r30, 0x0A	; 10
 842:	30 f4       	brcc	.+12     	; 0x850 <Menu_Key+0x74>
 844:	e7 30       	cpi	r30, 0x07	; 7
 846:	e9 f0       	breq	.+58     	; 0x882 <Menu_Key+0xa6>
 848:	e8 30       	cpi	r30, 0x08	; 8
 84a:	09 f0       	breq	.+2      	; 0x84e <Menu_Key+0x72>
 84c:	15 c1       	rjmp	.+554    	; 0xa78 <Menu_Key+0x29c>
 84e:	1f c0       	rjmp	.+62     	; 0x88e <Menu_Key+0xb2>
 850:	ea 30       	cpi	r30, 0x0A	; 10
 852:	09 f4       	brne	.+2      	; 0x856 <Menu_Key+0x7a>
 854:	3f c0       	rjmp	.+126    	; 0x8d4 <Menu_Key+0xf8>
 856:	eb 30       	cpi	r30, 0x0B	; 11
 858:	09 f0       	breq	.+2      	; 0x85c <Menu_Key+0x80>
 85a:	0e c1       	rjmp	.+540    	; 0xa78 <Menu_Key+0x29c>
 85c:	48 c0       	rjmp	.+144    	; 0x8ee <Menu_Key+0x112>
			{
			//-----------------------------
				case MENU_TIME:
				{
					Menu_Change(NEXT);
 85e:	fc 01       	movw	r30, r24
 860:	25 91       	lpm	r18, Z+
 862:	34 91       	lpm	r19, Z+
 864:	fb c0       	rjmp	.+502    	; 0xa5c <Menu_Key+0x280>
				}
				break;

				case MENU_DATE:
				{
					Menu_Change(NEXT);
 866:	fc 01       	movw	r30, r24
 868:	25 91       	lpm	r18, Z+
 86a:	34 91       	lpm	r19, Z+
 86c:	f7 c0       	rjmp	.+494    	; 0xa5c <Menu_Key+0x280>
				}
				break;
			//------------------------------							
				case MENU_TUNE_TIME:
				{
					I2C_StoreTime(&clock->DS1307Time);
 86e:	cb 01       	movw	r24, r22
 870:	0e 94 03 02 	call	0x406	; 0x406 <I2C_StoreTime>
 874:	45 c0       	rjmp	.+138    	; 0x900 <Menu_Key+0x124>
				}
				break;

				case MENU_TUNE_DATE:
				{
					I2C_StoreDate(&clock->DS1307Time);
 876:	cb 01       	movw	r24, r22
 878:	0e 94 2a 02 	call	0x454	; 0x454 <I2C_StoreDate>
					Menu_Change(&m_s1i2);
 87c:	8c e7       	ldi	r24, 0x7C	; 124
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	f9 c0       	rjmp	.+498    	; 0xa74 <Menu_Key+0x298>
				}
				break;

				case MENU_TUNE_YEAR:
				{
					I2C_StoreYear(&clock->DS1307Time);
 882:	cb 01       	movw	r24, r22
 884:	0e 94 46 02 	call	0x48c	; 0x48c <I2C_StoreYear>
					Menu_Change(&m_s1i3);
 888:	86 e8       	ldi	r24, 0x86	; 134
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	f3 c0       	rjmp	.+486    	; 0xa74 <Menu_Key+0x298>
				}
				break;
			//--------------------------------
				case MENU_TUNE_BRIGHTNESS_DAY_VAL:
				{					
					Time_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 88e:	67 5e       	subi	r22, 0xE7	; 231
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	ce 01       	movw	r24, r28
 894:	08 96       	adiw	r24, 0x08	; 8
 896:	0e 94 c4 05 	call	0xb88	; 0xb88 <Time_Brightness_To_Buf>
					//Determine_Current_Brightness(clock);
					Menu_Change(NEXT);
 89a:	e0 91 39 01 	lds	r30, 0x0139
 89e:	f0 91 3a 01 	lds	r31, 0x013A
 8a2:	25 91       	lpm	r18, Z+
 8a4:	34 91       	lpm	r19, Z+
 8a6:	da c0       	rjmp	.+436    	; 0xa5c <Menu_Key+0x280>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_DAY_TIME:
				{					
					I2C_Write_Buf(ADDR_BRIGHTNESS_DAY, 	(uint8_t*)&clock->brightnessDay, sizeof(stBrightness));
 8a8:	68 5f       	subi	r22, 0xF8	; 248
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	88 e0       	ldi	r24, 0x08	; 8
 8ae:	43 e0       	ldi	r20, 0x03	; 3
 8b0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Write_Buf>
					Value_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 8b4:	be 01       	movw	r22, r28
 8b6:	67 5e       	subi	r22, 0xE7	; 231
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	ce 01       	movw	r24, r28
 8bc:	0b 96       	adiw	r24, 0x0b	; 11
 8be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Value_Brightness_To_Buf>
					clock->brightnessCurrent=clock->brightnessNight.brightness;
 8c2:	8d 85       	ldd	r24, Y+13	; 0x0d
 8c4:	8e 87       	std	Y+14, r24	; 0x0e
					Menu_Change(NEXT);
 8c6:	e0 91 39 01 	lds	r30, 0x0139
 8ca:	f0 91 3a 01 	lds	r31, 0x013A
 8ce:	25 91       	lpm	r18, Z+
 8d0:	34 91       	lpm	r19, Z+
 8d2:	c4 c0       	rjmp	.+392    	; 0xa5c <Menu_Key+0x280>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_VAL:
				{				
					Time_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 8d4:	67 5e       	subi	r22, 0xE7	; 231
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	ce 01       	movw	r24, r28
 8da:	0b 96       	adiw	r24, 0x0b	; 11
 8dc:	0e 94 c4 05 	call	0xb88	; 0xb88 <Time_Brightness_To_Buf>
					//Determine_Current_Brightness(clock);
					Menu_Change(NEXT);
 8e0:	e0 91 39 01 	lds	r30, 0x0139
 8e4:	f0 91 3a 01 	lds	r31, 0x013A
 8e8:	25 91       	lpm	r18, Z+
 8ea:	34 91       	lpm	r19, Z+
 8ec:	b7 c0       	rjmp	.+366    	; 0xa5c <Menu_Key+0x280>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_TIME:
				{
					I2C_Write_Buf(ADDR_BRIGHTNESS_NIGHT, 	(uint8_t*)&clock->brightnessNight, sizeof(stBrightness));
 8ee:	65 5f       	subi	r22, 0xF5	; 245
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	80 e1       	ldi	r24, 0x10	; 16
 8f4:	43 e0       	ldi	r20, 0x03	; 3
 8f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Write_Buf>
					Determine_Current_Brightness(clock);
 8fa:	ce 01       	movw	r24, r28
 8fc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Determine_Current_Brightness>
					Menu_Change(&m_s1i1);
 900:	82 e7       	ldi	r24, 0x72	; 114
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	b7 c0       	rjmp	.+366    	; 0xa74 <Menu_Key+0x298>
		break;

		//------------------------
		case KEY_CODE_B: 
		{
			switch(SELECT)//пункт меню
 906:	e0 91 39 01 	lds	r30, 0x0139
 90a:	f0 91 3a 01 	lds	r31, 0x013A
 90e:	38 96       	adiw	r30, 0x08	; 8
 910:	e4 91       	lpm	r30, Z+
 912:	e8 30       	cpi	r30, 0x08	; 8
 914:	d9 f1       	breq	.+118    	; 0x98c <Menu_Key+0x1b0>
 916:	e9 30       	cpi	r30, 0x09	; 9
 918:	40 f4       	brcc	.+16     	; 0x92a <Menu_Key+0x14e>
 91a:	e6 30       	cpi	r30, 0x06	; 6
 91c:	a9 f0       	breq	.+42     	; 0x948 <Menu_Key+0x16c>
 91e:	e7 30       	cpi	r30, 0x07	; 7
 920:	d0 f4       	brcc	.+52     	; 0x956 <Menu_Key+0x17a>
 922:	e5 30       	cpi	r30, 0x05	; 5
 924:	09 f0       	breq	.+2      	; 0x928 <Menu_Key+0x14c>
 926:	a8 c0       	rjmp	.+336    	; 0xa78 <Menu_Key+0x29c>
 928:	08 c0       	rjmp	.+16     	; 0x93a <Menu_Key+0x15e>
 92a:	ea 30       	cpi	r30, 0x0A	; 10
 92c:	c9 f1       	breq	.+114    	; 0x9a0 <Menu_Key+0x1c4>
 92e:	ea 30       	cpi	r30, 0x0A	; 10
 930:	f8 f0       	brcs	.+62     	; 0x970 <Menu_Key+0x194>
 932:	eb 30       	cpi	r30, 0x0B	; 11
 934:	09 f0       	breq	.+2      	; 0x938 <Menu_Key+0x15c>
 936:	a0 c0       	rjmp	.+320    	; 0xa78 <Menu_Key+0x29c>
 938:	22 c0       	rjmp	.+68     	; 0x97e <Menu_Key+0x1a2>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Minutes=BCD_Increment(clock->DS1307Time.Minutes,0,((5<<4)|9));
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	49 e5       	ldi	r20, 0x59	; 89
 940:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	52 c0       	rjmp	.+164    	; 0x9ec <Menu_Key+0x210>
				break;


				case MENU_TUNE_DATE:
				{
					clock->DS1307Time.Month=BCD_Increment(clock->DS1307Time.Month,1,((1<<4)|2));
 948:	8d 81       	ldd	r24, Y+5	; 0x05
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	42 e1       	ldi	r20, 0x12	; 18
 94e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 952:	8d 83       	std	Y+5, r24	; 0x05
 954:	58 c0       	rjmp	.+176    	; 0xa06 <Menu_Key+0x22a>
				break;


				case MENU_TUNE_YEAR:
				{
					clock->DS1307Time.Year=BCD_Increment(clock->DS1307Time.Year,0,((9<<4)|9));
 956:	8e 81       	ldd	r24, Y+6	; 0x06
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	49 e9       	ldi	r20, 0x99	; 153
 95c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 960:	8e 83       	std	Y+6, r24	; 0x06
					Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 962:	be 01       	movw	r22, r28
 964:	67 5e       	subi	r22, 0xE7	; 231
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	ce 01       	movw	r24, r28
 96a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Year_To_Buf>
				}
				break;
 96e:	84 c0       	rjmp	.+264    	; 0xa78 <Menu_Key+0x29c>

				case MENU_TUNE_BRIGHTNESS_DAY_TIME:
				{
					clock->brightnessDay.minute=BCD_Increment(clock->brightnessDay.minute,0,((5<<4)|9));
 970:	89 85       	ldd	r24, Y+9	; 0x09
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	49 e5       	ldi	r20, 0x59	; 89
 976:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 97a:	89 87       	std	Y+9, r24	; 0x09
 97c:	51 c0       	rjmp	.+162    	; 0xa20 <Menu_Key+0x244>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_TIME:
				{
					clock->brightnessNight.minute=BCD_Increment(clock->brightnessNight.minute,0,((5<<4)|9));
 97e:	8c 85       	ldd	r24, Y+12	; 0x0c
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	49 e5       	ldi	r20, 0x59	; 89
 984:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 988:	8c 87       	std	Y+12, r24	; 0x0c
 98a:	56 c0       	rjmp	.+172    	; 0xa38 <Menu_Key+0x25c>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_DAY_VAL:
				{
					clock->brightnessDay.brightness=(clock->brightnessDay.brightness+2)&0xF;
 98c:	8a 85       	ldd	r24, Y+10	; 0x0a
 98e:	8e 5f       	subi	r24, 0xFE	; 254
 990:	8f 70       	andi	r24, 0x0F	; 15
 992:	8a 87       	std	Y+10, r24	; 0x0a
					clock->brightnessCurrent=clock->brightnessDay.brightness;
 994:	8e 87       	std	Y+14, r24	; 0x0e
					Value_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 996:	67 5e       	subi	r22, 0xE7	; 231
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	ce 01       	movw	r24, r28
 99c:	08 96       	adiw	r24, 0x08	; 8
 99e:	09 c0       	rjmp	.+18     	; 0x9b2 <Menu_Key+0x1d6>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_VAL:
				{
					clock->brightnessNight.brightness=(clock->brightnessNight.brightness+2)&0xF;
 9a0:	8d 85       	ldd	r24, Y+13	; 0x0d
 9a2:	8e 5f       	subi	r24, 0xFE	; 254
 9a4:	8f 70       	andi	r24, 0x0F	; 15
 9a6:	8d 87       	std	Y+13, r24	; 0x0d
					clock->brightnessCurrent=clock->brightnessNight.brightness;
 9a8:	8e 87       	std	Y+14, r24	; 0x0e
					Value_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 9aa:	67 5e       	subi	r22, 0xE7	; 231
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	ce 01       	movw	r24, r28
 9b0:	0b 96       	adiw	r24, 0x0b	; 11
 9b2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Value_Brightness_To_Buf>
				}
				break;
 9b6:	60 c0       	rjmp	.+192    	; 0xa78 <Menu_Key+0x29c>
		}
		break;
		//------------------------
		case KEY_CODE_C:
		{ 
			switch(SELECT)//пункт меню
 9b8:	e0 91 39 01 	lds	r30, 0x0139
 9bc:	f0 91 3a 01 	lds	r31, 0x013A
 9c0:	38 96       	adiw	r30, 0x08	; 8
 9c2:	e4 91       	lpm	r30, Z+
 9c4:	e6 30       	cpi	r30, 0x06	; 6
 9c6:	c9 f0       	breq	.+50     	; 0x9fa <Menu_Key+0x21e>
 9c8:	e7 30       	cpi	r30, 0x07	; 7
 9ca:	20 f4       	brcc	.+8      	; 0x9d4 <Menu_Key+0x1f8>
 9cc:	e5 30       	cpi	r30, 0x05	; 5
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <Menu_Key+0x1f6>
 9d0:	53 c0       	rjmp	.+166    	; 0xa78 <Menu_Key+0x29c>
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <Menu_Key+0x204>
 9d4:	e9 30       	cpi	r30, 0x09	; 9
 9d6:	f1 f0       	breq	.+60     	; 0xa14 <Menu_Key+0x238>
 9d8:	eb 30       	cpi	r30, 0x0B	; 11
 9da:	09 f0       	breq	.+2      	; 0x9de <Menu_Key+0x202>
 9dc:	4d c0       	rjmp	.+154    	; 0xa78 <Menu_Key+0x29c>
 9de:	26 c0       	rjmp	.+76     	; 0xa2c <Menu_Key+0x250>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Hours=BCD_Increment(clock->DS1307Time.Hours,0,((2<<4)|3));
 9e0:	8a 81       	ldd	r24, Y+2	; 0x02
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	43 e2       	ldi	r20, 0x23	; 35
 9e6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 9ea:	8a 83       	std	Y+2, r24	; 0x02
					Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 9ec:	be 01       	movw	r22, r28
 9ee:	67 5e       	subi	r22, 0xE7	; 231
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	ce 01       	movw	r24, r28
 9f4:	0e 94 46 05 	call	0xa8c	; 0xa8c <Time_To_Buf>
				}
				break;
 9f8:	3f c0       	rjmp	.+126    	; 0xa78 <Menu_Key+0x29c>


				case MENU_TUNE_DATE:
				{
					clock->DS1307Time.Date=BCD_Increment(clock->DS1307Time.Date,1,((3<<4)|1));
 9fa:	8c 81       	ldd	r24, Y+4	; 0x04
 9fc:	61 e0       	ldi	r22, 0x01	; 1
 9fe:	41 e3       	ldi	r20, 0x31	; 49
 a00:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 a04:	8c 83       	std	Y+4, r24	; 0x04
					Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a06:	be 01       	movw	r22, r28
 a08:	67 5e       	subi	r22, 0xE7	; 231
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	ce 01       	movw	r24, r28
 a0e:	0e 94 72 05 	call	0xae4	; 0xae4 <Date_To_Buf>
				}
				break;
 a12:	32 c0       	rjmp	.+100    	; 0xa78 <Menu_Key+0x29c>


				case MENU_TUNE_BRIGHTNESS_DAY_TIME:
				{
					clock->brightnessDay.hour=BCD_Increment(clock->brightnessDay.hour,MIN_NIGHT_TO_DAY_HOUR,MAX_NIGHT_TO_DAY_HOUR);
 a14:	88 85       	ldd	r24, Y+8	; 0x08
 a16:	61 e0       	ldi	r22, 0x01	; 1
 a18:	41 e1       	ldi	r20, 0x11	; 17
 a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 a1e:	88 87       	std	Y+8, r24	; 0x08
					Time_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a20:	be 01       	movw	r22, r28
 a22:	67 5e       	subi	r22, 0xE7	; 231
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	ce 01       	movw	r24, r28
 a28:	08 96       	adiw	r24, 0x08	; 8
 a2a:	0b c0       	rjmp	.+22     	; 0xa42 <Menu_Key+0x266>
				}
				break;

				case MENU_TUNE_BRIGHTNESS_NIGHT_TIME:
				{
					clock->brightnessNight.hour=BCD_Increment(clock->brightnessNight.hour,MIN_DAY_TO_NIGHT_HOUR,MAX_DAY_TO_NIGHT_HOUR);
 a2c:	8b 85       	ldd	r24, Y+11	; 0x0b
 a2e:	62 e1       	ldi	r22, 0x12	; 18
 a30:	43 e2       	ldi	r20, 0x23	; 35
 a32:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BCD_Increment>
 a36:	8b 87       	std	Y+11, r24	; 0x0b
					Time_Brightness_To_Buf(&clock->brightnessNight,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a38:	be 01       	movw	r22, r28
 a3a:	67 5e       	subi	r22, 0xE7	; 231
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	ce 01       	movw	r24, r28
 a40:	0b 96       	adiw	r24, 0x0b	; 11
 a42:	0e 94 c4 05 	call	0xb88	; 0xb88 <Time_Brightness_To_Buf>
				}
				break;
 a46:	18 c0       	rjmp	.+48     	; 0xa78 <Menu_Key+0x29c>
		break;
			
		//------------------------
		case KEY_CODE_AB://переход в режим настройки времени/даты/года
		{ 
			I2C_ReadTime(&clock->DS1307Time);
 a48:	cb 01       	movw	r24, r22
 a4a:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_ReadTime>
			Menu_Change(CHILD);
 a4e:	e0 91 39 01 	lds	r30, 0x0139
 a52:	f0 91 3a 01 	lds	r31, 0x013A
 a56:	36 96       	adiw	r30, 0x06	; 6
 a58:	25 91       	lpm	r18, Z+
 a5a:	34 91       	lpm	r19, Z+
 a5c:	c9 01       	movw	r24, r18
 a5e:	0a c0       	rjmp	.+20     	; 0xa74 <Menu_Key+0x298>
		}
		break;
		//------------------------
		case KEY_CODE_CD:
		{
			clock->brightnessCurrent=clock->brightnessDay.brightness;
 a60:	8a 85       	ldd	r24, Y+10	; 0x0a
 a62:	8e 87       	std	Y+14, r24	; 0x0e
			Value_Brightness_To_Buf(&clock->brightnessDay,&clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 a64:	67 5e       	subi	r22, 0xE7	; 231
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	ce 01       	movw	r24, r28
 a6a:	08 96       	adiw	r24, 0x08	; 8
 a6c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Value_Brightness_To_Buf>
			Menu_Change(&m_s1i4);
 a70:	80 e9       	ldi	r24, 0x90	; 144
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Menu_Change>
		{

		}
		break;
	}
}
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	08 95       	ret

00000a7e <Menu_Init>:
//---------------------------------------------------
void Menu_Init(void) 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 a7e:	82 e7       	ldi	r24, 0x72	; 114
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	90 93 3a 01 	sts	0x013A, r25
 a86:	80 93 39 01 	sts	0x0139, r24
}
 a8a:	08 95       	ret

00000a8c <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 a8c:	fc 01       	movw	r30, r24
 a8e:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 a90:	82 81       	ldd	r24, Z+2	; 0x02
 a92:	82 95       	swap	r24
 a94:	8f 70       	andi	r24, 0x0F	; 15
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	95 60       	ori	r25, 0x05	; 5
 a9a:	11 96       	adiw	r26, 0x01	; 1
 a9c:	9c 93       	st	X, r25
 a9e:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 aa0:	82 81       	ldd	r24, Z+2	; 0x02
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	8f 70       	andi	r24, 0x0F	; 15
 aa6:	90 70       	andi	r25, 0x00	; 0
 aa8:	94 60       	ori	r25, 0x04	; 4
 aaa:	13 96       	adiw	r26, 0x03	; 3
 aac:	9c 93       	st	X, r25
 aae:	8e 93       	st	-X, r24
 ab0:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 ab2:	8a e0       	ldi	r24, 0x0A	; 10
 ab4:	93 e0       	ldi	r25, 0x03	; 3
 ab6:	15 96       	adiw	r26, 0x05	; 5
 ab8:	9c 93       	st	X, r25
 aba:	8e 93       	st	-X, r24
 abc:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 abe:	81 81       	ldd	r24, Z+1	; 0x01
 ac0:	82 95       	swap	r24
 ac2:	8f 70       	andi	r24, 0x0F	; 15
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	92 60       	ori	r25, 0x02	; 2
 ac8:	17 96       	adiw	r26, 0x07	; 7
 aca:	9c 93       	st	X, r25
 acc:	8e 93       	st	-X, r24
 ace:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 ad0:	81 81       	ldd	r24, Z+1	; 0x01
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	8f 70       	andi	r24, 0x0F	; 15
 ad6:	90 70       	andi	r25, 0x00	; 0
 ad8:	91 60       	ori	r25, 0x01	; 1
 ada:	19 96       	adiw	r26, 0x09	; 9
 adc:	9c 93       	st	X, r25
 ade:	8e 93       	st	-X, r24
 ae0:	18 97       	sbiw	r26, 0x08	; 8
}
 ae2:	08 95       	ret

00000ae4 <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 ae4:	fc 01       	movw	r30, r24
 ae6:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Date>>4);
 ae8:	84 81       	ldd	r24, Z+4	; 0x04
 aea:	82 95       	swap	r24
 aec:	8f 70       	andi	r24, 0x0F	; 15
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	95 60       	ori	r25, 0x05	; 5
 af2:	11 96       	adiw	r26, 0x01	; 1
 af4:	9c 93       	st	X, r25
 af6:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Date&0x0F);
 af8:	84 81       	ldd	r24, Z+4	; 0x04
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	8f 70       	andi	r24, 0x0F	; 15
 afe:	90 70       	andi	r25, 0x00	; 0
 b00:	94 60       	ori	r25, 0x04	; 4
 b02:	13 96       	adiw	r26, 0x03	; 3
 b04:	9c 93       	st	X, r25
 b06:	8e 93       	st	-X, r24
 b08:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0xFF);//"."
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	93 e0       	ldi	r25, 0x03	; 3
 b0e:	15 96       	adiw	r26, 0x05	; 5
 b10:	9c 93       	st	X, r25
 b12:	8e 93       	st	-X, r24
 b14:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Month>>4);
 b16:	85 81       	ldd	r24, Z+5	; 0x05
 b18:	82 95       	swap	r24
 b1a:	8f 70       	andi	r24, 0x0F	; 15
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	92 60       	ori	r25, 0x02	; 2
 b20:	17 96       	adiw	r26, 0x07	; 7
 b22:	9c 93       	st	X, r25
 b24:	8e 93       	st	-X, r24
 b26:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Month&0x0F);
 b28:	85 81       	ldd	r24, Z+5	; 0x05
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	8f 70       	andi	r24, 0x0F	; 15
 b2e:	90 70       	andi	r25, 0x00	; 0
 b30:	91 60       	ori	r25, 0x01	; 1
 b32:	19 96       	adiw	r26, 0x09	; 9
 b34:	9c 93       	st	X, r25
 b36:	8e 93       	st	-X, r24
 b38:	18 97       	sbiw	r26, 0x08	; 8
}
 b3a:	08 95       	ret

00000b3c <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 b3c:	fc 01       	movw	r30, r24
 b3e:	db 01       	movw	r26, r22
	buf[0]=0x0500|(0xF);
 b40:	8f e0       	ldi	r24, 0x0F	; 15
 b42:	95 e0       	ldi	r25, 0x05	; 5
 b44:	11 96       	adiw	r26, 0x01	; 1
 b46:	9c 93       	st	X, r25
 b48:	8e 93       	st	-X, r24
	buf[1]=0x0400|(2);
 b4a:	82 e0       	ldi	r24, 0x02	; 2
 b4c:	94 e0       	ldi	r25, 0x04	; 4
 b4e:	13 96       	adiw	r26, 0x03	; 3
 b50:	9c 93       	st	X, r25
 b52:	8e 93       	st	-X, r24
 b54:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0);
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	93 e0       	ldi	r25, 0x03	; 3
 b5a:	15 96       	adiw	r26, 0x05	; 5
 b5c:	9c 93       	st	X, r25
 b5e:	8e 93       	st	-X, r24
 b60:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Year>>4);
 b62:	86 81       	ldd	r24, Z+6	; 0x06
 b64:	82 95       	swap	r24
 b66:	8f 70       	andi	r24, 0x0F	; 15
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	92 60       	ori	r25, 0x02	; 2
 b6c:	17 96       	adiw	r26, 0x07	; 7
 b6e:	9c 93       	st	X, r25
 b70:	8e 93       	st	-X, r24
 b72:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Year&0x0F);
 b74:	86 81       	ldd	r24, Z+6	; 0x06
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	8f 70       	andi	r24, 0x0F	; 15
 b7a:	90 70       	andi	r25, 0x00	; 0
 b7c:	91 60       	ori	r25, 0x01	; 1
 b7e:	19 96       	adiw	r26, 0x09	; 9
 b80:	9c 93       	st	X, r25
 b82:	8e 93       	st	-X, r24
 b84:	18 97       	sbiw	r26, 0x08	; 8
}
 b86:	08 95       	ret

00000b88 <Time_Brightness_To_Buf>:

void Time_Brightness_To_Buf(stBrightness *brightness, uint16_t *buf)
{
 b88:	fc 01       	movw	r30, r24
 b8a:	db 01       	movw	r26, r22
	buf[0]=0x0500|(brightness->hour>>4);
 b8c:	80 81       	ld	r24, Z
 b8e:	82 95       	swap	r24
 b90:	8f 70       	andi	r24, 0x0F	; 15
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	95 60       	ori	r25, 0x05	; 5
 b96:	11 96       	adiw	r26, 0x01	; 1
 b98:	9c 93       	st	X, r25
 b9a:	8e 93       	st	-X, r24
	buf[1]=0x0400|(brightness->hour&0x0F);
 b9c:	80 81       	ld	r24, Z
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	8f 70       	andi	r24, 0x0F	; 15
 ba2:	90 70       	andi	r25, 0x00	; 0
 ba4:	94 60       	ori	r25, 0x04	; 4
 ba6:	13 96       	adiw	r26, 0x03	; 3
 ba8:	9c 93       	st	X, r25
 baa:	8e 93       	st	-X, r24
 bac:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 bae:	8a e0       	ldi	r24, 0x0A	; 10
 bb0:	93 e0       	ldi	r25, 0x03	; 3
 bb2:	15 96       	adiw	r26, 0x05	; 5
 bb4:	9c 93       	st	X, r25
 bb6:	8e 93       	st	-X, r24
 bb8:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(brightness->minute>>4);
 bba:	81 81       	ldd	r24, Z+1	; 0x01
 bbc:	82 95       	swap	r24
 bbe:	8f 70       	andi	r24, 0x0F	; 15
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	92 60       	ori	r25, 0x02	; 2
 bc4:	17 96       	adiw	r26, 0x07	; 7
 bc6:	9c 93       	st	X, r25
 bc8:	8e 93       	st	-X, r24
 bca:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(brightness->minute&0x0F);		
 bcc:	81 81       	ldd	r24, Z+1	; 0x01
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	8f 70       	andi	r24, 0x0F	; 15
 bd2:	90 70       	andi	r25, 0x00	; 0
 bd4:	91 60       	ori	r25, 0x01	; 1
 bd6:	19 96       	adiw	r26, 0x09	; 9
 bd8:	9c 93       	st	X, r25
 bda:	8e 93       	st	-X, r24
 bdc:	18 97       	sbiw	r26, 0x08	; 8
}
 bde:	08 95       	ret

00000be0 <Value_Brightness_To_Buf>:

void Value_Brightness_To_Buf(stBrightness *brightness, uint16_t *buf)
{
 be0:	fb 01       	movw	r30, r22
	buf[0]=0x0500|(0xF);
 be2:	2f e0       	ldi	r18, 0x0F	; 15
 be4:	35 e0       	ldi	r19, 0x05	; 5
 be6:	31 83       	std	Z+1, r19	; 0x01
 be8:	20 83       	st	Z, r18
	buf[1]=0x0400|(0xF);
 bea:	2f e0       	ldi	r18, 0x0F	; 15
 bec:	34 e0       	ldi	r19, 0x04	; 4
 bee:	33 83       	std	Z+3, r19	; 0x03
 bf0:	22 83       	std	Z+2, r18	; 0x02
	buf[2]=0x0300|(0xF);
 bf2:	2f e0       	ldi	r18, 0x0F	; 15
 bf4:	33 e0       	ldi	r19, 0x03	; 3
 bf6:	35 83       	std	Z+5, r19	; 0x05
 bf8:	24 83       	std	Z+4, r18	; 0x04
	buf[3]=0x0200|(0xF);
 bfa:	2f e0       	ldi	r18, 0x0F	; 15
 bfc:	32 e0       	ldi	r19, 0x02	; 2
 bfe:	37 83       	std	Z+7, r19	; 0x07
 c00:	26 83       	std	Z+6, r18	; 0x06
	buf[4]=0x0100|((brightness->brightness>>1)&0x0F);	
 c02:	dc 01       	movw	r26, r24
 c04:	12 96       	adiw	r26, 0x02	; 2
 c06:	8c 91       	ld	r24, X
 c08:	12 97       	sbiw	r26, 0x02	; 2
 c0a:	86 95       	lsr	r24
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	8f 70       	andi	r24, 0x0F	; 15
 c10:	90 70       	andi	r25, 0x00	; 0
 c12:	91 60       	ori	r25, 0x01	; 1
 c14:	91 87       	std	Z+9, r25	; 0x09
 c16:	80 87       	std	Z+8, r24	; 0x08
}
 c18:	08 95       	ret

00000c1a <Determine_Current_Brightness>:

void Determine_Current_Brightness(stClock *clock)
{
 c1a:	fc 01       	movw	r30, r24
	if((((uint16_t)clock->DS1307Time.Hours*100+clock->DS1307Time.Minutes)>=((uint16_t)clock->brightnessDay.hour*100+clock->brightnessDay.minute)) && 
 c1c:	82 81       	ldd	r24, Z+2	; 0x02
 c1e:	24 e6       	ldi	r18, 0x64	; 100
 c20:	82 9f       	mul	r24, r18
 c22:	c0 01       	movw	r24, r0
 c24:	11 24       	eor	r1, r1
 c26:	31 81       	ldd	r19, Z+1	; 0x01
 c28:	83 0f       	add	r24, r19
 c2a:	91 1d       	adc	r25, r1
 c2c:	40 85       	ldd	r20, Z+8	; 0x08
 c2e:	42 9f       	mul	r20, r18
 c30:	a0 01       	movw	r20, r0
 c32:	11 24       	eor	r1, r1
 c34:	31 85       	ldd	r19, Z+9	; 0x09
 c36:	43 0f       	add	r20, r19
 c38:	51 1d       	adc	r21, r1
 c3a:	84 17       	cp	r24, r20
 c3c:	95 07       	cpc	r25, r21
 c3e:	60 f0       	brcs	.+24     	; 0xc58 <Determine_Current_Brightness+0x3e>
	   (((uint16_t)clock->DS1307Time.Hours*100+clock->DS1307Time.Minutes)< ((uint16_t)clock->brightnessNight.hour*100+clock->brightnessNight.minute)))
 c40:	33 85       	ldd	r19, Z+11	; 0x0b
 c42:	32 9f       	mul	r19, r18
 c44:	90 01       	movw	r18, r0
 c46:	11 24       	eor	r1, r1
 c48:	44 85       	ldd	r20, Z+12	; 0x0c
 c4a:	24 0f       	add	r18, r20
 c4c:	31 1d       	adc	r19, r1
	buf[4]=0x0100|((brightness->brightness>>1)&0x0F);	
}

void Determine_Current_Brightness(stClock *clock)
{
	if((((uint16_t)clock->DS1307Time.Hours*100+clock->DS1307Time.Minutes)>=((uint16_t)clock->brightnessDay.hour*100+clock->brightnessDay.minute)) && 
 c4e:	82 17       	cp	r24, r18
 c50:	93 07       	cpc	r25, r19
 c52:	10 f4       	brcc	.+4      	; 0xc58 <Determine_Current_Brightness+0x3e>
	   (((uint16_t)clock->DS1307Time.Hours*100+clock->DS1307Time.Minutes)< ((uint16_t)clock->brightnessNight.hour*100+clock->brightnessNight.minute)))
	{
		clock->brightnessCurrent=clock->brightnessDay.brightness;	
 c54:	82 85       	ldd	r24, Z+10	; 0x0a
 c56:	01 c0       	rjmp	.+2      	; 0xc5a <Determine_Current_Brightness+0x40>
	}
	else 
	{
		clock->brightnessCurrent=clock->brightnessNight.brightness;	
 c58:	85 85       	ldd	r24, Z+13	; 0x0d
 c5a:	86 87       	std	Z+14, r24	; 0x0e
 c5c:	08 95       	ret

00000c5e <BCD_Increment>:
	}
}

uint8_t BCD_Increment(uint8_t bcd, uint8_t bcd_min, uint8_t bcd_max)
{	
	if((bcd&0xF)<9)
 c5e:	28 2f       	mov	r18, r24
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	2f 70       	andi	r18, 0x0F	; 15
 c64:	30 70       	andi	r19, 0x00	; 0
 c66:	29 30       	cpi	r18, 0x09	; 9
 c68:	31 05       	cpc	r19, r1
 c6a:	14 f4       	brge	.+4      	; 0xc70 <BCD_Increment+0x12>
	{
		bcd+=0x01;
 c6c:	8f 5f       	subi	r24, 0xFF	; 255
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <BCD_Increment+0x16>
	}
	else
	{
		bcd+=0x10;
 c70:	80 5f       	subi	r24, 0xF0	; 240
		bcd&=0xF0;
 c72:	80 7f       	andi	r24, 0xF0	; 240
 c74:	86 17       	cp	r24, r22
 c76:	08 f4       	brcc	.+2      	; 0xc7a <BCD_Increment+0x1c>
 c78:	86 2f       	mov	r24, r22
	if(bcd<bcd_min)
	{
		bcd=bcd_min;			
	}

	if(bcd>bcd_max)
 c7a:	48 17       	cp	r20, r24
 c7c:	08 f4       	brcc	.+2      	; 0xc80 <BCD_Increment+0x22>
 c7e:	86 2f       	mov	r24, r22
	{
		bcd=bcd_min;			
	}

	return bcd;
}
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
