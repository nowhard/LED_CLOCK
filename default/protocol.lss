
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000892  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000032  00800100  00800100  00000906  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002d0  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001740  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080b  00000000  00000000  00002b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e7a  00000000  00000000  00003354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000041d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000622  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000001ab  00000000  00000000  00004ede  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <Null_Menu>:
	...

00000072 <m_s1i1>:
  72:	7c 00 68 00 68 00 9a 00 02 00                       |.h.h.....

0000007c <m_s1i2>:
  7c:	86 00 72 00 68 00 a4 00 03 00                       ..r.h.....

00000086 <m_s1i3>:
  86:	90 00 7c 00 68 00 ae 00 04 00                       ..|.h.....

00000090 <m_s1i4>:
  90:	68 00 86 00 68 00 68 00 08 00                       h...h.h...

0000009a <m_s2i1>:
  9a:	68 00 68 00 72 00 68 00 05 00                       h.h.r.h...

000000a4 <m_s3i1>:
  a4:	68 00 68 00 7c 00 68 00 06 00                       h.h.|.h...

000000ae <m_s4i1>:
  ae:	68 00 68 00 86 00 68 00 07 00                       h.h...h...

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d4 e0       	ldi	r29, 0x04	; 4
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a2 33       	cpi	r26, 0x32	; 50
  d0:	b1 07       	cpc	r27, r17
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 23 02 	call	0x446	; 0x446 <main>
  d8:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	80 63       	ori	r24, 0x30	; 48
  e4:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8f 7c       	andi	r24, 0xCF	; 207
  ea:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
  f2:	10 92 b9 00 	sts	0x00B9, r1
}
  f6:	08 95       	ret

000000f8 <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
  f8:	94 ea       	ldi	r25, 0xA4	; 164
  fa:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
  fe:	90 91 bc 00 	lds	r25, 0x00BC
 102:	97 ff       	sbrs	r25, 7
 104:	fc cf       	rjmp	.-8      	; 0xfe <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 106:	90 91 b9 00 	lds	r25, 0x00B9
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	98 30       	cpi	r25, 0x08	; 8
 10e:	39 f5       	brne	.+78     	; 0x15e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 110:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 11a:	80 91 bc 00 	lds	r24, 0x00BC
 11e:	87 ff       	sbrs	r24, 7
 120:	fc cf       	rjmp	.-8      	; 0x11a <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 122:	80 91 b9 00 	lds	r24, 0x00B9
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	88 31       	cpi	r24, 0x18	; 24
 12a:	c9 f4       	brne	.+50     	; 0x15e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 12c:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 136:	80 91 bc 00 	lds	r24, 0x00BC
 13a:	87 ff       	sbrs	r24, 7
 13c:	fc cf       	rjmp	.-8      	; 0x136 <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 13e:	80 91 b9 00 	lds	r24, 0x00B9
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	88 32       	cpi	r24, 0x28	; 40
 146:	59 f4       	brne	.+22     	; 0x15e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 148:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 152:	80 91 bc 00 	lds	r24, 0x00BC
 156:	87 ff       	sbrs	r24, 7
 158:	fc cf       	rjmp	.-8      	; 0x152 <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 15a:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 15e:	84 e9       	ldi	r24, 0x94	; 148
 160:	80 93 bc 00 	sts	0x00BC, r24
 164:	08 95       	ret

00000166 <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 166:	94 ea       	ldi	r25, 0xA4	; 164
 168:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 16c:	90 91 bc 00 	lds	r25, 0x00BC
 170:	97 ff       	sbrs	r25, 7
 172:	fc cf       	rjmp	.-8      	; 0x16c <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 174:	90 91 b9 00 	lds	r25, 0x00B9
 178:	98 7f       	andi	r25, 0xF8	; 248
 17a:	98 30       	cpi	r25, 0x08	; 8
 17c:	09 f0       	breq	.+2      	; 0x180 <I2C_Read+0x1a>
 17e:	43 c0       	rjmp	.+134    	; 0x206 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 180:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 184:	94 e8       	ldi	r25, 0x84	; 132
 186:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 18a:	90 91 bc 00 	lds	r25, 0x00BC
 18e:	97 ff       	sbrs	r25, 7
 190:	fc cf       	rjmp	.-8      	; 0x18a <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 192:	90 91 b9 00 	lds	r25, 0x00B9
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	98 31       	cpi	r25, 0x18	; 24
 19a:	a9 f5       	brne	.+106    	; 0x206 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 19c:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1a0:	94 e8       	ldi	r25, 0x84	; 132
 1a2:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1a6:	90 91 bc 00 	lds	r25, 0x00BC
 1aa:	97 ff       	sbrs	r25, 7
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1ae:	90 91 b9 00 	lds	r25, 0x00B9
 1b2:	98 7f       	andi	r25, 0xF8	; 248
 1b4:	98 32       	cpi	r25, 0x28	; 40
 1b6:	39 f5       	brne	.+78     	; 0x206 <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1b8:	94 ea       	ldi	r25, 0xA4	; 164
 1ba:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1be:	90 91 bc 00 	lds	r25, 0x00BC
 1c2:	97 ff       	sbrs	r25, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1c6:	90 91 b9 00 	lds	r25, 0x00B9
 1ca:	98 7f       	andi	r25, 0xF8	; 248
 1cc:	90 31       	cpi	r25, 0x10	; 16
 1ce:	d9 f4       	brne	.+54     	; 0x206 <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1dc:	80 91 bc 00 	lds	r24, 0x00BC
 1e0:	87 ff       	sbrs	r24, 7
 1e2:	fc cf       	rjmp	.-8      	; 0x1dc <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 1e4:	80 91 b9 00 	lds	r24, 0x00B9
 1e8:	88 7f       	andi	r24, 0xF8	; 248
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	61 f4       	brne	.+24     	; 0x206 <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1f4:	80 91 bc 00 	lds	r24, 0x00BC
 1f8:	87 ff       	sbrs	r24, 7
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 1fc:	80 91 b9 00 	lds	r24, 0x00B9
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	88 35       	cpi	r24, 0x58	; 88
 204:	29 f0       	breq	.+10     	; 0x210 <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 206:	84 e9       	ldi	r24, 0x94	; 148
 208:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		
	}
	reg=TWDR;
 210:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 214:	94 e9       	ldi	r25, 0x94	; 148
 216:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 21a:	08 95       	ret

0000021c <I2C_ReadTime>:

//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 222:	80 ed       	ldi	r24, 0xD0	; 208
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 22a:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	87 ec       	ldi	r24, 0xC7	; 199
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <I2C_ReadTime+0x14>
 234:	00 c0       	rjmp	.+0      	; 0x236 <I2C_ReadTime+0x1a>
 236:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 238:	80 ed       	ldi	r24, 0xD0	; 208
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	87 ec       	ldi	r24, 0xC7	; 199
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <I2C_ReadTime+0x2a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <I2C_ReadTime+0x30>
 24c:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 24e:	80 ed       	ldi	r24, 0xD0	; 208
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 256:	8a 83       	std	Y+2, r24	; 0x02
 258:	87 ec       	ldi	r24, 0xC7	; 199
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <I2C_ReadTime+0x40>
 260:	00 c0       	rjmp	.+0      	; 0x262 <I2C_ReadTime+0x46>
 262:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 264:	80 ed       	ldi	r24, 0xD0	; 208
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 26c:	8b 83       	std	Y+3, r24	; 0x03
 26e:	87 ec       	ldi	r24, 0xC7	; 199
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <I2C_ReadTime+0x56>
 276:	00 c0       	rjmp	.+0      	; 0x278 <I2C_ReadTime+0x5c>
 278:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 27a:	80 ed       	ldi	r24, 0xD0	; 208
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 282:	8c 83       	std	Y+4, r24	; 0x04
 284:	87 ec       	ldi	r24, 0xC7	; 199
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <I2C_ReadTime+0x6c>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <I2C_ReadTime+0x72>
 28e:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 290:	80 ed       	ldi	r24, 0xD0	; 208
 292:	65 e0       	ldi	r22, 0x05	; 5
 294:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 298:	8d 83       	std	Y+5, r24	; 0x05
 29a:	87 ec       	ldi	r24, 0xC7	; 199
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <I2C_ReadTime+0x82>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <I2C_ReadTime+0x88>
 2a4:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 2a6:	80 ed       	ldi	r24, 0xD0	; 208
 2a8:	66 e0       	ldi	r22, 0x06	; 6
 2aa:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 2ae:	8e 83       	std	Y+6, r24	; 0x06
 2b0:	87 ec       	ldi	r24, 0xC7	; 199
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <I2C_ReadTime+0x98>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <I2C_ReadTime+0x9e>
 2ba:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 2bc:	80 ed       	ldi	r24, 0xD0	; 208
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 2c4:	8f 83       	std	Y+7, r24	; 0x07
 2c6:	87 ec       	ldi	r24, 0xC7	; 199
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <I2C_ReadTime+0xae>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <I2C_ReadTime+0xb4>
 2d0:	00 00       	nop
	_delay_us(100);
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 2d8:	80 ed       	ldi	r24, 0xD0	; 208
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read>
 2e0:	ef ec       	ldi	r30, 0xCF	; 207
 2e2:	f7 e0       	ldi	r31, 0x07	; 7
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <I2C_DS1307Init+0xc>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <I2C_DS1307Init+0x12>
 2ea:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 2ec:	87 ff       	sbrs	r24, 7
 2ee:	21 c0       	rjmp	.+66     	; 0x332 <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 2f0:	80 ed       	ldi	r24, 0xD0	; 208
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	42 e1       	ldi	r20, 0x12	; 18
 2f6:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 2fa:	87 ec       	ldi	r24, 0xC7	; 199
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <I2C_DS1307Init+0x26>
 302:	00 c0       	rjmp	.+0      	; 0x304 <I2C_DS1307Init+0x2c>
 304:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 306:	80 ed       	ldi	r24, 0xD0	; 208
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 310:	e7 ec       	ldi	r30, 0xC7	; 199
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <I2C_DS1307Init+0x3c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <I2C_DS1307Init+0x42>
 31a:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 31c:	80 ed       	ldi	r24, 0xD0	; 208
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 326:	87 ec       	ldi	r24, 0xC7	; 199
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <I2C_DS1307Init+0x52>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <I2C_DS1307Init+0x58>
 330:	00 00       	nop
 332:	08 95       	ret

00000334 <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 33a:	80 ed       	ldi	r24, 0xD0	; 208
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	4a 81       	ldd	r20, Y+2	; 0x02
 340:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 344:	87 ec       	ldi	r24, 0xC7	; 199
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <I2C_StoreTime+0x14>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <I2C_StoreTime+0x1a>
 34e:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 350:	80 ed       	ldi	r24, 0xD0	; 208
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	49 81       	ldd	r20, Y+1	; 0x01
 356:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 35a:	87 ec       	ldi	r24, 0xC7	; 199
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <I2C_StoreTime+0x2a>
 362:	00 c0       	rjmp	.+0      	; 0x364 <I2C_StoreTime+0x30>
 364:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 366:	80 ed       	ldi	r24, 0xD0	; 208
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 370:	87 ec       	ldi	r24, 0xC7	; 199
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <I2C_StoreTime+0x40>
 378:	00 c0       	rjmp	.+0      	; 0x37a <I2C_StoreTime+0x46>
 37a:	00 00       	nop
	_delay_us(100);
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 388:	80 ed       	ldi	r24, 0xD0	; 208
 38a:	65 e0       	ldi	r22, 0x05	; 5
 38c:	4d 81       	ldd	r20, Y+5	; 0x05
 38e:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 392:	87 ec       	ldi	r24, 0xC7	; 199
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <I2C_StoreDate+0x14>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <I2C_StoreDate+0x1a>
 39c:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 39e:	80 ed       	ldi	r24, 0xD0	; 208
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	4c 81       	ldd	r20, Y+4	; 0x04
 3a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 3a8:	87 ec       	ldi	r24, 0xC7	; 199
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <I2C_StoreDate+0x2a>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <I2C_StoreDate+0x30>
 3b2:	00 00       	nop
	_delay_us(100);	
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 3ba:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 3bc:	80 ed       	ldi	r24, 0xD0	; 208
 3be:	66 e0       	ldi	r22, 0x06	; 6
 3c0:	46 81       	ldd	r20, Z+6	; 0x06
 3c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
 3c6:	87 ec       	ldi	r24, 0xC7	; 199
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <I2C_StoreYear+0x10>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <I2C_StoreYear+0x16>
 3d0:	00 00       	nop
	_delay_us(100);
}
 3d2:	08 95       	ret

000003d4 <KBD_ReadKey>:

static uint8_t lastPIN, previousPIN;

enKey KBD_ReadKey(void) 
{
	lastPIN=(KBD_PIN & KBD_MASK);
 3d4:	49 b1       	in	r20, 0x09	; 9
 3d6:	4f 70       	andi	r20, 0x0F	; 15
 3d8:	40 93 00 01 	sts	0x0100, r20

	if((lastPIN!=KBD_MASK) && (lastPIN!=previousPIN))
 3dc:	4f 30       	cpi	r20, 0x0F	; 15
 3de:	11 f1       	breq	.+68     	; 0x424 <KBD_ReadKey+0x50>
 3e0:	80 91 01 01 	lds	r24, 0x0101
 3e4:	48 17       	cp	r20, r24
 3e6:	f1 f0       	breq	.+60     	; 0x424 <KBD_ReadKey+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e8:	8f ec       	ldi	r24, 0xCF	; 207
 3ea:	97 e0       	ldi	r25, 0x07	; 7
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <KBD_ReadKey+0x18>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <KBD_ReadKey+0x1e>
 3f2:	00 00       	nop
	{
		_delay_ms(1);
		if((lastPIN!=KBD_MASK) && (lastPIN==(KBD_PIN & KBD_MASK)))
 3f4:	4f 30       	cpi	r20, 0x0F	; 15
 3f6:	79 f0       	breq	.+30     	; 0x416 <KBD_ReadKey+0x42>
 3f8:	89 b1       	in	r24, 0x09	; 9
 3fa:	24 2f       	mov	r18, r20
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	90 70       	andi	r25, 0x00	; 0
 404:	28 17       	cp	r18, r24
 406:	39 07       	cpc	r19, r25
 408:	31 f4       	brne	.+12     	; 0x416 <KBD_ReadKey+0x42>
		{
			previousPIN=lastPIN;
 40a:	40 93 01 01 	sts	0x0101, r20

			if(lastPIN==KEY_A)  	 return KEY_CODE_A;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	44 23       	and	r20, r20
 412:	61 f0       	breq	.+24     	; 0x42c <KBD_ReadKey+0x58>
 414:	05 c0       	rjmp	.+10     	; 0x420 <KBD_ReadKey+0x4c>
			else 					 return KEY_CODE_NONE;

		}
		else
		{	
			lastPIN		= KBD_MASK;
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	80 93 00 01 	sts	0x0100, r24
			previousPIN = KBD_MASK;
 41c:	80 93 01 01 	sts	0x0101, r24
			return KEY_CODE_NONE;	
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
		}
	}
	else
	{
		previousPIN = KBD_MASK;
 424:	8f e0       	ldi	r24, 0x0F	; 15
 426:	80 93 01 01 	sts	0x0101, r24
		return KEY_CODE_NONE;
 42a:	80 e0       	ldi	r24, 0x00	; 0
	}

}
 42c:	08 95       	ret

0000042e <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 42e:	8b b1       	in	r24, 0x0b	; 11
 430:	8f 60       	ori	r24, 0x0F	; 15
 432:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR &= ~ KBD_MASK;
 434:	8a b1       	in	r24, 0x0a	; 10
 436:	80 7f       	andi	r24, 0xF0	; 240
 438:	8a b9       	out	0x0a, r24	; 10

	lastPIN 	= KBD_MASK;
 43a:	8f e0       	ldi	r24, 0x0F	; 15
 43c:	80 93 00 01 	sts	0x0100, r24
	previousPIN = KBD_MASK;
 440:	80 93 01 01 	sts	0x0101, r24
}
 444:	08 95       	ret

00000446 <main>:
#include "clock.h"


int main(void)
{
	Clock_Init();
 446:	0e 94 8d 02 	call	0x51a	; 0x51a <Clock_Init>
	sei();
 44a:	78 94       	sei

	while(1)
	{
		Clock_Cycle();
 44c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Clock_Cycle>
 450:	fd cf       	rjmp	.-6      	; 0x44c <main+0x6>

00000452 <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 452:	84 b1       	in	r24, 0x04	; 4
 454:	8c 62       	ori	r24, 0x2C	; 44
 456:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 458:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 45a:	80 e5       	ldi	r24, 0x50	; 80
 45c:	8c bd       	out	0x2c, r24	; 44

   SPSR = (1<<SPI2X);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	8d bd       	out	0x2d, r24	; 45
}
 462:	08 95       	ret

00000464 <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	00 d0       	rcall	.+0      	; 0x46a <LED_SPI_WriteWord+0x6>
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 472:	fe 01       	movw	r30, r28
 474:	31 96       	adiw	r30, 0x01	; 1
 476:	81 81       	ldd	r24, Z+1	; 0x01
 478:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 47a:	0d b4       	in	r0, 0x2d	; 45
 47c:	07 fe       	sbrs	r0, 7
 47e:	fd cf       	rjmp	.-6      	; 0x47a <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 480:	80 81       	ld	r24, Z
 482:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 484:	0d b4       	in	r0, 0x2d	; 45
 486:	07 fe       	sbrs	r0, 7
 488:	fd cf       	rjmp	.-6      	; 0x484 <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	8a e1       	ldi	r24, 0x1A	; 26
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <LED_SPI_WriteWord+0x28>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 492:	2a 9a       	sbi	0x05, 2	; 5
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	8a 95       	dec	r24
 498:	f1 f7       	brne	.-4      	; 0x496 <LED_SPI_WriteWord+0x32>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 49c:	2a 98       	cbi	0x05, 2	; 5
 49e:	8a e1       	ldi	r24, 0x1A	; 26
 4a0:	8a 95       	dec	r24
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LED_SPI_WriteWord+0x3c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	cf 91       	pop	r28
 4ac:	df 91       	pop	r29
 4ae:	08 95       	ret

000004b0 <LED_Out_Buf>:
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	d6 2e       	mov	r13, r22
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4c0:	08 2f       	mov	r16, r24
 4c2:	19 2f       	mov	r17, r25
 4c4:	c0 e0       	ldi	r28, 0x00	; 0
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4c8:	e4 2e       	mov	r14, r20
 4ca:	ff 24       	eor	r15, r15
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4cc:	1b c0       	rjmp	.+54     	; 0x504 <__stack+0x5>
	{
		if(i>=5)
 4ce:	85 30       	cpi	r24, 0x05	; 5
 4d0:	88 f0       	brcs	.+34     	; 0x4f4 <LED_Out_Buf+0x44>
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
 4d2:	9e 01       	movw	r18, r28
 4d4:	25 50       	subi	r18, 0x05	; 5
 4d6:	30 40       	sbci	r19, 0x00	; 0

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4d8:	c7 01       	movw	r24, r14
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <LED_Out_Buf+0x30>
 4dc:	95 95       	asr	r25
 4de:	87 95       	ror	r24
 4e0:	2a 95       	dec	r18
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <LED_Out_Buf+0x2c>
 4e4:	9c 01       	movw	r18, r24
 4e6:	f8 01       	movw	r30, r16
 4e8:	80 81       	ld	r24, Z
 4ea:	91 81       	ldd	r25, Z+1	; 0x01
 4ec:	20 fd       	sbrc	r18, 0
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <LED_Out_Buf+0x4a>
			{
				LED_SPI_WriteWord(out_buf[i]);
			}
			else
			{
				LED_SPI_WriteWord(out_buf[i]|0xF);
 4f0:	8f 60       	ori	r24, 0x0F	; 15
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <LED_Out_Buf+0x4a>
			}
		}
		else
		{
			LED_SPI_WriteWord(out_buf[i]);
 4f4:	f8 01       	movw	r30, r16
 4f6:	80 81       	ld	r24, Z
 4f8:	91 81       	ldd	r25, Z+1	; 0x01
 4fa:	0e 94 32 02 	call	0x464	; 0x464 <LED_SPI_WriteWord>
 4fe:	21 96       	adiw	r28, 0x01	; 1
 500:	0e 5f       	subi	r16, 0xFE	; 254
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	8c 2f       	mov	r24, r28
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 506:	cd 15       	cp	r28, r13
 508:	10 f3       	brcs	.-60     	; 0x4ce <LED_Out_Buf+0x1e>
			LED_SPI_WriteWord(out_buf[i]);
		}
	}

	return;	
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	08 95       	ret

0000051a <Clock_Init>:

stClock clock;

void Clock_Init(void)
{
	Menu_Init();
 51a:	0e 94 c2 03 	call	0x784	; 0x784 <Menu_Init>
	I2C_Init();
 51e:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <I2C_DS1307Init>
	KBD_Init();
 52a:	0e 94 17 02 	call	0x42e	; 0x42e <KBD_Init>
	LED_SPI_Init();
 52e:	0e 94 29 02 	call	0x452	; 0x452 <LED_SPI_Init>

	//clock.brightness=I2C_Read(SLA_ADDR,ADDR_BRIGHTNESS);
	clock.display_buf[0]=0xA0F;
 532:	8f e0       	ldi	r24, 0x0F	; 15
 534:	9a e0       	ldi	r25, 0x0A	; 10
 536:	90 93 10 01 	sts	0x0110, r25
 53a:	80 93 0f 01 	sts	0x010F, r24
	clock.display_buf[1]=0x9FF;
 53e:	8f ef       	ldi	r24, 0xFF	; 255
 540:	99 e0       	ldi	r25, 0x09	; 9
 542:	90 93 12 01 	sts	0x0112, r25
 546:	80 93 11 01 	sts	0x0111, r24
	clock.display_buf[2]=0xB05;
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	9b e0       	ldi	r25, 0x0B	; 11
 54e:	90 93 14 01 	sts	0x0114, r25
 552:	80 93 13 01 	sts	0x0113, r24
	clock.display_buf[3]=0xC01;		
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	9c e0       	ldi	r25, 0x0C	; 12
 55a:	90 93 16 01 	sts	0x0116, r25
 55e:	80 93 15 01 	sts	0x0115, r24
	clock.display_buf[4]=0xF00;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	9f e0       	ldi	r25, 0x0F	; 15
 566:	90 93 18 01 	sts	0x0118, r25
 56a:	80 93 17 01 	sts	0x0117, r24
	//clock.display_buf[3]=(0xA00|clock.brightness);
	
	clock.display_buf[5]=0x101;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	90 93 1a 01 	sts	0x011A, r25
 576:	80 93 19 01 	sts	0x0119, r24
	clock.display_buf[6]=0x202;
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	92 e0       	ldi	r25, 0x02	; 2
 57e:	90 93 1c 01 	sts	0x011C, r25
 582:	80 93 1b 01 	sts	0x011B, r24
	clock.display_buf[7]=0x303;
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	93 e0       	ldi	r25, 0x03	; 3
 58a:	90 93 1e 01 	sts	0x011E, r25
 58e:	80 93 1d 01 	sts	0x011D, r24
	clock.display_buf[8]=0x404;
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	94 e0       	ldi	r25, 0x04	; 4
 596:	90 93 20 01 	sts	0x0120, r25
 59a:	80 93 1f 01 	sts	0x011F, r24
	clock.display_buf[9]=0x505;
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	95 e0       	ldi	r25, 0x05	; 5
 5a2:	90 93 22 01 	sts	0x0122, r25
 5a6:	80 93 21 01 	sts	0x0121, r24

	clock.display_mask	=0xFF;
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	80 93 2f 01 	sts	0x012F, r24
}
 5b0:	08 95       	ret

000005b2 <Clock_Cycle>:
	{
		Menu_Key(KEY_CODE_NONE, &clock);
		keyTestCounter++;	
	}*/

	Menu_Key(KBD_ReadKey(), &clock);
 5b2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <KBD_ReadKey>
 5b6:	65 e0       	ldi	r22, 0x05	; 5
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	0e 94 45 03 	call	0x68a	; 0x68a <Menu_Key>

	if(dispCounter==DISP_COUNTER)
 5be:	80 91 02 01 	lds	r24, 0x0102
 5c2:	90 91 03 01 	lds	r25, 0x0103
 5c6:	23 e0       	ldi	r18, 0x03	; 3
 5c8:	88 3e       	cpi	r24, 0xE8	; 232
 5ca:	92 07       	cpc	r25, r18
 5cc:	81 f4       	brne	.+32     	; 0x5ee <Clock_Cycle+0x3c>
	{
		dispCounter=0;
 5ce:	10 92 03 01 	sts	0x0103, r1
 5d2:	10 92 02 01 	sts	0x0102, r1
		Menu_Display(&clock);
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 06 03 	call	0x60c	; 0x60c <Menu_Display>
		LED_Out_Buf(clock.display_buf,LED_BUF_LEN,clock.display_mask);
 5de:	8f e0       	ldi	r24, 0x0F	; 15
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	6a e0       	ldi	r22, 0x0A	; 10
 5e4:	40 91 2f 01 	lds	r20, 0x012F
 5e8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_Out_Buf>
 5ec:	08 95       	ret
	}
	else
	{
		dispCounter++;
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	90 93 03 01 	sts	0x0103, r25
 5f4:	80 93 02 01 	sts	0x0102, r24
 5f8:	08 95       	ret

000005fa <Menu_Change>:
MAKE_MENU(m_s4i1,  NULL_ENTRY,NULL_ENTRY,  m_s1i3,     NULL_ENTRY,   MENU_TUNE_YEAR, 		"");


void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	88 36       	cpi	r24, 0x68	; 104
 5fe:	92 07       	cpc	r25, r18
 600:	21 f0       	breq	.+8      	; 0x60a <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 602:	90 93 31 01 	sts	0x0131, r25
 606:	80 93 30 01 	sts	0x0130, r24
 60a:	08 95       	ret

0000060c <Menu_Display>:
}

#define BLINK_CONST		100
//------------------------------------
void Menu_Display(stClock *clock) 
{
 60c:	ef 92       	push	r14
 60e:	ff 92       	push	r15
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	ec 01       	movw	r28, r24
		blink_mask=~blink_mask;
	}



	switch(SELECT)
 616:	e0 91 30 01 	lds	r30, 0x0130
 61a:	f0 91 31 01 	lds	r31, 0x0131
 61e:	38 96       	adiw	r30, 0x08	; 8
 620:	e4 91       	lpm	r30, Z+
 622:	e5 30       	cpi	r30, 0x05	; 5
 624:	59 f1       	breq	.+86     	; 0x67c <Menu_Display+0x70>
 626:	e6 30       	cpi	r30, 0x06	; 6
 628:	38 f4       	brcc	.+14     	; 0x638 <Menu_Display+0x2c>
 62a:	e3 30       	cpi	r30, 0x03	; 3
 62c:	a9 f0       	breq	.+42     	; 0x658 <Menu_Display+0x4c>
 62e:	e4 30       	cpi	r30, 0x04	; 4
 630:	e0 f4       	brcc	.+56     	; 0x66a <Menu_Display+0x5e>
 632:	e2 30       	cpi	r30, 0x02	; 2
 634:	29 f5       	brne	.+74     	; 0x680 <Menu_Display+0x74>
 636:	07 c0       	rjmp	.+14     	; 0x646 <Menu_Display+0x3a>
 638:	e7 30       	cpi	r30, 0x07	; 7
 63a:	01 f1       	breq	.+64     	; 0x67c <Menu_Display+0x70>
 63c:	e7 30       	cpi	r30, 0x07	; 7
 63e:	f0 f0       	brcs	.+60     	; 0x67c <Menu_Display+0x70>
 640:	e8 30       	cpi	r30, 0x08	; 8
 642:	f1 f4       	brne	.+60     	; 0x680 <Menu_Display+0x74>
 644:	1b c0       	rjmp	.+54     	; 0x67c <Menu_Display+0x70>
	{
		case MENU_TIME:
		{
			I2C_ReadTime(&clock->DS1307Time);
 646:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_ReadTime>
			Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 64a:	be 01       	movw	r22, r28
 64c:	6c 5e       	subi	r22, 0xEC	; 236
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	ce 01       	movw	r24, r28
 652:	0e 94 c9 03 	call	0x792	; 0x792 <Time_To_Buf>

		}
		break;
 656:	14 c0       	rjmp	.+40     	; 0x680 <Menu_Display+0x74>
		
		case MENU_DATE:
		{
			I2C_ReadTime(&clock->DS1307Time);
 658:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_ReadTime>
			Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 65c:	be 01       	movw	r22, r28
 65e:	6c 5e       	subi	r22, 0xEC	; 236
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	ce 01       	movw	r24, r28
 664:	0e 94 f5 03 	call	0x7ea	; 0x7ea <Date_To_Buf>
		}
		break;
 668:	0b c0       	rjmp	.+22     	; 0x680 <Menu_Display+0x74>

		case MENU_YEAR:
		{
			I2C_ReadTime(&clock->DS1307Time);
 66a:	0e 94 0e 01 	call	0x21c	; 0x21c <I2C_ReadTime>
			Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 66e:	be 01       	movw	r22, r28
 670:	6c 5e       	subi	r22, 0xEC	; 236
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	ce 01       	movw	r24, r28
 676:	0e 94 21 04 	call	0x842	; 0x842 <Year_To_Buf>
		}
		break;
 67a:	02 c0       	rjmp	.+4      	; 0x680 <Menu_Display+0x74>
		}
		break;

		case MENU_TUNE_YEAR:
		{
			clock->display_mask=blink_mask;
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	8a a7       	std	Y+42, r24	; 0x2a
		default:
		{
		}
		break;
	}
}
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	08 95       	ret

0000068a <Menu_Key>:

void Menu_Key(enKey key, stClock *clock) {
 68a:	28 2f       	mov	r18, r24
 68c:	cb 01       	movw	r24, r22
	switch (key) 
 68e:	24 30       	cpi	r18, 0x04	; 4
 690:	09 f4       	brne	.+2      	; 0x694 <Menu_Key+0xa>
 692:	53 c0       	rjmp	.+166    	; 0x73a <Menu_Key+0xb0>
 694:	25 30       	cpi	r18, 0x05	; 5
 696:	30 f4       	brcc	.+12     	; 0x6a4 <Menu_Key+0x1a>
 698:	21 30       	cpi	r18, 0x01	; 1
 69a:	59 f0       	breq	.+22     	; 0x6b2 <Menu_Key+0x28>
 69c:	23 30       	cpi	r18, 0x03	; 3
 69e:	09 f0       	breq	.+2      	; 0x6a2 <Menu_Key+0x18>
 6a0:	70 c0       	rjmp	.+224    	; 0x782 <Menu_Key+0xf8>
 6a2:	34 c0       	rjmp	.+104    	; 0x70c <Menu_Key+0x82>
 6a4:	25 30       	cpi	r18, 0x05	; 5
 6a6:	09 f4       	brne	.+2      	; 0x6aa <Menu_Key+0x20>
 6a8:	57 c0       	rjmp	.+174    	; 0x758 <Menu_Key+0xce>
 6aa:	26 30       	cpi	r18, 0x06	; 6
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <Menu_Key+0x26>
 6ae:	69 c0       	rjmp	.+210    	; 0x782 <Menu_Key+0xf8>
 6b0:	5e c0       	rjmp	.+188    	; 0x76e <Menu_Key+0xe4>
		}
		break;
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 6b2:	20 91 30 01 	lds	r18, 0x0130
 6b6:	30 91 31 01 	lds	r19, 0x0131
 6ba:	f9 01       	movw	r30, r18
 6bc:	38 96       	adiw	r30, 0x08	; 8
 6be:	e4 91       	lpm	r30, Z+
 6c0:	e4 30       	cpi	r30, 0x04	; 4
 6c2:	c1 f0       	breq	.+48     	; 0x6f4 <Menu_Key+0x6a>
 6c4:	e5 30       	cpi	r30, 0x05	; 5
 6c6:	30 f4       	brcc	.+12     	; 0x6d4 <Menu_Key+0x4a>
 6c8:	e2 30       	cpi	r30, 0x02	; 2
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <Menu_Key+0x5a>
 6cc:	e3 30       	cpi	r30, 0x03	; 3
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <Menu_Key+0x48>
 6d0:	58 c0       	rjmp	.+176    	; 0x782 <Menu_Key+0xf8>
 6d2:	0c c0       	rjmp	.+24     	; 0x6ec <Menu_Key+0x62>
 6d4:	e6 30       	cpi	r30, 0x06	; 6
 6d6:	a1 f0       	breq	.+40     	; 0x700 <Menu_Key+0x76>
 6d8:	e6 30       	cpi	r30, 0x06	; 6
 6da:	78 f0       	brcs	.+30     	; 0x6fa <Menu_Key+0x70>
 6dc:	e7 30       	cpi	r30, 0x07	; 7
 6de:	09 f0       	breq	.+2      	; 0x6e2 <Menu_Key+0x58>
 6e0:	50 c0       	rjmp	.+160    	; 0x782 <Menu_Key+0xf8>
 6e2:	11 c0       	rjmp	.+34     	; 0x706 <Menu_Key+0x7c>
			{
				case MENU_TIME:
				{
					Menu_Change(NEXT);
 6e4:	f9 01       	movw	r30, r18
 6e6:	25 91       	lpm	r18, Z+
 6e8:	34 91       	lpm	r19, Z+
 6ea:	3d c0       	rjmp	.+122    	; 0x766 <Menu_Key+0xdc>
				}
				break;

				case MENU_DATE:
				{
					Menu_Change(NEXT);
 6ec:	f9 01       	movw	r30, r18
 6ee:	25 91       	lpm	r18, Z+
 6f0:	34 91       	lpm	r19, Z+
 6f2:	39 c0       	rjmp	.+114    	; 0x766 <Menu_Key+0xdc>
				}
				break;

				case MENU_YEAR:
				{
					Menu_Change(&m_s1i1);
 6f4:	82 e7       	ldi	r24, 0x72	; 114
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	37 c0       	rjmp	.+110    	; 0x768 <Menu_Key+0xde>
				}
				break;
										
				case MENU_TUNE_TIME:
				{
					I2C_StoreTime(&clock->DS1307Time);
 6fa:	0e 94 9a 01 	call	0x334	; 0x334 <I2C_StoreTime>
				}
				break;
 6fe:	08 95       	ret


				case MENU_TUNE_DATE:
				{
					I2C_StoreDate(&clock->DS1307Time);
 700:	0e 94 c1 01 	call	0x382	; 0x382 <I2C_StoreDate>
				}
				break;
 704:	08 95       	ret


				case MENU_TUNE_YEAR:
				{
					I2C_StoreYear(&clock->DS1307Time);
 706:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_StoreYear>
				}
				break;
 70a:	08 95       	ret
		}
		break;
		//------------------------
		case KEY_CODE_C:
		{ 
			switch(SELECT)//пункт меню
 70c:	80 91 30 01 	lds	r24, 0x0130
 710:	90 91 31 01 	lds	r25, 0x0131
 714:	fc 01       	movw	r30, r24
 716:	38 96       	adiw	r30, 0x08	; 8
 718:	e4 91       	lpm	r30, Z+
 71a:	e5 30       	cpi	r30, 0x05	; 5
 71c:	29 f0       	breq	.+10     	; 0x728 <Menu_Key+0x9e>
 71e:	e5 30       	cpi	r30, 0x05	; 5
 720:	38 f0       	brcs	.+14     	; 0x730 <Menu_Key+0xa6>
 722:	e9 30       	cpi	r30, 0x09	; 9
 724:	28 f4       	brcc	.+10     	; 0x730 <Menu_Key+0xa6>
 726:	08 95       	ret
			{			
				case MENU_TUNE_TIME:
				{
					Menu_Change(NEXT);
 728:	fc 01       	movw	r30, r24
 72a:	25 91       	lpm	r18, Z+
 72c:	34 91       	lpm	r19, Z+
 72e:	1b c0       	rjmp	.+54     	; 0x766 <Menu_Key+0xdc>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 730:	02 96       	adiw	r24, 0x02	; 2
 732:	fc 01       	movw	r30, r24
 734:	25 91       	lpm	r18, Z+
 736:	34 91       	lpm	r19, Z+
 738:	16 c0       	rjmp	.+44     	; 0x766 <Menu_Key+0xdc>
		}
		break;
		//------------------------
		case KEY_CODE_D:
		{
			switch(SELECT)//пункт меню
 73a:	80 91 30 01 	lds	r24, 0x0130
 73e:	90 91 31 01 	lds	r25, 0x0131
 742:	fc 01       	movw	r30, r24
 744:	38 96       	adiw	r30, 0x08	; 8
 746:	e4 91       	lpm	r30, Z+
 748:	e5 50       	subi	r30, 0x05	; 5
 74a:	e4 30       	cpi	r30, 0x04	; 4
 74c:	d0 f0       	brcs	.+52     	; 0x782 <Menu_Key+0xf8>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 74e:	02 96       	adiw	r24, 0x02	; 2
 750:	fc 01       	movw	r30, r24
 752:	25 91       	lpm	r18, Z+
 754:	34 91       	lpm	r19, Z+
 756:	07 c0       	rjmp	.+14     	; 0x766 <Menu_Key+0xdc>
		break;
			
		//------------------------
		case KEY_CODE_AB:
		{ 
			Menu_Change(CHILD);		
 758:	e0 91 30 01 	lds	r30, 0x0130
 75c:	f0 91 31 01 	lds	r31, 0x0131
 760:	36 96       	adiw	r30, 0x06	; 6
 762:	25 91       	lpm	r18, Z+
 764:	34 91       	lpm	r19, Z+
 766:	c9 01       	movw	r24, r18
 768:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Menu_Change>
		}
		break;
 76c:	08 95       	ret
		//------------------------
		case KEY_CODE_CD:
		{
			Menu_Change(PARENT);
 76e:	e0 91 30 01 	lds	r30, 0x0130
 772:	f0 91 31 01 	lds	r31, 0x0131
 776:	34 96       	adiw	r30, 0x04	; 4
 778:	25 91       	lpm	r18, Z+
 77a:	34 91       	lpm	r19, Z+
 77c:	c9 01       	movw	r24, r18
 77e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Menu_Change>
 782:	08 95       	ret

00000784 <Menu_Init>:
	}
}
//---------------------------------------------------
void Menu_Init(void) 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 784:	82 e7       	ldi	r24, 0x72	; 114
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	90 93 31 01 	sts	0x0131, r25
 78c:	80 93 30 01 	sts	0x0130, r24
}
 790:	08 95       	ret

00000792 <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 792:	fc 01       	movw	r30, r24
 794:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 796:	82 81       	ldd	r24, Z+2	; 0x02
 798:	82 95       	swap	r24
 79a:	8f 70       	andi	r24, 0x0F	; 15
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	95 60       	ori	r25, 0x05	; 5
 7a0:	11 96       	adiw	r26, 0x01	; 1
 7a2:	9c 93       	st	X, r25
 7a4:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	8f 70       	andi	r24, 0x0F	; 15
 7ac:	90 70       	andi	r25, 0x00	; 0
 7ae:	94 60       	ori	r25, 0x04	; 4
 7b0:	13 96       	adiw	r26, 0x03	; 3
 7b2:	9c 93       	st	X, r25
 7b4:	8e 93       	st	-X, r24
 7b6:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 7b8:	8a e0       	ldi	r24, 0x0A	; 10
 7ba:	93 e0       	ldi	r25, 0x03	; 3
 7bc:	15 96       	adiw	r26, 0x05	; 5
 7be:	9c 93       	st	X, r25
 7c0:	8e 93       	st	-X, r24
 7c2:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 7c4:	81 81       	ldd	r24, Z+1	; 0x01
 7c6:	82 95       	swap	r24
 7c8:	8f 70       	andi	r24, 0x0F	; 15
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	92 60       	ori	r25, 0x02	; 2
 7ce:	17 96       	adiw	r26, 0x07	; 7
 7d0:	9c 93       	st	X, r25
 7d2:	8e 93       	st	-X, r24
 7d4:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 7d6:	81 81       	ldd	r24, Z+1	; 0x01
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	8f 70       	andi	r24, 0x0F	; 15
 7dc:	90 70       	andi	r25, 0x00	; 0
 7de:	91 60       	ori	r25, 0x01	; 1
 7e0:	19 96       	adiw	r26, 0x09	; 9
 7e2:	9c 93       	st	X, r25
 7e4:	8e 93       	st	-X, r24
 7e6:	18 97       	sbiw	r26, 0x08	; 8
}
 7e8:	08 95       	ret

000007ea <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 7ea:	fc 01       	movw	r30, r24
 7ec:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Date>>4);
 7ee:	84 81       	ldd	r24, Z+4	; 0x04
 7f0:	82 95       	swap	r24
 7f2:	8f 70       	andi	r24, 0x0F	; 15
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	95 60       	ori	r25, 0x05	; 5
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	9c 93       	st	X, r25
 7fc:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Date&0x0F);
 7fe:	84 81       	ldd	r24, Z+4	; 0x04
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	8f 70       	andi	r24, 0x0F	; 15
 804:	90 70       	andi	r25, 0x00	; 0
 806:	94 60       	ori	r25, 0x04	; 4
 808:	13 96       	adiw	r26, 0x03	; 3
 80a:	9c 93       	st	X, r25
 80c:	8e 93       	st	-X, r24
 80e:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0xFF);//"."
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	93 e0       	ldi	r25, 0x03	; 3
 814:	15 96       	adiw	r26, 0x05	; 5
 816:	9c 93       	st	X, r25
 818:	8e 93       	st	-X, r24
 81a:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Month>>4);
 81c:	85 81       	ldd	r24, Z+5	; 0x05
 81e:	82 95       	swap	r24
 820:	8f 70       	andi	r24, 0x0F	; 15
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	92 60       	ori	r25, 0x02	; 2
 826:	17 96       	adiw	r26, 0x07	; 7
 828:	9c 93       	st	X, r25
 82a:	8e 93       	st	-X, r24
 82c:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Month&0x0F);
 82e:	85 81       	ldd	r24, Z+5	; 0x05
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	8f 70       	andi	r24, 0x0F	; 15
 834:	90 70       	andi	r25, 0x00	; 0
 836:	91 60       	ori	r25, 0x01	; 1
 838:	19 96       	adiw	r26, 0x09	; 9
 83a:	9c 93       	st	X, r25
 83c:	8e 93       	st	-X, r24
 83e:	18 97       	sbiw	r26, 0x08	; 8
}
 840:	08 95       	ret

00000842 <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 842:	fc 01       	movw	r30, r24
 844:	db 01       	movw	r26, r22
	buf[0]=0x0500|(0xF);
 846:	8f e0       	ldi	r24, 0x0F	; 15
 848:	95 e0       	ldi	r25, 0x05	; 5
 84a:	11 96       	adiw	r26, 0x01	; 1
 84c:	9c 93       	st	X, r25
 84e:	8e 93       	st	-X, r24
	buf[1]=0x0400|(2);
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	94 e0       	ldi	r25, 0x04	; 4
 854:	13 96       	adiw	r26, 0x03	; 3
 856:	9c 93       	st	X, r25
 858:	8e 93       	st	-X, r24
 85a:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0);
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	93 e0       	ldi	r25, 0x03	; 3
 860:	15 96       	adiw	r26, 0x05	; 5
 862:	9c 93       	st	X, r25
 864:	8e 93       	st	-X, r24
 866:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Year>>4);
 868:	86 81       	ldd	r24, Z+6	; 0x06
 86a:	82 95       	swap	r24
 86c:	8f 70       	andi	r24, 0x0F	; 15
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	92 60       	ori	r25, 0x02	; 2
 872:	17 96       	adiw	r26, 0x07	; 7
 874:	9c 93       	st	X, r25
 876:	8e 93       	st	-X, r24
 878:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Year&0x0F);
 87a:	86 81       	ldd	r24, Z+6	; 0x06
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	8f 70       	andi	r24, 0x0F	; 15
 880:	90 70       	andi	r25, 0x00	; 0
 882:	91 60       	ori	r25, 0x01	; 1
 884:	19 96       	adiw	r26, 0x09	; 9
 886:	9c 93       	st	X, r25
 888:	8e 93       	st	-X, r24
 88a:	18 97       	sbiw	r26, 0x08	; 8
}
 88c:	08 95       	ret

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
