
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800102  00800102  00000872  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002dc  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001725  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000080b  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e14  00000000  00000000  000032b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000040c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000050c  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005b9  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001ab  00000000  00000000  00004d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <strNULL>:
	...

00000069 <Null_Menu>:
	...

00000073 <m_s1i1>:
  73:	7d 00 69 00 69 00 9b 00 02 00                       }.i.i.....

0000007d <m_s1i2>:
  7d:	87 00 73 00 69 00 a5 00 03 00                       ..s.i.....

00000087 <m_s1i3>:
  87:	91 00 7d 00 69 00 af 00 04 00                       ..}.i.....

00000091 <m_s1i4>:
  91:	69 00 87 00 69 00 69 00 08 00                       i...i.i...

0000009b <m_s2i1>:
  9b:	69 00 69 00 73 00 69 00 05 00                       i.i.s.i...

000000a5 <m_s3i1>:
  a5:	69 00 69 00 7d 00 69 00 06 00                       i.i.}.i...

000000af <m_s4i1>:
  af:	69 00 69 00 87 00 69 00 07 00 00                    i.i...i....

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d4 e0       	ldi	r29, 0x04	; 4
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	ec ed       	ldi	r30, 0xDC	; 220
  ce:	f7 e0       	ldi	r31, 0x07	; 7
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a2 30       	cpi	r26, 0x02	; 2
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a2 e0       	ldi	r26, 0x02	; 2
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a5 33       	cpi	r26, 0x35	; 53
  e8:	b1 07       	cpc	r27, r17
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	0e 94 2d 02 	call	0x45a	; 0x45a <main>
  f0:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	80 63       	ori	r24, 0x30	; 48
  fc:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	8f 7c       	andi	r24, 0xCF	; 207
 102:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
 10a:	10 92 b9 00 	sts	0x00B9, r1
}
 10e:	08 95       	ret

00000110 <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 110:	94 ea       	ldi	r25, 0xA4	; 164
 112:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 116:	90 91 bc 00 	lds	r25, 0x00BC
 11a:	97 ff       	sbrs	r25, 7
 11c:	fc cf       	rjmp	.-8      	; 0x116 <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 11e:	90 91 b9 00 	lds	r25, 0x00B9
 122:	98 7f       	andi	r25, 0xF8	; 248
 124:	98 30       	cpi	r25, 0x08	; 8
 126:	39 f5       	brne	.+78     	; 0x176 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 128:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 132:	80 91 bc 00 	lds	r24, 0x00BC
 136:	87 ff       	sbrs	r24, 7
 138:	fc cf       	rjmp	.-8      	; 0x132 <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 13a:	80 91 b9 00 	lds	r24, 0x00B9
 13e:	88 7f       	andi	r24, 0xF8	; 248
 140:	88 31       	cpi	r24, 0x18	; 24
 142:	c9 f4       	brne	.+50     	; 0x176 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 144:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 14e:	80 91 bc 00 	lds	r24, 0x00BC
 152:	87 ff       	sbrs	r24, 7
 154:	fc cf       	rjmp	.-8      	; 0x14e <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 156:	80 91 b9 00 	lds	r24, 0x00B9
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 32       	cpi	r24, 0x28	; 40
 15e:	59 f4       	brne	.+22     	; 0x176 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 160:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 16a:	80 91 bc 00 	lds	r24, 0x00BC
 16e:	87 ff       	sbrs	r24, 7
 170:	fc cf       	rjmp	.-8      	; 0x16a <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 172:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 176:	84 e9       	ldi	r24, 0x94	; 148
 178:	80 93 bc 00 	sts	0x00BC, r24
 17c:	08 95       	ret

0000017e <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 17e:	94 ea       	ldi	r25, 0xA4	; 164
 180:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 184:	90 91 bc 00 	lds	r25, 0x00BC
 188:	97 ff       	sbrs	r25, 7
 18a:	fc cf       	rjmp	.-8      	; 0x184 <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 18c:	90 91 b9 00 	lds	r25, 0x00B9
 190:	98 7f       	andi	r25, 0xF8	; 248
 192:	98 30       	cpi	r25, 0x08	; 8
 194:	09 f0       	breq	.+2      	; 0x198 <I2C_Read+0x1a>
 196:	43 c0       	rjmp	.+134    	; 0x21e <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 198:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 19c:	94 e8       	ldi	r25, 0x84	; 132
 19e:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1a2:	90 91 bc 00 	lds	r25, 0x00BC
 1a6:	97 ff       	sbrs	r25, 7
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 1aa:	90 91 b9 00 	lds	r25, 0x00B9
 1ae:	98 7f       	andi	r25, 0xF8	; 248
 1b0:	98 31       	cpi	r25, 0x18	; 24
 1b2:	a9 f5       	brne	.+106    	; 0x21e <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 1b4:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1b8:	94 e8       	ldi	r25, 0x84	; 132
 1ba:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1be:	90 91 bc 00 	lds	r25, 0x00BC
 1c2:	97 ff       	sbrs	r25, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1c6:	90 91 b9 00 	lds	r25, 0x00B9
 1ca:	98 7f       	andi	r25, 0xF8	; 248
 1cc:	98 32       	cpi	r25, 0x28	; 40
 1ce:	39 f5       	brne	.+78     	; 0x21e <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1d0:	94 ea       	ldi	r25, 0xA4	; 164
 1d2:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1d6:	90 91 bc 00 	lds	r25, 0x00BC
 1da:	97 ff       	sbrs	r25, 7
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1de:	90 91 b9 00 	lds	r25, 0x00B9
 1e2:	98 7f       	andi	r25, 0xF8	; 248
 1e4:	90 31       	cpi	r25, 0x10	; 16
 1e6:	d9 f4       	brne	.+54     	; 0x21e <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1f4:	80 91 bc 00 	lds	r24, 0x00BC
 1f8:	87 ff       	sbrs	r24, 7
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 1fc:	80 91 b9 00 	lds	r24, 0x00B9
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	80 34       	cpi	r24, 0x40	; 64
 204:	61 f4       	brne	.+24     	; 0x21e <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 20c:	80 91 bc 00 	lds	r24, 0x00BC
 210:	87 ff       	sbrs	r24, 7
 212:	fc cf       	rjmp	.-8      	; 0x20c <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 214:	80 91 b9 00 	lds	r24, 0x00B9
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	88 35       	cpi	r24, 0x58	; 88
 21c:	29 f0       	breq	.+10     	; 0x228 <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 21e:	84 e9       	ldi	r24, 0x94	; 148
 220:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
		
	}
	reg=TWDR;
 228:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 22c:	94 e9       	ldi	r25, 0x94	; 148
 22e:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 232:	08 95       	ret

00000234 <I2C_ReadTime>:

//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 23a:	80 ed       	ldi	r24, 0xD0	; 208
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 242:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	87 ec       	ldi	r24, 0xC7	; 199
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <I2C_ReadTime+0x14>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <I2C_ReadTime+0x1a>
 24e:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 250:	80 ed       	ldi	r24, 0xD0	; 208
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	87 ec       	ldi	r24, 0xC7	; 199
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <I2C_ReadTime+0x2a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <I2C_ReadTime+0x30>
 264:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 266:	80 ed       	ldi	r24, 0xD0	; 208
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	87 ec       	ldi	r24, 0xC7	; 199
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <I2C_ReadTime+0x40>
 278:	00 c0       	rjmp	.+0      	; 0x27a <I2C_ReadTime+0x46>
 27a:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 27c:	80 ed       	ldi	r24, 0xD0	; 208
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 284:	8b 83       	std	Y+3, r24	; 0x03
 286:	87 ec       	ldi	r24, 0xC7	; 199
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <I2C_ReadTime+0x56>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <I2C_ReadTime+0x5c>
 290:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 292:	80 ed       	ldi	r24, 0xD0	; 208
 294:	64 e0       	ldi	r22, 0x04	; 4
 296:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 29a:	8c 83       	std	Y+4, r24	; 0x04
 29c:	87 ec       	ldi	r24, 0xC7	; 199
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <I2C_ReadTime+0x6c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <I2C_ReadTime+0x72>
 2a6:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 2a8:	80 ed       	ldi	r24, 0xD0	; 208
 2aa:	65 e0       	ldi	r22, 0x05	; 5
 2ac:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 2b0:	8d 83       	std	Y+5, r24	; 0x05
 2b2:	87 ec       	ldi	r24, 0xC7	; 199
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <I2C_ReadTime+0x82>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <I2C_ReadTime+0x88>
 2bc:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	66 e0       	ldi	r22, 0x06	; 6
 2c2:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 2c6:	8e 83       	std	Y+6, r24	; 0x06
 2c8:	87 ec       	ldi	r24, 0xC7	; 199
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <I2C_ReadTime+0x98>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <I2C_ReadTime+0x9e>
 2d2:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 2d4:	80 ed       	ldi	r24, 0xD0	; 208
 2d6:	67 e0       	ldi	r22, 0x07	; 7
 2d8:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 2dc:	8f 83       	std	Y+7, r24	; 0x07
 2de:	87 ec       	ldi	r24, 0xC7	; 199
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <I2C_ReadTime+0xae>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <I2C_ReadTime+0xb4>
 2e8:	00 00       	nop
	_delay_us(100);
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 2f0:	80 ed       	ldi	r24, 0xD0	; 208
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Read>
 2f8:	ef ec       	ldi	r30, 0xCF	; 207
 2fa:	f7 e0       	ldi	r31, 0x07	; 7
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <I2C_DS1307Init+0xc>
 300:	00 c0       	rjmp	.+0      	; 0x302 <I2C_DS1307Init+0x12>
 302:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 304:	87 ff       	sbrs	r24, 7
 306:	21 c0       	rjmp	.+66     	; 0x34a <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 308:	80 ed       	ldi	r24, 0xD0	; 208
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	42 e1       	ldi	r20, 0x12	; 18
 30e:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 312:	87 ec       	ldi	r24, 0xC7	; 199
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <I2C_DS1307Init+0x26>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <I2C_DS1307Init+0x2c>
 31c:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 31e:	80 ed       	ldi	r24, 0xD0	; 208
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 328:	e7 ec       	ldi	r30, 0xC7	; 199
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <I2C_DS1307Init+0x3c>
 330:	00 c0       	rjmp	.+0      	; 0x332 <I2C_DS1307Init+0x42>
 332:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 334:	80 ed       	ldi	r24, 0xD0	; 208
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 33e:	87 ec       	ldi	r24, 0xC7	; 199
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <I2C_DS1307Init+0x52>
 346:	00 c0       	rjmp	.+0      	; 0x348 <I2C_DS1307Init+0x58>
 348:	00 00       	nop
 34a:	08 95       	ret

0000034c <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 352:	80 ed       	ldi	r24, 0xD0	; 208
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	4a 81       	ldd	r20, Y+2	; 0x02
 358:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 35c:	87 ec       	ldi	r24, 0xC7	; 199
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <I2C_StoreTime+0x14>
 364:	00 c0       	rjmp	.+0      	; 0x366 <I2C_StoreTime+0x1a>
 366:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 368:	80 ed       	ldi	r24, 0xD0	; 208
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	49 81       	ldd	r20, Y+1	; 0x01
 36e:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 372:	87 ec       	ldi	r24, 0xC7	; 199
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <I2C_StoreTime+0x2a>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <I2C_StoreTime+0x30>
 37c:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 37e:	80 ed       	ldi	r24, 0xD0	; 208
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 388:	87 ec       	ldi	r24, 0xC7	; 199
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <I2C_StoreTime+0x40>
 390:	00 c0       	rjmp	.+0      	; 0x392 <I2C_StoreTime+0x46>
 392:	00 00       	nop
	_delay_us(100);
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 3a0:	80 ed       	ldi	r24, 0xD0	; 208
 3a2:	65 e0       	ldi	r22, 0x05	; 5
 3a4:	4d 81       	ldd	r20, Y+5	; 0x05
 3a6:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 3aa:	87 ec       	ldi	r24, 0xC7	; 199
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <I2C_StoreDate+0x14>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <I2C_StoreDate+0x1a>
 3b4:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 3b6:	80 ed       	ldi	r24, 0xD0	; 208
 3b8:	64 e0       	ldi	r22, 0x04	; 4
 3ba:	4c 81       	ldd	r20, Y+4	; 0x04
 3bc:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 3c0:	87 ec       	ldi	r24, 0xC7	; 199
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <I2C_StoreDate+0x2a>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <I2C_StoreDate+0x30>
 3ca:	00 00       	nop
	_delay_us(100);	
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 3d2:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 3d4:	80 ed       	ldi	r24, 0xD0	; 208
 3d6:	66 e0       	ldi	r22, 0x06	; 6
 3d8:	46 81       	ldd	r20, Z+6	; 0x06
 3da:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write>
 3de:	87 ec       	ldi	r24, 0xC7	; 199
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <I2C_StoreYear+0x10>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <I2C_StoreYear+0x16>
 3e8:	00 00       	nop
	_delay_us(100);
}
 3ea:	08 95       	ret

000003ec <KBD_ReadKey>:

static uint8_t lastPIN, previousPIN;

enKey KBD_ReadKey(void) 
{
	lastPIN=(KBD_PIN & KBD_MASK);
 3ec:	89 b1       	in	r24, 0x09	; 9
 3ee:	80 7f       	andi	r24, 0xF0	; 240
 3f0:	80 93 02 01 	sts	0x0102, r24

	if((lastPIN!=KBD_MASK) && (lastPIN!=previousPIN))
 3f4:	80 3f       	cpi	r24, 0xF0	; 240
 3f6:	f1 f0       	breq	.+60     	; 0x434 <KBD_ReadKey+0x48>
 3f8:	90 91 03 01 	lds	r25, 0x0103
 3fc:	89 17       	cp	r24, r25
 3fe:	d1 f0       	breq	.+52     	; 0x434 <KBD_ReadKey+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	ef ec       	ldi	r30, 0xCF	; 207
 402:	f7 e0       	ldi	r31, 0x07	; 7
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <KBD_ReadKey+0x18>
 408:	00 c0       	rjmp	.+0      	; 0x40a <KBD_ReadKey+0x1e>
 40a:	00 00       	nop
	{
		_delay_ms(1);
		if((lastPIN!=KBD_MASK) && (lastPIN==(KBD_PIN & KBD_MASK)))
 40c:	80 3f       	cpi	r24, 0xF0	; 240
 40e:	71 f0       	breq	.+28     	; 0x42c <KBD_ReadKey+0x40>
 410:	29 b1       	in	r18, 0x09	; 9
 412:	48 2f       	mov	r20, r24
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	20 7f       	andi	r18, 0xF0	; 240
 41a:	30 70       	andi	r19, 0x00	; 0
 41c:	42 17       	cp	r20, r18
 41e:	53 07       	cpc	r21, r19
 420:	29 f4       	brne	.+10     	; 0x42c <KBD_ReadKey+0x40>
		{
			previousPIN=lastPIN;
 422:	80 93 03 01 	sts	0x0103, r24

			if(lastPIN==KEY_A)  return KEY_CODE_A;
 426:	88 23       	and	r24, r24
 428:	59 f4       	brne	.+22     	; 0x440 <KBD_ReadKey+0x54>
 42a:	09 c0       	rjmp	.+18     	; 0x43e <KBD_ReadKey+0x52>

			return lastPIN;
		}
		else
		{	
			lastPIN		=KBD_MASK;
 42c:	80 ef       	ldi	r24, 0xF0	; 240
 42e:	80 93 02 01 	sts	0x0102, r24
 432:	01 c0       	rjmp	.+2      	; 0x436 <KBD_ReadKey+0x4a>
			return KEY_CODE_NONE;	
		}
	}
	else
	{
		previousPIN = KBD_MASK;
 434:	80 ef       	ldi	r24, 0xF0	; 240
 436:	80 93 03 01 	sts	0x0103, r24
		return KEY_CODE_NONE;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
		_delay_ms(1);
		if((lastPIN!=KBD_MASK) && (lastPIN==(KBD_PIN & KBD_MASK)))
		{
			previousPIN=lastPIN;

			if(lastPIN==KEY_A)  return KEY_CODE_A;
 43e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		previousPIN = KBD_MASK;
		return KEY_CODE_NONE;
	}
}
 440:	08 95       	ret

00000442 <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 442:	8b b1       	in	r24, 0x0b	; 11
 444:	80 6f       	ori	r24, 0xF0	; 240
 446:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR &= ~ KBD_MASK;
 448:	8a b1       	in	r24, 0x0a	; 10
 44a:	8f 70       	andi	r24, 0x0F	; 15
 44c:	8a b9       	out	0x0a, r24	; 10

	lastPIN 	= KBD_MASK;
 44e:	80 ef       	ldi	r24, 0xF0	; 240
 450:	80 93 02 01 	sts	0x0102, r24
	previousPIN = KBD_MASK;
 454:	80 93 03 01 	sts	0x0103, r24
}
 458:	08 95       	ret

0000045a <main>:
#include "clock.h"


int main(void)
{
	Clock_Init();
 45a:	0e 94 97 02 	call	0x52e	; 0x52e <Clock_Init>
	sei();
 45e:	78 94       	sei

	while(1)
	{
		Clock_Cycle();
 460:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <Clock_Cycle>
 464:	fd cf       	rjmp	.-6      	; 0x460 <main+0x6>

00000466 <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 466:	84 b1       	in	r24, 0x04	; 4
 468:	8c 62       	ori	r24, 0x2C	; 44
 46a:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 46c:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 46e:	80 e5       	ldi	r24, 0x50	; 80
 470:	8c bd       	out	0x2c, r24	; 44

   SPSR = (1<<SPI2X);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	8d bd       	out	0x2d, r24	; 45
}
 476:	08 95       	ret

00000478 <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	00 d0       	rcall	.+0      	; 0x47e <LED_SPI_WriteWord+0x6>
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 486:	fe 01       	movw	r30, r28
 488:	31 96       	adiw	r30, 0x01	; 1
 48a:	81 81       	ldd	r24, Z+1	; 0x01
 48c:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 48e:	0d b4       	in	r0, 0x2d	; 45
 490:	07 fe       	sbrs	r0, 7
 492:	fd cf       	rjmp	.-6      	; 0x48e <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 494:	80 81       	ld	r24, Z
 496:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 498:	0d b4       	in	r0, 0x2d	; 45
 49a:	07 fe       	sbrs	r0, 7
 49c:	fd cf       	rjmp	.-6      	; 0x498 <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49e:	8a e1       	ldi	r24, 0x1A	; 26
 4a0:	8a 95       	dec	r24
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LED_SPI_WriteWord+0x28>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 4a6:	2a 9a       	sbi	0x05, 2	; 5
 4a8:	8a e1       	ldi	r24, 0x1A	; 26
 4aa:	8a 95       	dec	r24
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LED_SPI_WriteWord+0x32>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 4b0:	2a 98       	cbi	0x05, 2	; 5
 4b2:	8a e1       	ldi	r24, 0x1A	; 26
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LED_SPI_WriteWord+0x3c>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <LED_Out_Buf>:
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
 4c4:	df 92       	push	r13
 4c6:	ef 92       	push	r14
 4c8:	ff 92       	push	r15
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	d6 2e       	mov	r13, r22
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4d4:	08 2f       	mov	r16, r24
 4d6:	19 2f       	mov	r17, r25
 4d8:	c0 e0       	ldi	r28, 0x00	; 0
 4da:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4dc:	e4 2e       	mov	r14, r20
 4de:	ff 24       	eor	r15, r15
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4e0:	1b c0       	rjmp	.+54     	; 0x518 <__stack+0x19>
	{
		if(i>=5)
 4e2:	85 30       	cpi	r24, 0x05	; 5
 4e4:	88 f0       	brcs	.+34     	; 0x508 <__stack+0x9>
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
 4e6:	9e 01       	movw	r18, r28
 4e8:	25 50       	subi	r18, 0x05	; 5
 4ea:	30 40       	sbci	r19, 0x00	; 0

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4ec:	c7 01       	movw	r24, r14
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <LED_Out_Buf+0x30>
 4f0:	95 95       	asr	r25
 4f2:	87 95       	ror	r24
 4f4:	2a 95       	dec	r18
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <LED_Out_Buf+0x2c>
 4f8:	9c 01       	movw	r18, r24
 4fa:	f8 01       	movw	r30, r16
 4fc:	80 81       	ld	r24, Z
 4fe:	91 81       	ldd	r25, Z+1	; 0x01
 500:	20 fd       	sbrc	r18, 0
 502:	05 c0       	rjmp	.+10     	; 0x50e <__stack+0xf>
			{
				LED_SPI_WriteWord(out_buf[i]);
			}
			else
			{
				LED_SPI_WriteWord(out_buf[i]|0xF);
 504:	8f 60       	ori	r24, 0x0F	; 15
 506:	03 c0       	rjmp	.+6      	; 0x50e <__stack+0xf>
			}
		}
		else
		{
			LED_SPI_WriteWord(out_buf[i]);
 508:	f8 01       	movw	r30, r16
 50a:	80 81       	ld	r24, Z
 50c:	91 81       	ldd	r25, Z+1	; 0x01
 50e:	0e 94 3c 02 	call	0x478	; 0x478 <LED_SPI_WriteWord>
 512:	21 96       	adiw	r28, 0x01	; 1
 514:	0e 5f       	subi	r16, 0xFE	; 254
 516:	1f 4f       	sbci	r17, 0xFF	; 255
 518:	8c 2f       	mov	r24, r28
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 51a:	cd 15       	cp	r28, r13
 51c:	10 f3       	brcs	.-60     	; 0x4e2 <LED_Out_Buf+0x1e>
			LED_SPI_WriteWord(out_buf[i]);
		}
	}

	return;	
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	08 95       	ret

0000052e <Clock_Init>:

stClock clock;

void Clock_Init(void)
{
	Menu_Init();
 52e:	0e 94 b7 03 	call	0x76e	; 0x76e <Menu_Init>
	I2C_Init();
 532:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 536:	88 e0       	ldi	r24, 0x08	; 8
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_DS1307Init>
	KBD_Init();
 53e:	0e 94 21 02 	call	0x442	; 0x442 <KBD_Init>
	LED_SPI_Init();
 542:	0e 94 33 02 	call	0x466	; 0x466 <LED_SPI_Init>

	//clock.brightness=I2C_Read(SLA_ADDR,ADDR_BRIGHTNESS);
	clock.display_buf[0]=0xA0F;
 546:	8f e0       	ldi	r24, 0x0F	; 15
 548:	9a e0       	ldi	r25, 0x0A	; 10
 54a:	90 93 13 01 	sts	0x0113, r25
 54e:	80 93 12 01 	sts	0x0112, r24
	clock.display_buf[1]=0x9FF;
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	99 e0       	ldi	r25, 0x09	; 9
 556:	90 93 15 01 	sts	0x0115, r25
 55a:	80 93 14 01 	sts	0x0114, r24
	clock.display_buf[2]=0xB05;
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	9b e0       	ldi	r25, 0x0B	; 11
 562:	90 93 17 01 	sts	0x0117, r25
 566:	80 93 16 01 	sts	0x0116, r24
	clock.display_buf[3]=0xC01;		
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	9c e0       	ldi	r25, 0x0C	; 12
 56e:	90 93 19 01 	sts	0x0119, r25
 572:	80 93 18 01 	sts	0x0118, r24
	clock.display_buf[4]=0xF00;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	9f e0       	ldi	r25, 0x0F	; 15
 57a:	90 93 1b 01 	sts	0x011B, r25
 57e:	80 93 1a 01 	sts	0x011A, r24
	//clock.display_buf[3]=(0xA00|clock.brightness);
	
	clock.display_buf[5]=0x101;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	90 93 1d 01 	sts	0x011D, r25
 58a:	80 93 1c 01 	sts	0x011C, r24
	clock.display_buf[6]=0x202;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	92 e0       	ldi	r25, 0x02	; 2
 592:	90 93 1f 01 	sts	0x011F, r25
 596:	80 93 1e 01 	sts	0x011E, r24
	clock.display_buf[7]=0x303;
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	93 e0       	ldi	r25, 0x03	; 3
 59e:	90 93 21 01 	sts	0x0121, r25
 5a2:	80 93 20 01 	sts	0x0120, r24
	clock.display_buf[8]=0x404;
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	94 e0       	ldi	r25, 0x04	; 4
 5aa:	90 93 23 01 	sts	0x0123, r25
 5ae:	80 93 22 01 	sts	0x0122, r24
	clock.display_buf[9]=0x505;
 5b2:	85 e0       	ldi	r24, 0x05	; 5
 5b4:	95 e0       	ldi	r25, 0x05	; 5
 5b6:	90 93 25 01 	sts	0x0125, r25
 5ba:	80 93 24 01 	sts	0x0124, r24

	clock.display_mask	=0xFF;
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	80 93 32 01 	sts	0x0132, r24
}
 5c4:	08 95       	ret

000005c6 <Clock_Cycle>:
void Clock_Cycle(void)
{
	static uint16_t dispCounter=0;


	Menu_Key(KBD_ReadKey(), &clock);
 5c6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <KBD_ReadKey>
 5ca:	68 e0       	ldi	r22, 0x08	; 8
 5cc:	71 e0       	ldi	r23, 0x01	; 1
 5ce:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Menu_Key>


	if(dispCounter==DISP_COUNTER)
 5d2:	80 91 04 01 	lds	r24, 0x0104
 5d6:	90 91 05 01 	lds	r25, 0x0105
 5da:	23 e0       	ldi	r18, 0x03	; 3
 5dc:	88 3e       	cpi	r24, 0xE8	; 232
 5de:	92 07       	cpc	r25, r18
 5e0:	81 f4       	brne	.+32     	; 0x602 <Clock_Cycle+0x3c>
	{
		dispCounter=0;
 5e2:	10 92 05 01 	sts	0x0105, r1
 5e6:	10 92 04 01 	sts	0x0104, r1
		Menu_Display(&clock);
 5ea:	88 e0       	ldi	r24, 0x08	; 8
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 10 03 	call	0x620	; 0x620 <Menu_Display>
		LED_Out_Buf(clock.display_buf,LED_BUF_LEN,clock.display_mask);
 5f2:	82 e1       	ldi	r24, 0x12	; 18
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	6a e0       	ldi	r22, 0x0A	; 10
 5f8:	40 91 32 01 	lds	r20, 0x0132
 5fc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Out_Buf>
 600:	08 95       	ret
	}
	else
	{
		dispCounter++;
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	90 93 05 01 	sts	0x0105, r25
 608:	80 93 04 01 	sts	0x0104, r24
 60c:	08 95       	ret

0000060e <Menu_Change>:
//extern volatile unsigned char brightness;
//uint8_t selectMenu(msg_par par);

void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	89 36       	cpi	r24, 0x69	; 105
 612:	92 07       	cpc	r25, r18
 614:	21 f0       	breq	.+8      	; 0x61e <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 616:	90 93 34 01 	sts	0x0134, r25
 61a:	80 93 33 01 	sts	0x0133, r24
 61e:	08 95       	ret

00000620 <Menu_Display>:
}
//------------------------------------
void Menu_Display(stClock *clock) 
{
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	ec 01       	movw	r28, r24
//	menuItem* tempMenu;
//	tempMenu = (menuItem*)pgm_read_word(&selectedMenuItem);
	static unsigned char blink=100,blink_flag=0;
//	static unsigned char blink_mask=0xFF;
//wdt_reset();	
	if(blink<2)
 62a:	80 91 00 01 	lds	r24, 0x0100
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	20 f4       	brcc	.+8      	; 0x63a <Menu_Display+0x1a>
	{
		blink++;
 632:	8f 5f       	subi	r24, 0xFF	; 255
 634:	80 93 00 01 	sts	0x0100, r24
 638:	09 c0       	rjmp	.+18     	; 0x64c <Menu_Display+0x2c>
	}	
	else
	{
		blink_flag=!blink_flag;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 91 06 01 	lds	r25, 0x0106
 640:	91 11       	cpse	r25, r1
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	80 93 06 01 	sts	0x0106, r24
		blink=0;
 648:	10 92 00 01 	sts	0x0100, r1
	}

	switch(SELECT)
 64c:	e0 91 33 01 	lds	r30, 0x0133
 650:	f0 91 34 01 	lds	r31, 0x0134
 654:	38 96       	adiw	r30, 0x08	; 8
 656:	e4 91       	lpm	r30, Z+
 658:	e3 30       	cpi	r30, 0x03	; 3
 65a:	71 f0       	breq	.+28     	; 0x678 <Menu_Display+0x58>
 65c:	e4 30       	cpi	r30, 0x04	; 4
 65e:	b1 f0       	breq	.+44     	; 0x68c <Menu_Display+0x6c>
 660:	e2 30       	cpi	r30, 0x02	; 2
 662:	e9 f4       	brne	.+58     	; 0x69e <Menu_Display+0x7e>
	{
		case MENU_TIME:
		{
			I2C_ReadTime(&clock->DS1307Time);
 664:	ce 01       	movw	r24, r28
 666:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_ReadTime>
			Time_To_Buf(&clock->DS1307Time, clock->display_buf);
 66a:	be 01       	movw	r22, r28
 66c:	66 5f       	subi	r22, 0xF6	; 246
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	ce 01       	movw	r24, r28
 672:	0e 94 be 03 	call	0x77c	; 0x77c <Time_To_Buf>

		}
		break;
 676:	13 c0       	rjmp	.+38     	; 0x69e <Menu_Display+0x7e>
		
		case MENU_DATE:
		{
			I2C_ReadTime(&clock->DS1307Time);
 678:	ce 01       	movw	r24, r28
 67a:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_ReadTime>
			Date_To_Buf(&clock->DS1307Time, clock->display_buf);
 67e:	be 01       	movw	r22, r28
 680:	66 5f       	subi	r22, 0xF6	; 246
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	ce 01       	movw	r24, r28
 686:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Date_To_Buf>
		}
		break;
 68a:	09 c0       	rjmp	.+18     	; 0x69e <Menu_Display+0x7e>

		case MENU_YEAR:
		{
			I2C_ReadTime(&clock->DS1307Time);
 68c:	ce 01       	movw	r24, r28
 68e:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_ReadTime>
			Year_To_Buf(&clock->DS1307Time, clock->display_buf);
 692:	be 01       	movw	r22, r28
 694:	66 5f       	subi	r22, 0xF6	; 246
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	ce 01       	movw	r24, r28
 69a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Year_To_Buf>
		default:
		{
		}
		break;
	}
}
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	ff 90       	pop	r15
 6a4:	ef 90       	pop	r14
 6a6:	08 95       	ret

000006a8 <Menu_Key>:

void Menu_Key(enKey key, stClock *clock) {
 6a8:	28 2f       	mov	r18, r24
 6aa:	cb 01       	movw	r24, r22
	switch (key) 
 6ac:	23 30       	cpi	r18, 0x03	; 3
 6ae:	59 f1       	breq	.+86     	; 0x706 <Menu_Key+0x5e>
 6b0:	24 30       	cpi	r18, 0x04	; 4
 6b2:	20 f4       	brcc	.+8      	; 0x6bc <Menu_Key+0x14>
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <Menu_Key+0x12>
 6b8:	59 c0       	rjmp	.+178    	; 0x76c <Menu_Key+0xc4>
 6ba:	09 c0       	rjmp	.+18     	; 0x6ce <Menu_Key+0x26>
 6bc:	25 30       	cpi	r18, 0x05	; 5
 6be:	09 f4       	brne	.+2      	; 0x6c2 <Menu_Key+0x1a>
 6c0:	40 c0       	rjmp	.+128    	; 0x742 <Menu_Key+0x9a>
 6c2:	25 30       	cpi	r18, 0x05	; 5
 6c4:	78 f1       	brcs	.+94     	; 0x724 <Menu_Key+0x7c>
 6c6:	26 30       	cpi	r18, 0x06	; 6
 6c8:	09 f0       	breq	.+2      	; 0x6cc <Menu_Key+0x24>
 6ca:	50 c0       	rjmp	.+160    	; 0x76c <Menu_Key+0xc4>
 6cc:	45 c0       	rjmp	.+138    	; 0x758 <Menu_Key+0xb0>

		}
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 6ce:	e0 91 33 01 	lds	r30, 0x0133
 6d2:	f0 91 34 01 	lds	r31, 0x0134
 6d6:	38 96       	adiw	r30, 0x08	; 8
 6d8:	e4 91       	lpm	r30, Z+
 6da:	e6 30       	cpi	r30, 0x06	; 6
 6dc:	39 f0       	breq	.+14     	; 0x6ec <Menu_Key+0x44>
 6de:	e7 30       	cpi	r30, 0x07	; 7
 6e0:	41 f0       	breq	.+16     	; 0x6f2 <Menu_Key+0x4a>
 6e2:	e5 30       	cpi	r30, 0x05	; 5
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <Menu_Key+0x4e>
			{			
				case MENU_TUNE_TIME:
				{
					I2C_StoreTime(&clock->DS1307Time);
 6e6:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_StoreTime>
				}
				break;
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <Menu_Key+0x4e>


				case MENU_TUNE_DATE:
				{
					I2C_StoreDate(&clock->DS1307Time);
 6ec:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_StoreDate>
				}
				break;
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <Menu_Key+0x4e>


				case MENU_TUNE_YEAR:
				{
					I2C_StoreYear(&clock->DS1307Time);
 6f2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <I2C_StoreYear>
				{
					
				}
				break;				
			}
			Menu_Change(PREVIOUS);
 6f6:	e0 91 33 01 	lds	r30, 0x0133
 6fa:	f0 91 34 01 	lds	r31, 0x0134
 6fe:	32 96       	adiw	r30, 0x02	; 2
 700:	25 91       	lpm	r18, Z+
 702:	34 91       	lpm	r19, Z+
 704:	25 c0       	rjmp	.+74     	; 0x750 <Menu_Key+0xa8>
		}
		break;
		//------------------------
		case KEY_CODE_C:
		{ 
			switch(SELECT)//пункт меню
 706:	80 91 33 01 	lds	r24, 0x0133
 70a:	90 91 34 01 	lds	r25, 0x0134
 70e:	fc 01       	movw	r30, r24
 710:	38 96       	adiw	r30, 0x08	; 8
 712:	e4 91       	lpm	r30, Z+
 714:	e5 50       	subi	r30, 0x05	; 5
 716:	e4 30       	cpi	r30, 0x04	; 4
 718:	48 f1       	brcs	.+82     	; 0x76c <Menu_Key+0xc4>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 71a:	02 96       	adiw	r24, 0x02	; 2
 71c:	fc 01       	movw	r30, r24
 71e:	25 91       	lpm	r18, Z+
 720:	34 91       	lpm	r19, Z+
 722:	16 c0       	rjmp	.+44     	; 0x750 <Menu_Key+0xa8>
		}
		break;
		//------------------------
		case KEY_CODE_D:
		{
			switch(SELECT)//пункт меню
 724:	80 91 33 01 	lds	r24, 0x0133
 728:	90 91 34 01 	lds	r25, 0x0134
 72c:	fc 01       	movw	r30, r24
 72e:	38 96       	adiw	r30, 0x08	; 8
 730:	e4 91       	lpm	r30, Z+
 732:	e5 50       	subi	r30, 0x05	; 5
 734:	e4 30       	cpi	r30, 0x04	; 4
 736:	d0 f0       	brcs	.+52     	; 0x76c <Menu_Key+0xc4>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 738:	02 96       	adiw	r24, 0x02	; 2
 73a:	fc 01       	movw	r30, r24
 73c:	25 91       	lpm	r18, Z+
 73e:	34 91       	lpm	r19, Z+
 740:	07 c0       	rjmp	.+14     	; 0x750 <Menu_Key+0xa8>
		break;
			
		//------------------------
		case KEY_CODE_AB:
		{ 
			Menu_Change(CHILD);		
 742:	e0 91 33 01 	lds	r30, 0x0133
 746:	f0 91 34 01 	lds	r31, 0x0134
 74a:	36 96       	adiw	r30, 0x06	; 6
 74c:	25 91       	lpm	r18, Z+
 74e:	34 91       	lpm	r19, Z+
 750:	c9 01       	movw	r24, r18
 752:	0e 94 07 03 	call	0x60e	; 0x60e <Menu_Change>
		}
		break;
 756:	08 95       	ret
		//------------------------
		case KEY_CODE_CD:
		{
			Menu_Change(PARENT);
 758:	e0 91 33 01 	lds	r30, 0x0133
 75c:	f0 91 34 01 	lds	r31, 0x0134
 760:	34 96       	adiw	r30, 0x04	; 4
 762:	25 91       	lpm	r18, Z+
 764:	34 91       	lpm	r19, Z+
 766:	c9 01       	movw	r24, r18
 768:	0e 94 07 03 	call	0x60e	; 0x60e <Menu_Change>
 76c:	08 95       	ret

0000076e <Menu_Init>:
	}
}
//---------------------------------------------------
void Menu_Init(void) 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 76e:	83 e7       	ldi	r24, 0x73	; 115
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	90 93 34 01 	sts	0x0134, r25
 776:	80 93 33 01 	sts	0x0133, r24
}
 77a:	08 95       	ret

0000077c <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 77c:	fc 01       	movw	r30, r24
 77e:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 780:	82 81       	ldd	r24, Z+2	; 0x02
 782:	82 95       	swap	r24
 784:	8f 70       	andi	r24, 0x0F	; 15
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	95 60       	ori	r25, 0x05	; 5
 78a:	11 96       	adiw	r26, 0x01	; 1
 78c:	9c 93       	st	X, r25
 78e:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 790:	82 81       	ldd	r24, Z+2	; 0x02
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	8f 70       	andi	r24, 0x0F	; 15
 796:	90 70       	andi	r25, 0x00	; 0
 798:	94 60       	ori	r25, 0x04	; 4
 79a:	13 96       	adiw	r26, 0x03	; 3
 79c:	9c 93       	st	X, r25
 79e:	8e 93       	st	-X, r24
 7a0:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 7a2:	8a e0       	ldi	r24, 0x0A	; 10
 7a4:	93 e0       	ldi	r25, 0x03	; 3
 7a6:	15 96       	adiw	r26, 0x05	; 5
 7a8:	9c 93       	st	X, r25
 7aa:	8e 93       	st	-X, r24
 7ac:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 7ae:	81 81       	ldd	r24, Z+1	; 0x01
 7b0:	82 95       	swap	r24
 7b2:	8f 70       	andi	r24, 0x0F	; 15
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	92 60       	ori	r25, 0x02	; 2
 7b8:	17 96       	adiw	r26, 0x07	; 7
 7ba:	9c 93       	st	X, r25
 7bc:	8e 93       	st	-X, r24
 7be:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 7c0:	81 81       	ldd	r24, Z+1	; 0x01
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	8f 70       	andi	r24, 0x0F	; 15
 7c6:	90 70       	andi	r25, 0x00	; 0
 7c8:	91 60       	ori	r25, 0x01	; 1
 7ca:	19 96       	adiw	r26, 0x09	; 9
 7cc:	9c 93       	st	X, r25
 7ce:	8e 93       	st	-X, r24
 7d0:	18 97       	sbiw	r26, 0x08	; 8
}
 7d2:	08 95       	ret

000007d4 <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{

}
 7d4:	08 95       	ret

000007d6 <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{

}
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
