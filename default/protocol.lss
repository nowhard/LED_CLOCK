
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000009ac  00000a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800102  00800102  00000a42  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001195  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002fe  00000000  00000000  00001275  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001859  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000842  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f62  00000000  00000000  0000360e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00004570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000585  00000000  00000000  00004770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000073d  00000000  00000000  00004cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001cd  00000000  00000000  00005432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <Null_Menu>:
	...

00000072 <m_s1i1>:
  72:	7c 00 68 00 68 00 a4 00 02 00                       |.h.h.....

0000007c <m_s1i2>:
  7c:	86 00 72 00 68 00 ae 00 03 00                       ..r.h.....

00000086 <m_s1i3>:
  86:	90 00 7c 00 68 00 b8 00 04 00                       ..|.h.....

00000090 <m_s1i4>:
  90:	9a 00 86 00 68 00 68 00 08 00                       ....h.h...

0000009a <m_s1i5>:
  9a:	68 00 90 00 68 00 68 00 09 00                       h...h.h...

000000a4 <m_s2i1>:
  a4:	68 00 68 00 72 00 68 00 05 00                       h.h.r.h...

000000ae <m_s3i1>:
  ae:	68 00 68 00 7c 00 68 00 06 00                       h.h.|.h...

000000b8 <m_s4i1>:
  b8:	68 00 68 00 86 00 68 00 07 00                       h.h...h...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d4 e0       	ldi	r29, 0x04	; 4
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ec ea       	ldi	r30, 0xAC	; 172
  d6:	f9 e0       	ldi	r31, 0x09	; 9
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a2 30       	cpi	r26, 0x02	; 2
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a2 e0       	ldi	r26, 0x02	; 2
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	aa 33       	cpi	r26, 0x3A	; 58
  f0:	b1 07       	cpc	r27, r17
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 31 02 	call	0x462	; 0x462 <main>
  f8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
 100:	88 b1       	in	r24, 0x08	; 8
 102:	80 63       	ori	r24, 0x30	; 48
 104:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
 106:	87 b1       	in	r24, 0x07	; 7
 108:	8f 7c       	andi	r24, 0xCF	; 207
 10a:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
 112:	10 92 b9 00 	sts	0x00B9, r1
}
 116:	08 95       	ret

00000118 <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 118:	94 ea       	ldi	r25, 0xA4	; 164
 11a:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 11e:	90 91 bc 00 	lds	r25, 0x00BC
 122:	97 ff       	sbrs	r25, 7
 124:	fc cf       	rjmp	.-8      	; 0x11e <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 126:	90 91 b9 00 	lds	r25, 0x00B9
 12a:	98 7f       	andi	r25, 0xF8	; 248
 12c:	98 30       	cpi	r25, 0x08	; 8
 12e:	39 f5       	brne	.+78     	; 0x17e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 130:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 13a:	80 91 bc 00 	lds	r24, 0x00BC
 13e:	87 ff       	sbrs	r24, 7
 140:	fc cf       	rjmp	.-8      	; 0x13a <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 142:	80 91 b9 00 	lds	r24, 0x00B9
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	88 31       	cpi	r24, 0x18	; 24
 14a:	c9 f4       	brne	.+50     	; 0x17e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 14c:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 156:	80 91 bc 00 	lds	r24, 0x00BC
 15a:	87 ff       	sbrs	r24, 7
 15c:	fc cf       	rjmp	.-8      	; 0x156 <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 15e:	80 91 b9 00 	lds	r24, 0x00B9
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	88 32       	cpi	r24, 0x28	; 40
 166:	59 f4       	brne	.+22     	; 0x17e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 168:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 172:	80 91 bc 00 	lds	r24, 0x00BC
 176:	87 ff       	sbrs	r24, 7
 178:	fc cf       	rjmp	.-8      	; 0x172 <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 17a:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	80 93 bc 00 	sts	0x00BC, r24
 184:	08 95       	ret

00000186 <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 186:	94 ea       	ldi	r25, 0xA4	; 164
 188:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 18c:	90 91 bc 00 	lds	r25, 0x00BC
 190:	97 ff       	sbrs	r25, 7
 192:	fc cf       	rjmp	.-8      	; 0x18c <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 194:	90 91 b9 00 	lds	r25, 0x00B9
 198:	98 7f       	andi	r25, 0xF8	; 248
 19a:	98 30       	cpi	r25, 0x08	; 8
 19c:	09 f0       	breq	.+2      	; 0x1a0 <I2C_Read+0x1a>
 19e:	43 c0       	rjmp	.+134    	; 0x226 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 1a0:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1a4:	94 e8       	ldi	r25, 0x84	; 132
 1a6:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1aa:	90 91 bc 00 	lds	r25, 0x00BC
 1ae:	97 ff       	sbrs	r25, 7
 1b0:	fc cf       	rjmp	.-8      	; 0x1aa <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 1b2:	90 91 b9 00 	lds	r25, 0x00B9
 1b6:	98 7f       	andi	r25, 0xF8	; 248
 1b8:	98 31       	cpi	r25, 0x18	; 24
 1ba:	a9 f5       	brne	.+106    	; 0x226 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 1bc:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1c0:	94 e8       	ldi	r25, 0x84	; 132
 1c2:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1c6:	90 91 bc 00 	lds	r25, 0x00BC
 1ca:	97 ff       	sbrs	r25, 7
 1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1ce:	90 91 b9 00 	lds	r25, 0x00B9
 1d2:	98 7f       	andi	r25, 0xF8	; 248
 1d4:	98 32       	cpi	r25, 0x28	; 40
 1d6:	39 f5       	brne	.+78     	; 0x226 <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1d8:	94 ea       	ldi	r25, 0xA4	; 164
 1da:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1de:	90 91 bc 00 	lds	r25, 0x00BC
 1e2:	97 ff       	sbrs	r25, 7
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1e6:	90 91 b9 00 	lds	r25, 0x00B9
 1ea:	98 7f       	andi	r25, 0xF8	; 248
 1ec:	90 31       	cpi	r25, 0x10	; 16
 1ee:	d9 f4       	brne	.+54     	; 0x226 <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1f6:	84 e8       	ldi	r24, 0x84	; 132
 1f8:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1fc:	80 91 bc 00 	lds	r24, 0x00BC
 200:	87 ff       	sbrs	r24, 7
 202:	fc cf       	rjmp	.-8      	; 0x1fc <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 204:	80 91 b9 00 	lds	r24, 0x00B9
 208:	88 7f       	andi	r24, 0xF8	; 248
 20a:	80 34       	cpi	r24, 0x40	; 64
 20c:	61 f4       	brne	.+24     	; 0x226 <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 20e:	84 e8       	ldi	r24, 0x84	; 132
 210:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 214:	80 91 bc 00 	lds	r24, 0x00BC
 218:	87 ff       	sbrs	r24, 7
 21a:	fc cf       	rjmp	.-8      	; 0x214 <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 21c:	80 91 b9 00 	lds	r24, 0x00B9
 220:	88 7f       	andi	r24, 0xF8	; 248
 222:	88 35       	cpi	r24, 0x58	; 88
 224:	29 f0       	breq	.+10     	; 0x230 <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 226:	84 e9       	ldi	r24, 0x94	; 148
 228:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
		
	}
	reg=TWDR;
 230:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 234:	94 e9       	ldi	r25, 0x94	; 148
 236:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 23a:	08 95       	ret

0000023c <I2C_ReadTime>:

//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 242:	80 ed       	ldi	r24, 0xD0	; 208
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 24a:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	87 ec       	ldi	r24, 0xC7	; 199
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <I2C_ReadTime+0x14>
 254:	00 c0       	rjmp	.+0      	; 0x256 <I2C_ReadTime+0x1a>
 256:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 258:	80 ed       	ldi	r24, 0xD0	; 208
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	87 ec       	ldi	r24, 0xC7	; 199
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <I2C_ReadTime+0x2a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <I2C_ReadTime+0x30>
 26c:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 26e:	80 ed       	ldi	r24, 0xD0	; 208
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 276:	8a 83       	std	Y+2, r24	; 0x02
 278:	87 ec       	ldi	r24, 0xC7	; 199
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <I2C_ReadTime+0x40>
 280:	00 c0       	rjmp	.+0      	; 0x282 <I2C_ReadTime+0x46>
 282:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 284:	80 ed       	ldi	r24, 0xD0	; 208
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 28c:	8b 83       	std	Y+3, r24	; 0x03
 28e:	87 ec       	ldi	r24, 0xC7	; 199
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <I2C_ReadTime+0x56>
 296:	00 c0       	rjmp	.+0      	; 0x298 <I2C_ReadTime+0x5c>
 298:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 29a:	80 ed       	ldi	r24, 0xD0	; 208
 29c:	64 e0       	ldi	r22, 0x04	; 4
 29e:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 2a2:	8c 83       	std	Y+4, r24	; 0x04
 2a4:	87 ec       	ldi	r24, 0xC7	; 199
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <I2C_ReadTime+0x6c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <I2C_ReadTime+0x72>
 2ae:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 2b0:	80 ed       	ldi	r24, 0xD0	; 208
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 2b8:	8d 83       	std	Y+5, r24	; 0x05
 2ba:	87 ec       	ldi	r24, 0xC7	; 199
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <I2C_ReadTime+0x82>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <I2C_ReadTime+0x88>
 2c4:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 2c6:	80 ed       	ldi	r24, 0xD0	; 208
 2c8:	66 e0       	ldi	r22, 0x06	; 6
 2ca:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 2ce:	8e 83       	std	Y+6, r24	; 0x06
 2d0:	87 ec       	ldi	r24, 0xC7	; 199
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <I2C_ReadTime+0x98>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <I2C_ReadTime+0x9e>
 2da:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 2dc:	80 ed       	ldi	r24, 0xD0	; 208
 2de:	67 e0       	ldi	r22, 0x07	; 7
 2e0:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 2e4:	8f 83       	std	Y+7, r24	; 0x07
 2e6:	87 ec       	ldi	r24, 0xC7	; 199
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <I2C_ReadTime+0xae>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <I2C_ReadTime+0xb4>
 2f0:	00 00       	nop
	_delay_us(100);
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 2f8:	80 ed       	ldi	r24, 0xD0	; 208
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Read>
 300:	ef ec       	ldi	r30, 0xCF	; 207
 302:	f7 e0       	ldi	r31, 0x07	; 7
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <I2C_DS1307Init+0xc>
 308:	00 c0       	rjmp	.+0      	; 0x30a <I2C_DS1307Init+0x12>
 30a:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 30c:	87 ff       	sbrs	r24, 7
 30e:	21 c0       	rjmp	.+66     	; 0x352 <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 310:	80 ed       	ldi	r24, 0xD0	; 208
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	42 e1       	ldi	r20, 0x12	; 18
 316:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 31a:	87 ec       	ldi	r24, 0xC7	; 199
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <I2C_DS1307Init+0x26>
 322:	00 c0       	rjmp	.+0      	; 0x324 <I2C_DS1307Init+0x2c>
 324:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 326:	80 ed       	ldi	r24, 0xD0	; 208
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 330:	e7 ec       	ldi	r30, 0xC7	; 199
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <I2C_DS1307Init+0x3c>
 338:	00 c0       	rjmp	.+0      	; 0x33a <I2C_DS1307Init+0x42>
 33a:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 33c:	80 ed       	ldi	r24, 0xD0	; 208
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 346:	87 ec       	ldi	r24, 0xC7	; 199
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <I2C_DS1307Init+0x52>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <I2C_DS1307Init+0x58>
 350:	00 00       	nop
 352:	08 95       	ret

00000354 <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 35a:	80 ed       	ldi	r24, 0xD0	; 208
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	4a 81       	ldd	r20, Y+2	; 0x02
 360:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 364:	87 ec       	ldi	r24, 0xC7	; 199
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <I2C_StoreTime+0x14>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <I2C_StoreTime+0x1a>
 36e:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 370:	80 ed       	ldi	r24, 0xD0	; 208
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	49 81       	ldd	r20, Y+1	; 0x01
 376:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 37a:	87 ec       	ldi	r24, 0xC7	; 199
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <I2C_StoreTime+0x2a>
 382:	00 c0       	rjmp	.+0      	; 0x384 <I2C_StoreTime+0x30>
 384:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 386:	80 ed       	ldi	r24, 0xD0	; 208
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 390:	87 ec       	ldi	r24, 0xC7	; 199
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <I2C_StoreTime+0x40>
 398:	00 c0       	rjmp	.+0      	; 0x39a <I2C_StoreTime+0x46>
 39a:	00 00       	nop
	_delay_us(100);
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 3a8:	80 ed       	ldi	r24, 0xD0	; 208
 3aa:	65 e0       	ldi	r22, 0x05	; 5
 3ac:	4d 81       	ldd	r20, Y+5	; 0x05
 3ae:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 3b2:	87 ec       	ldi	r24, 0xC7	; 199
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <I2C_StoreDate+0x14>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <I2C_StoreDate+0x1a>
 3bc:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 3be:	80 ed       	ldi	r24, 0xD0	; 208
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	4c 81       	ldd	r20, Y+4	; 0x04
 3c4:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 3c8:	87 ec       	ldi	r24, 0xC7	; 199
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <I2C_StoreDate+0x2a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <I2C_StoreDate+0x30>
 3d2:	00 00       	nop
	_delay_us(100);	
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 3da:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 3dc:	80 ed       	ldi	r24, 0xD0	; 208
 3de:	66 e0       	ldi	r22, 0x06	; 6
 3e0:	46 81       	ldd	r20, Z+6	; 0x06
 3e2:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Write>
 3e6:	87 ec       	ldi	r24, 0xC7	; 199
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <I2C_StoreYear+0x10>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <I2C_StoreYear+0x16>
 3f0:	00 00       	nop
	_delay_us(100);
}
 3f2:	08 95       	ret

000003f4 <KBD_ReadPins>:

static uint8_t lastKEY=KEY_CODE_NONE, previousKEY=KEY_CODE_NONE;

uint8_t KBD_ReadPins(void)
{
	uint8_t key=0;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	48 99       	sbic	0x09, 0	; 9
 3f8:	80 e0       	ldi	r24, 0x00	; 0
	if((KBD_PIN & _BV(KBD_PIN_A))==0)
	{
		key|=(1<<0);
	}
	
	if((KBD_PIN & _BV(KBD_PIN_B))==0)
 3fa:	49 9b       	sbis	0x09, 1	; 9
	{
		key|=(1<<1);
 3fc:	82 60       	ori	r24, 0x02	; 2
	}
	
	if((KBD_PIN & _BV(KBD_PIN_C))==0)
 3fe:	4a 9b       	sbis	0x09, 2	; 9
	{
		key|=(1<<2);
 400:	84 60       	ori	r24, 0x04	; 4
	}
	
	if((KBD_PIN & _BV(KBD_PIN_D))==0)
 402:	4b 9b       	sbis	0x09, 3	; 9
	{
		key|=(1<<3);
 404:	88 60       	ori	r24, 0x08	; 8
	}	
	
	return key;	
}
 406:	08 95       	ret

00000408 <KBD_ReadKey>:

enKey KBD_ReadKey(void) 
{
 408:	1f 93       	push	r17
	lastKEY=KBD_ReadPins();
 40a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <KBD_ReadPins>
 40e:	80 93 02 01 	sts	0x0102, r24

	if(lastKEY!=KEY_CODE_NONE)
 412:	88 23       	and	r24, r24
 414:	c9 f0       	breq	.+50     	; 0x448 <KBD_ReadKey+0x40>
	{
		if(lastKEY!=previousKEY)
 416:	90 91 03 01 	lds	r25, 0x0103
 41a:	89 17       	cp	r24, r25
 41c:	b9 f0       	breq	.+46     	; 0x44c <KBD_ReadKey+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	30 e7       	ldi	r19, 0x70	; 112
 422:	42 e0       	ldi	r20, 0x02	; 2
 424:	21 50       	subi	r18, 0x01	; 1
 426:	30 40       	sbci	r19, 0x00	; 0
 428:	40 40       	sbci	r20, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <KBD_ReadKey+0x1c>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <KBD_ReadKey+0x26>
 42e:	00 00       	nop
		{
			_delay_ms(100);
			if((lastKEY!=KEY_CODE_NONE) && (lastKEY==KBD_ReadPins()))
 430:	18 2f       	mov	r17, r24
 432:	88 23       	and	r24, r24
 434:	39 f0       	breq	.+14     	; 0x444 <KBD_ReadKey+0x3c>
 436:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <KBD_ReadPins>
 43a:	18 17       	cp	r17, r24
 43c:	19 f4       	brne	.+6      	; 0x444 <KBD_ReadKey+0x3c>
			{
				previousKEY=lastKEY;
 43e:	10 93 03 01 	sts	0x0103, r17
				return lastKEY;
 442:	05 c0       	rjmp	.+10     	; 0x44e <KBD_ReadKey+0x46>
			}
			else
			{	
				lastKEY		= KEY_CODE_NONE;
 444:	10 92 02 01 	sts	0x0102, r1
			return KEY_CODE_NONE;
		}
	}
	else
	{
		previousKEY = KEY_CODE_NONE;
 448:	10 92 03 01 	sts	0x0103, r1
				return KEY_CODE_NONE;	
			}
		}
		else
		{
			return KEY_CODE_NONE;
 44c:	10 e0       	ldi	r17, 0x00	; 0
	{
		previousKEY = KEY_CODE_NONE;
		return KEY_CODE_NONE;
	}

}
 44e:	81 2f       	mov	r24, r17
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 454:	8b b1       	in	r24, 0x0b	; 11
 456:	8f 60       	ori	r24, 0x0F	; 15
 458:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR  &= ~ KBD_MASK;
 45a:	8a b1       	in	r24, 0x0a	; 10
 45c:	80 7f       	andi	r24, 0xF0	; 240
 45e:	8a b9       	out	0x0a, r24	; 10
}
 460:	08 95       	ret

00000462 <main>:
#include "clock.h"


int main(void)
{
	Clock_Init();
 462:	0e 94 9a 02 	call	0x534	; 0x534 <Clock_Init>
	//sei();

	while(1)
	{
		Clock_Cycle();
 466:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Clock_Cycle>
 46a:	fd cf       	rjmp	.-6      	; 0x466 <main+0x4>

0000046c <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 46c:	84 b1       	in	r24, 0x04	; 4
 46e:	8c 62       	ori	r24, 0x2C	; 44
 470:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 472:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 474:	80 e5       	ldi	r24, 0x50	; 80
 476:	8c bd       	out	0x2c, r24	; 44

   SPSR = (1<<SPI2X);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	8d bd       	out	0x2d, r24	; 45
}
 47c:	08 95       	ret

0000047e <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 47e:	df 93       	push	r29
 480:	cf 93       	push	r28
 482:	00 d0       	rcall	.+0      	; 0x484 <LED_SPI_WriteWord+0x6>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	9a 83       	std	Y+2, r25	; 0x02
 48a:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 48c:	fe 01       	movw	r30, r28
 48e:	31 96       	adiw	r30, 0x01	; 1
 490:	81 81       	ldd	r24, Z+1	; 0x01
 492:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 494:	0d b4       	in	r0, 0x2d	; 45
 496:	07 fe       	sbrs	r0, 7
 498:	fd cf       	rjmp	.-6      	; 0x494 <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 49a:	80 81       	ld	r24, Z
 49c:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 49e:	0d b4       	in	r0, 0x2d	; 45
 4a0:	07 fe       	sbrs	r0, 7
 4a2:	fd cf       	rjmp	.-6      	; 0x49e <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	8a e1       	ldi	r24, 0x1A	; 26
 4a6:	8a 95       	dec	r24
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LED_SPI_WriteWord+0x28>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 4ac:	2a 9a       	sbi	0x05, 2	; 5
 4ae:	8a e1       	ldi	r24, 0x1A	; 26
 4b0:	8a 95       	dec	r24
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LED_SPI_WriteWord+0x32>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 4b6:	2a 98       	cbi	0x05, 2	; 5
 4b8:	8a e1       	ldi	r24, 0x1A	; 26
 4ba:	8a 95       	dec	r24
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LED_SPI_WriteWord+0x3c>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	cf 91       	pop	r28
 4c6:	df 91       	pop	r29
 4c8:	08 95       	ret

000004ca <LED_Out_Buf>:
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	d6 2e       	mov	r13, r22
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4da:	08 2f       	mov	r16, r24
 4dc:	19 2f       	mov	r17, r25
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4e2:	e4 2e       	mov	r14, r20
 4e4:	ff 24       	eor	r15, r15
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4e6:	1b c0       	rjmp	.+54     	; 0x51e <__stack+0x1f>
	{
		if(i>=5)
 4e8:	85 30       	cpi	r24, 0x05	; 5
 4ea:	88 f0       	brcs	.+34     	; 0x50e <__stack+0xf>
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
 4ec:	9e 01       	movw	r18, r28
 4ee:	25 50       	subi	r18, 0x05	; 5
 4f0:	30 40       	sbci	r19, 0x00	; 0

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4f2:	c7 01       	movw	r24, r14
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <LED_Out_Buf+0x30>
 4f6:	95 95       	asr	r25
 4f8:	87 95       	ror	r24
 4fa:	2a 95       	dec	r18
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <LED_Out_Buf+0x2c>
 4fe:	9c 01       	movw	r18, r24
 500:	f8 01       	movw	r30, r16
 502:	80 81       	ld	r24, Z
 504:	91 81       	ldd	r25, Z+1	; 0x01
 506:	20 fd       	sbrc	r18, 0
 508:	05 c0       	rjmp	.+10     	; 0x514 <__stack+0x15>
			{
				LED_SPI_WriteWord(out_buf[i]);
			}
			else
			{
				LED_SPI_WriteWord(out_buf[i]|0xF);
 50a:	8f 60       	ori	r24, 0x0F	; 15
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__stack+0x15>
			}
		}
		else
		{
			LED_SPI_WriteWord(out_buf[i]);
 50e:	f8 01       	movw	r30, r16
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_SPI_WriteWord>
 518:	21 96       	adiw	r28, 0x01	; 1
 51a:	0e 5f       	subi	r16, 0xFE	; 254
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	8c 2f       	mov	r24, r28
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 520:	cd 15       	cp	r28, r13
 522:	10 f3       	brcs	.-60     	; 0x4e8 <LED_Out_Buf+0x1e>
			LED_SPI_WriteWord(out_buf[i]);
		}
	}

	return;	
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	08 95       	ret

00000534 <Clock_Init>:

stClock clock;

void Clock_Init(void)
{
	Menu_Init();
 534:	0e 94 3d 04 	call	0x87a	; 0x87a <Menu_Init>
	I2C_Init();
 538:	0e 94 80 00 	call	0x100	; 0x100 <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 53c:	89 e0       	ldi	r24, 0x09	; 9
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <I2C_DS1307Init>
	KBD_Init();
 544:	0e 94 2a 02 	call	0x454	; 0x454 <KBD_Init>
	LED_SPI_Init();
 548:	0e 94 36 02 	call	0x46c	; 0x46c <LED_SPI_Init>

	//clock.brightness=I2C_Read(SLA_ADDR,ADDR_BRIGHTNESS);
	clock.display_buf[0]=0xA0F;
 54c:	8f e0       	ldi	r24, 0x0F	; 15
 54e:	9a e0       	ldi	r25, 0x0A	; 10
 550:	90 93 18 01 	sts	0x0118, r25
 554:	80 93 17 01 	sts	0x0117, r24
	clock.display_buf[1]=0x9FF;
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	99 e0       	ldi	r25, 0x09	; 9
 55c:	90 93 1a 01 	sts	0x011A, r25
 560:	80 93 19 01 	sts	0x0119, r24
	clock.display_buf[2]=0xB05;
 564:	85 e0       	ldi	r24, 0x05	; 5
 566:	9b e0       	ldi	r25, 0x0B	; 11
 568:	90 93 1c 01 	sts	0x011C, r25
 56c:	80 93 1b 01 	sts	0x011B, r24
	clock.display_buf[3]=0xC01;		
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	9c e0       	ldi	r25, 0x0C	; 12
 574:	90 93 1e 01 	sts	0x011E, r25
 578:	80 93 1d 01 	sts	0x011D, r24
	clock.display_buf[4]=0xF00;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	9f e0       	ldi	r25, 0x0F	; 15
 580:	90 93 20 01 	sts	0x0120, r25
 584:	80 93 1f 01 	sts	0x011F, r24
	//clock.display_buf[3]=(0xA00|clock.brightness);
	
	clock.display_buf[5]=0x101;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	90 93 22 01 	sts	0x0122, r25
 590:	80 93 21 01 	sts	0x0121, r24
	clock.display_buf[6]=0x202;
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	90 93 24 01 	sts	0x0124, r25
 59c:	80 93 23 01 	sts	0x0123, r24
	clock.display_buf[7]=0x303;
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	93 e0       	ldi	r25, 0x03	; 3
 5a4:	90 93 26 01 	sts	0x0126, r25
 5a8:	80 93 25 01 	sts	0x0125, r24
	clock.display_buf[8]=0x404;
 5ac:	84 e0       	ldi	r24, 0x04	; 4
 5ae:	94 e0       	ldi	r25, 0x04	; 4
 5b0:	90 93 28 01 	sts	0x0128, r25
 5b4:	80 93 27 01 	sts	0x0127, r24
	clock.display_buf[9]=0x505;
 5b8:	85 e0       	ldi	r24, 0x05	; 5
 5ba:	95 e0       	ldi	r25, 0x05	; 5
 5bc:	90 93 2a 01 	sts	0x012A, r25
 5c0:	80 93 29 01 	sts	0x0129, r24

	clock.display_mask	=0xFF;
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	80 93 37 01 	sts	0x0137, r24
}
 5ca:	08 95       	ret

000005cc <Clock_Cycle>:

void Clock_Cycle(void)
{
	static uint16_t dispCounter=0;

	Menu_Key(KBD_ReadKey(), &clock);
 5cc:	0e 94 04 02 	call	0x408	; 0x408 <KBD_ReadKey>
 5d0:	69 e0       	ldi	r22, 0x09	; 9
 5d2:	71 e0       	ldi	r23, 0x01	; 1
 5d4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <Menu_Key>

	if(dispCounter==DISP_COUNTER)
 5d8:	80 91 04 01 	lds	r24, 0x0104
 5dc:	90 91 05 01 	lds	r25, 0x0105
 5e0:	23 e0       	ldi	r18, 0x03	; 3
 5e2:	88 3e       	cpi	r24, 0xE8	; 232
 5e4:	92 07       	cpc	r25, r18
 5e6:	81 f4       	brne	.+32     	; 0x608 <Clock_Cycle+0x3c>
	{
		dispCounter=0;
 5e8:	10 92 05 01 	sts	0x0105, r1
 5ec:	10 92 04 01 	sts	0x0104, r1
		Menu_Display(&clock);
 5f0:	89 e0       	ldi	r24, 0x09	; 9
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 13 03 	call	0x626	; 0x626 <Menu_Display>
		LED_Out_Buf(clock.display_buf,LED_BUF_LEN,clock.display_mask);
 5f8:	87 e1       	ldi	r24, 0x17	; 23
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	6a e0       	ldi	r22, 0x0A	; 10
 5fe:	40 91 37 01 	lds	r20, 0x0137
 602:	0e 94 65 02 	call	0x4ca	; 0x4ca <LED_Out_Buf>
 606:	08 95       	ret
	}
	else
	{
		dispCounter++;
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 05 01 	sts	0x0105, r25
 60e:	80 93 04 01 	sts	0x0104, r24
 612:	08 95       	ret

00000614 <Menu_Change>:
MAKE_MENU(m_s4i1,  NULL_ENTRY,NULL_ENTRY,  m_s1i3,     NULL_ENTRY,   MENU_TUNE_YEAR, 		"");


void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	88 36       	cpi	r24, 0x68	; 104
 618:	92 07       	cpc	r25, r18
 61a:	21 f0       	breq	.+8      	; 0x624 <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 61c:	90 93 39 01 	sts	0x0139, r25
 620:	80 93 38 01 	sts	0x0138, r24
 624:	08 95       	ret

00000626 <Menu_Display>:
}

#define BLINK_CONST		30
//------------------------------------
void Menu_Display(stClock *clock) 
{
 626:	ef 92       	push	r14
 628:	ff 92       	push	r15
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	ec 01       	movw	r28, r24
	static uint8_t blink_mask=0xFF;
	static uint16_t blink_counter=0;

//wdt_reset();	
	if(blink_counter<BLINK_CONST)
 630:	80 91 06 01 	lds	r24, 0x0106
 634:	90 91 07 01 	lds	r25, 0x0107
 638:	8e 31       	cpi	r24, 0x1E	; 30
 63a:	91 05       	cpc	r25, r1
 63c:	30 f4       	brcc	.+12     	; 0x64a <Menu_Display+0x24>
	{
		blink_counter++;
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	90 93 07 01 	sts	0x0107, r25
 644:	80 93 06 01 	sts	0x0106, r24
 648:	09 c0       	rjmp	.+18     	; 0x65c <Menu_Display+0x36>
	}	
	else
	{
		blink_counter=0;
 64a:	10 92 07 01 	sts	0x0107, r1
 64e:	10 92 06 01 	sts	0x0106, r1
		blink_mask=~blink_mask;
 652:	80 91 00 01 	lds	r24, 0x0100
 656:	80 95       	com	r24
 658:	80 93 00 01 	sts	0x0100, r24
	}


	switch(SELECT)
 65c:	e0 91 38 01 	lds	r30, 0x0138
 660:	f0 91 39 01 	lds	r31, 0x0139
 664:	38 96       	adiw	r30, 0x08	; 8
 666:	e4 91       	lpm	r30, Z+
 668:	e5 30       	cpi	r30, 0x05	; 5
 66a:	b1 f1       	breq	.+108    	; 0x6d8 <Menu_Display+0xb2>
 66c:	e6 30       	cpi	r30, 0x06	; 6
 66e:	38 f4       	brcc	.+14     	; 0x67e <Menu_Display+0x58>
 670:	e3 30       	cpi	r30, 0x03	; 3
 672:	d1 f0       	breq	.+52     	; 0x6a8 <Menu_Display+0x82>
 674:	e4 30       	cpi	r30, 0x04	; 4
 676:	20 f5       	brcc	.+72     	; 0x6c0 <Menu_Display+0x9a>
 678:	e2 30       	cpi	r30, 0x02	; 2
 67a:	89 f5       	brne	.+98     	; 0x6de <Menu_Display+0xb8>
 67c:	09 c0       	rjmp	.+18     	; 0x690 <Menu_Display+0x6a>
 67e:	e7 30       	cpi	r30, 0x07	; 7
 680:	59 f1       	breq	.+86     	; 0x6d8 <Menu_Display+0xb2>
 682:	e7 30       	cpi	r30, 0x07	; 7
 684:	48 f1       	brcs	.+82     	; 0x6d8 <Menu_Display+0xb2>
 686:	e8 30       	cpi	r30, 0x08	; 8
 688:	39 f1       	breq	.+78     	; 0x6d8 <Menu_Display+0xb2>
 68a:	e9 30       	cpi	r30, 0x09	; 9
 68c:	41 f5       	brne	.+80     	; 0x6de <Menu_Display+0xb8>
 68e:	24 c0       	rjmp	.+72     	; 0x6d8 <Menu_Display+0xb2>
	{
		case MENU_TIME:
		{
			I2C_ReadTime(&clock->DS1307Time);
 690:	ce 01       	movw	r24, r28
 692:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_ReadTime>
			clock->display_mask=0xFF;
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	8e a7       	std	Y+46, r24	; 0x2e
			Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 69a:	be 01       	movw	r22, r28
 69c:	68 5e       	subi	r22, 0xE8	; 232
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	ce 01       	movw	r24, r28
 6a2:	0e 94 44 04 	call	0x888	; 0x888 <Time_To_Buf>

		}
		break;
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <Menu_Display+0xb8>
		
		case MENU_DATE:
		{
			I2C_ReadTime(&clock->DS1307Time);
 6a8:	ce 01       	movw	r24, r28
 6aa:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_ReadTime>
			clock->display_mask=0xFF;
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	8e a7       	std	Y+46, r24	; 0x2e
			Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 6b2:	be 01       	movw	r22, r28
 6b4:	68 5e       	subi	r22, 0xE8	; 232
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	ce 01       	movw	r24, r28
 6ba:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Date_To_Buf>
		}
		break;
 6be:	0f c0       	rjmp	.+30     	; 0x6de <Menu_Display+0xb8>

		case MENU_YEAR:
		{
			I2C_ReadTime(&clock->DS1307Time);
 6c0:	ce 01       	movw	r24, r28
 6c2:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_ReadTime>
			clock->display_mask=0xFF;
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	8e a7       	std	Y+46, r24	; 0x2e
			Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 6ca:	be 01       	movw	r22, r28
 6cc:	68 5e       	subi	r22, 0xE8	; 232
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	ce 01       	movw	r24, r28
 6d2:	0e 94 9c 04 	call	0x938	; 0x938 <Year_To_Buf>
		}
		break;
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <Menu_Display+0xb8>
		}
		break;

		case MENU_TUNE_YEAR:
		{
			clock->display_mask=blink_mask;
 6d8:	80 91 00 01 	lds	r24, 0x0100
 6dc:	8e a7       	std	Y+46, r24	; 0x2e
		default:
		{
		}
		break;
	}
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	08 95       	ret

000006e8 <Menu_Key>:

void Menu_Key(enKey key, stClock *clock) {
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	eb 01       	movw	r28, r22
	switch (key) 
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <Menu_Key+0xc>
 6f2:	b0 c0       	rjmp	.+352    	; 0x854 <Menu_Key+0x16c>
 6f4:	84 30       	cpi	r24, 0x04	; 4
 6f6:	30 f4       	brcc	.+12     	; 0x704 <Menu_Key+0x1c>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	71 f0       	breq	.+28     	; 0x718 <Menu_Key+0x30>
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	09 f0       	breq	.+2      	; 0x702 <Menu_Key+0x1a>
 700:	b9 c0       	rjmp	.+370    	; 0x874 <Menu_Key+0x18c>
 702:	3d c0       	rjmp	.+122    	; 0x77e <Menu_Key+0x96>
 704:	88 30       	cpi	r24, 0x08	; 8
 706:	09 f4       	brne	.+2      	; 0x70a <Menu_Key+0x22>
 708:	9d c0       	rjmp	.+314    	; 0x844 <Menu_Key+0x15c>
 70a:	8c 30       	cpi	r24, 0x0C	; 12
 70c:	09 f4       	brne	.+2      	; 0x710 <Menu_Key+0x28>
 70e:	ae c0       	rjmp	.+348    	; 0x86c <Menu_Key+0x184>
 710:	84 30       	cpi	r24, 0x04	; 4
 712:	09 f0       	breq	.+2      	; 0x716 <Menu_Key+0x2e>
 714:	af c0       	rjmp	.+350    	; 0x874 <Menu_Key+0x18c>
 716:	66 c0       	rjmp	.+204    	; 0x7e4 <Menu_Key+0xfc>
		}
		break;
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 718:	80 91 38 01 	lds	r24, 0x0138
 71c:	90 91 39 01 	lds	r25, 0x0139
 720:	fc 01       	movw	r30, r24
 722:	38 96       	adiw	r30, 0x08	; 8
 724:	e4 91       	lpm	r30, Z+
 726:	e4 30       	cpi	r30, 0x04	; 4
 728:	d9 f0       	breq	.+54     	; 0x760 <Menu_Key+0x78>
 72a:	e5 30       	cpi	r30, 0x05	; 5
 72c:	30 f4       	brcc	.+12     	; 0x73a <Menu_Key+0x52>
 72e:	e2 30       	cpi	r30, 0x02	; 2
 730:	61 f0       	breq	.+24     	; 0x74a <Menu_Key+0x62>
 732:	e3 30       	cpi	r30, 0x03	; 3
 734:	09 f0       	breq	.+2      	; 0x738 <Menu_Key+0x50>
 736:	9e c0       	rjmp	.+316    	; 0x874 <Menu_Key+0x18c>
 738:	0c c0       	rjmp	.+24     	; 0x752 <Menu_Key+0x6a>
 73a:	e6 30       	cpi	r30, 0x06	; 6
 73c:	a1 f0       	breq	.+40     	; 0x766 <Menu_Key+0x7e>
 73e:	e6 30       	cpi	r30, 0x06	; 6
 740:	60 f0       	brcs	.+24     	; 0x75a <Menu_Key+0x72>
 742:	e7 30       	cpi	r30, 0x07	; 7
 744:	09 f0       	breq	.+2      	; 0x748 <Menu_Key+0x60>
 746:	96 c0       	rjmp	.+300    	; 0x874 <Menu_Key+0x18c>
 748:	14 c0       	rjmp	.+40     	; 0x772 <Menu_Key+0x8a>
			{
				case MENU_TIME:
				{
					Menu_Change(NEXT);
 74a:	fc 01       	movw	r30, r24
 74c:	25 91       	lpm	r18, Z+
 74e:	34 91       	lpm	r19, Z+
 750:	8b c0       	rjmp	.+278    	; 0x868 <Menu_Key+0x180>
				}
				break;

				case MENU_DATE:
				{
					Menu_Change(NEXT);
 752:	fc 01       	movw	r30, r24
 754:	25 91       	lpm	r18, Z+
 756:	34 91       	lpm	r19, Z+
 758:	87 c0       	rjmp	.+270    	; 0x868 <Menu_Key+0x180>
				}
				break;
										
				case MENU_TUNE_TIME:
				{
					I2C_StoreTime(&clock->DS1307Time);
 75a:	cb 01       	movw	r24, r22
 75c:	0e 94 aa 01 	call	0x354	; 0x354 <I2C_StoreTime>
					Menu_Change(&m_s1i1);
 760:	82 e7       	ldi	r24, 0x72	; 114
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	85 c0       	rjmp	.+266    	; 0x870 <Menu_Key+0x188>
				break;


				case MENU_TUNE_DATE:
				{
					I2C_StoreDate(&clock->DS1307Time);
 766:	cb 01       	movw	r24, r22
 768:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <I2C_StoreDate>
					Menu_Change(&m_s1i2);
 76c:	8c e7       	ldi	r24, 0x7C	; 124
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	7f c0       	rjmp	.+254    	; 0x870 <Menu_Key+0x188>
				break;


				case MENU_TUNE_YEAR:
				{
					I2C_StoreYear(&clock->DS1307Time);
 772:	cb 01       	movw	r24, r22
 774:	0e 94 ed 01 	call	0x3da	; 0x3da <I2C_StoreYear>
					Menu_Change(&m_s1i3);
 778:	86 e8       	ldi	r24, 0x86	; 134
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	79 c0       	rjmp	.+242    	; 0x870 <Menu_Key+0x188>
		break;

		//------------------------
		case KEY_CODE_B: 
		{
			switch(SELECT)//пункт меню
 77e:	80 91 38 01 	lds	r24, 0x0138
 782:	90 91 39 01 	lds	r25, 0x0139
 786:	fc 01       	movw	r30, r24
 788:	38 96       	adiw	r30, 0x08	; 8
 78a:	e4 91       	lpm	r30, Z+
 78c:	e7 30       	cpi	r30, 0x07	; 7
 78e:	c1 f0       	breq	.+48     	; 0x7c0 <Menu_Key+0xd8>
 790:	e8 30       	cpi	r30, 0x08	; 8
 792:	28 f4       	brcc	.+10     	; 0x79e <Menu_Key+0xb6>
 794:	e5 30       	cpi	r30, 0x05	; 5
 796:	31 f0       	breq	.+12     	; 0x7a4 <Menu_Key+0xbc>
 798:	e6 30       	cpi	r30, 0x06	; 6
 79a:	f9 f4       	brne	.+62     	; 0x7da <Menu_Key+0xf2>
 79c:	0a c0       	rjmp	.+20     	; 0x7b2 <Menu_Key+0xca>
 79e:	ea 30       	cpi	r30, 0x0A	; 10
 7a0:	e0 f4       	brcc	.+56     	; 0x7da <Menu_Key+0xf2>
 7a2:	68 c0       	rjmp	.+208    	; 0x874 <Menu_Key+0x18c>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Minutes=BCD_Increment(clock->DS1307Time.Minutes,0,((5<<4)|9));
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	49 e5       	ldi	r20, 0x59	; 89
 7aa:	0e 94 c2 04 	call	0x984	; 0x984 <BCD_Increment>
 7ae:	89 83       	std	Y+1, r24	; 0x01
 7b0:	30 c0       	rjmp	.+96     	; 0x812 <Menu_Key+0x12a>
				break;


				case MENU_TUNE_DATE:
				{
					clock->DS1307Time.Month=BCD_Increment(clock->DS1307Time.Month,1,((1<<4)|2));
 7b2:	8d 81       	ldd	r24, Y+5	; 0x05
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	42 e1       	ldi	r20, 0x12	; 18
 7b8:	0e 94 c2 04 	call	0x984	; 0x984 <BCD_Increment>
 7bc:	8d 83       	std	Y+5, r24	; 0x05
 7be:	36 c0       	rjmp	.+108    	; 0x82c <Menu_Key+0x144>
				break;


				case MENU_TUNE_YEAR:
				{
					clock->DS1307Time.Year=BCD_Increment(clock->DS1307Time.Year,0,((9<<4)|9));
 7c0:	8e 81       	ldd	r24, Y+6	; 0x06
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	49 e9       	ldi	r20, 0x99	; 153
 7c6:	0e 94 c2 04 	call	0x984	; 0x984 <BCD_Increment>
 7ca:	8e 83       	std	Y+6, r24	; 0x06
					Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 7cc:	be 01       	movw	r22, r28
 7ce:	68 5e       	subi	r22, 0xE8	; 232
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	ce 01       	movw	r24, r28
 7d4:	0e 94 9c 04 	call	0x938	; 0x938 <Year_To_Buf>
				}
				break;
 7d8:	4d c0       	rjmp	.+154    	; 0x874 <Menu_Key+0x18c>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 7da:	02 96       	adiw	r24, 0x02	; 2
 7dc:	fc 01       	movw	r30, r24
 7de:	25 91       	lpm	r18, Z+
 7e0:	34 91       	lpm	r19, Z+
 7e2:	42 c0       	rjmp	.+132    	; 0x868 <Menu_Key+0x180>
		}
		break;
		//------------------------
		case KEY_CODE_C:
		{ 
			switch(SELECT)//пункт меню
 7e4:	80 91 38 01 	lds	r24, 0x0138
 7e8:	90 91 39 01 	lds	r25, 0x0139
 7ec:	fc 01       	movw	r30, r24
 7ee:	38 96       	adiw	r30, 0x08	; 8
 7f0:	e4 91       	lpm	r30, Z+
 7f2:	e6 30       	cpi	r30, 0x06	; 6
 7f4:	a9 f0       	breq	.+42     	; 0x820 <Menu_Key+0x138>
 7f6:	e7 30       	cpi	r30, 0x07	; 7
 7f8:	18 f4       	brcc	.+6      	; 0x800 <Menu_Key+0x118>
 7fa:	e5 30       	cpi	r30, 0x05	; 5
 7fc:	f1 f4       	brne	.+60     	; 0x83a <Menu_Key+0x152>
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <Menu_Key+0x11e>
 800:	ea 30       	cpi	r30, 0x0A	; 10
 802:	d8 f4       	brcc	.+54     	; 0x83a <Menu_Key+0x152>
 804:	37 c0       	rjmp	.+110    	; 0x874 <Menu_Key+0x18c>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Hours=BCD_Increment(clock->DS1307Time.Hours,0,((2<<4)|3));
 806:	8a 81       	ldd	r24, Y+2	; 0x02
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	43 e2       	ldi	r20, 0x23	; 35
 80c:	0e 94 c2 04 	call	0x984	; 0x984 <BCD_Increment>
 810:	8a 83       	std	Y+2, r24	; 0x02
					Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 812:	be 01       	movw	r22, r28
 814:	68 5e       	subi	r22, 0xE8	; 232
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	ce 01       	movw	r24, r28
 81a:	0e 94 44 04 	call	0x888	; 0x888 <Time_To_Buf>
				}
				break;
 81e:	2a c0       	rjmp	.+84     	; 0x874 <Menu_Key+0x18c>


				case MENU_TUNE_DATE:
				{
					clock->DS1307Time.Date=BCD_Increment(clock->DS1307Time.Date,1,((3<<4)|1));
 820:	8c 81       	ldd	r24, Y+4	; 0x04
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	41 e3       	ldi	r20, 0x31	; 49
 826:	0e 94 c2 04 	call	0x984	; 0x984 <BCD_Increment>
 82a:	8c 83       	std	Y+4, r24	; 0x04
					Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 82c:	be 01       	movw	r22, r28
 82e:	68 5e       	subi	r22, 0xE8	; 232
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	ce 01       	movw	r24, r28
 834:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Date_To_Buf>
				}
				break;
 838:	1d c0       	rjmp	.+58     	; 0x874 <Menu_Key+0x18c>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 83a:	02 96       	adiw	r24, 0x02	; 2
 83c:	fc 01       	movw	r30, r24
 83e:	25 91       	lpm	r18, Z+
 840:	34 91       	lpm	r19, Z+
 842:	12 c0       	rjmp	.+36     	; 0x868 <Menu_Key+0x180>
					Menu_Change(PREVIOUS);
				}
				break;				
			}*/

			Menu_Change(PREVIOUS);
 844:	e0 91 38 01 	lds	r30, 0x0138
 848:	f0 91 39 01 	lds	r31, 0x0139
 84c:	32 96       	adiw	r30, 0x02	; 2
 84e:	25 91       	lpm	r18, Z+
 850:	34 91       	lpm	r19, Z+
 852:	0a c0       	rjmp	.+20     	; 0x868 <Menu_Key+0x180>
		break;
			
		//------------------------
		case KEY_CODE_AB://переход в режим настройки времени/даты/года
		{ 
			I2C_ReadTime(&clock->DS1307Time);
 854:	cb 01       	movw	r24, r22
 856:	0e 94 1e 01 	call	0x23c	; 0x23c <I2C_ReadTime>
			Menu_Change(CHILD);
 85a:	e0 91 38 01 	lds	r30, 0x0138
 85e:	f0 91 39 01 	lds	r31, 0x0139
 862:	36 96       	adiw	r30, 0x06	; 6
 864:	25 91       	lpm	r18, Z+
 866:	34 91       	lpm	r19, Z+
 868:	c9 01       	movw	r24, r18
 86a:	02 c0       	rjmp	.+4      	; 0x870 <Menu_Key+0x188>
		}
		break;
		//------------------------
		case KEY_CODE_CD:
		{
			Menu_Change(&m_s1i4);
 86c:	80 e9       	ldi	r24, 0x90	; 144
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 0a 03 	call	0x614	; 0x614 <Menu_Change>
		{

		}
		break;
	}
}
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	08 95       	ret

0000087a <Menu_Init>:
//---------------------------------------------------
void Menu_Init(void) 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 87a:	82 e7       	ldi	r24, 0x72	; 114
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	90 93 39 01 	sts	0x0139, r25
 882:	80 93 38 01 	sts	0x0138, r24
}
 886:	08 95       	ret

00000888 <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 888:	fc 01       	movw	r30, r24
 88a:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 88c:	82 81       	ldd	r24, Z+2	; 0x02
 88e:	82 95       	swap	r24
 890:	8f 70       	andi	r24, 0x0F	; 15
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	95 60       	ori	r25, 0x05	; 5
 896:	11 96       	adiw	r26, 0x01	; 1
 898:	9c 93       	st	X, r25
 89a:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 89c:	82 81       	ldd	r24, Z+2	; 0x02
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	8f 70       	andi	r24, 0x0F	; 15
 8a2:	90 70       	andi	r25, 0x00	; 0
 8a4:	94 60       	ori	r25, 0x04	; 4
 8a6:	13 96       	adiw	r26, 0x03	; 3
 8a8:	9c 93       	st	X, r25
 8aa:	8e 93       	st	-X, r24
 8ac:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	93 e0       	ldi	r25, 0x03	; 3
 8b2:	15 96       	adiw	r26, 0x05	; 5
 8b4:	9c 93       	st	X, r25
 8b6:	8e 93       	st	-X, r24
 8b8:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 8ba:	81 81       	ldd	r24, Z+1	; 0x01
 8bc:	82 95       	swap	r24
 8be:	8f 70       	andi	r24, 0x0F	; 15
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	92 60       	ori	r25, 0x02	; 2
 8c4:	17 96       	adiw	r26, 0x07	; 7
 8c6:	9c 93       	st	X, r25
 8c8:	8e 93       	st	-X, r24
 8ca:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 8cc:	81 81       	ldd	r24, Z+1	; 0x01
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	8f 70       	andi	r24, 0x0F	; 15
 8d2:	90 70       	andi	r25, 0x00	; 0
 8d4:	91 60       	ori	r25, 0x01	; 1
 8d6:	19 96       	adiw	r26, 0x09	; 9
 8d8:	9c 93       	st	X, r25
 8da:	8e 93       	st	-X, r24
 8dc:	18 97       	sbiw	r26, 0x08	; 8
}
 8de:	08 95       	ret

000008e0 <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 8e0:	fc 01       	movw	r30, r24
 8e2:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Date>>4);
 8e4:	84 81       	ldd	r24, Z+4	; 0x04
 8e6:	82 95       	swap	r24
 8e8:	8f 70       	andi	r24, 0x0F	; 15
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	95 60       	ori	r25, 0x05	; 5
 8ee:	11 96       	adiw	r26, 0x01	; 1
 8f0:	9c 93       	st	X, r25
 8f2:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Date&0x0F);
 8f4:	84 81       	ldd	r24, Z+4	; 0x04
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	8f 70       	andi	r24, 0x0F	; 15
 8fa:	90 70       	andi	r25, 0x00	; 0
 8fc:	94 60       	ori	r25, 0x04	; 4
 8fe:	13 96       	adiw	r26, 0x03	; 3
 900:	9c 93       	st	X, r25
 902:	8e 93       	st	-X, r24
 904:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0xFF);//"."
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	93 e0       	ldi	r25, 0x03	; 3
 90a:	15 96       	adiw	r26, 0x05	; 5
 90c:	9c 93       	st	X, r25
 90e:	8e 93       	st	-X, r24
 910:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Month>>4);
 912:	85 81       	ldd	r24, Z+5	; 0x05
 914:	82 95       	swap	r24
 916:	8f 70       	andi	r24, 0x0F	; 15
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	92 60       	ori	r25, 0x02	; 2
 91c:	17 96       	adiw	r26, 0x07	; 7
 91e:	9c 93       	st	X, r25
 920:	8e 93       	st	-X, r24
 922:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Month&0x0F);
 924:	85 81       	ldd	r24, Z+5	; 0x05
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	8f 70       	andi	r24, 0x0F	; 15
 92a:	90 70       	andi	r25, 0x00	; 0
 92c:	91 60       	ori	r25, 0x01	; 1
 92e:	19 96       	adiw	r26, 0x09	; 9
 930:	9c 93       	st	X, r25
 932:	8e 93       	st	-X, r24
 934:	18 97       	sbiw	r26, 0x08	; 8
}
 936:	08 95       	ret

00000938 <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 938:	fc 01       	movw	r30, r24
 93a:	db 01       	movw	r26, r22
	buf[0]=0x0500|(0xF);
 93c:	8f e0       	ldi	r24, 0x0F	; 15
 93e:	95 e0       	ldi	r25, 0x05	; 5
 940:	11 96       	adiw	r26, 0x01	; 1
 942:	9c 93       	st	X, r25
 944:	8e 93       	st	-X, r24
	buf[1]=0x0400|(2);
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	94 e0       	ldi	r25, 0x04	; 4
 94a:	13 96       	adiw	r26, 0x03	; 3
 94c:	9c 93       	st	X, r25
 94e:	8e 93       	st	-X, r24
 950:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0);
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	93 e0       	ldi	r25, 0x03	; 3
 956:	15 96       	adiw	r26, 0x05	; 5
 958:	9c 93       	st	X, r25
 95a:	8e 93       	st	-X, r24
 95c:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Year>>4);
 95e:	86 81       	ldd	r24, Z+6	; 0x06
 960:	82 95       	swap	r24
 962:	8f 70       	andi	r24, 0x0F	; 15
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	92 60       	ori	r25, 0x02	; 2
 968:	17 96       	adiw	r26, 0x07	; 7
 96a:	9c 93       	st	X, r25
 96c:	8e 93       	st	-X, r24
 96e:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Year&0x0F);
 970:	86 81       	ldd	r24, Z+6	; 0x06
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	8f 70       	andi	r24, 0x0F	; 15
 976:	90 70       	andi	r25, 0x00	; 0
 978:	91 60       	ori	r25, 0x01	; 1
 97a:	19 96       	adiw	r26, 0x09	; 9
 97c:	9c 93       	st	X, r25
 97e:	8e 93       	st	-X, r24
 980:	18 97       	sbiw	r26, 0x08	; 8
}
 982:	08 95       	ret

00000984 <BCD_Increment>:

uint8_t BCD_Increment(uint8_t bcd, uint8_t bcd_min, uint8_t bcd_max)
{	
	if((bcd&0xF)<9)
 984:	28 2f       	mov	r18, r24
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	2f 70       	andi	r18, 0x0F	; 15
 98a:	30 70       	andi	r19, 0x00	; 0
 98c:	29 30       	cpi	r18, 0x09	; 9
 98e:	31 05       	cpc	r19, r1
 990:	14 f4       	brge	.+4      	; 0x996 <BCD_Increment+0x12>
	{
		bcd+=0x01;
 992:	8f 5f       	subi	r24, 0xFF	; 255
 994:	02 c0       	rjmp	.+4      	; 0x99a <BCD_Increment+0x16>
	}
	else
	{
		bcd+=0x10;
 996:	80 5f       	subi	r24, 0xF0	; 240
		bcd&=0xF0;
 998:	80 7f       	andi	r24, 0xF0	; 240
 99a:	86 17       	cp	r24, r22
 99c:	08 f4       	brcc	.+2      	; 0x9a0 <BCD_Increment+0x1c>
 99e:	86 2f       	mov	r24, r22
	if(bcd<bcd_min)
	{
		bcd=bcd_min;			
	}

	if(bcd>bcd_max)
 9a0:	48 17       	cp	r20, r24
 9a2:	08 f4       	brcc	.+2      	; 0x9a6 <BCD_Increment+0x22>
 9a4:	86 2f       	mov	r24, r22
	{
		bcd=bcd_min;			
	}

	return bcd;
}
 9a6:	08 95       	ret

000009a8 <_exit>:
 9a8:	f8 94       	cli

000009aa <__stop_program>:
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <__stop_program>
