
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000036  00800100  00800100  00000992  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002fe  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187d  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f12  00000000  00000000  00003591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000044a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  000046a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000700  00000000  00000000  00004c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000001cd  00000000  00000000  00005329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <Null_Menu>:
	...

00000072 <m_s1i1>:
  72:	7c 00 68 00 68 00 a4 00 02 00                       |.h.h.....

0000007c <m_s1i2>:
  7c:	86 00 72 00 68 00 ae 00 03 00                       ..r.h.....

00000086 <m_s1i3>:
  86:	90 00 7c 00 68 00 b8 00 04 00                       ..|.h.....

00000090 <m_s1i4>:
  90:	9a 00 86 00 68 00 68 00 08 00                       ....h.h...

0000009a <m_s1i5>:
  9a:	68 00 90 00 68 00 68 00 09 00                       h...h.h...

000000a4 <m_s2i1>:
  a4:	68 00 68 00 72 00 68 00 05 00                       h.h.r.h...

000000ae <m_s3i1>:
  ae:	68 00 68 00 7c 00 68 00 06 00                       h.h.|.h...

000000b8 <m_s4i1>:
  b8:	68 00 68 00 86 00 68 00 07 00                       h.h...h...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d4 e0       	ldi	r29, 0x04	; 4
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 33       	cpi	r26, 0x36	; 54
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  e2:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
  ea:	88 b1       	in	r24, 0x08	; 8
  ec:	80 63       	ori	r24, 0x30	; 48
  ee:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	8f 7c       	andi	r24, 0xCF	; 207
  f4:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
  fc:	10 92 b9 00 	sts	0x00B9, r1
}
 100:	08 95       	ret

00000102 <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 102:	94 ea       	ldi	r25, 0xA4	; 164
 104:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 108:	90 91 bc 00 	lds	r25, 0x00BC
 10c:	97 ff       	sbrs	r25, 7
 10e:	fc cf       	rjmp	.-8      	; 0x108 <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
 110:	90 91 b9 00 	lds	r25, 0x00B9
 114:	98 7f       	andi	r25, 0xF8	; 248
 116:	98 30       	cpi	r25, 0x08	; 8
 118:	39 f5       	brne	.+78     	; 0x168 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
 11a:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 124:	80 91 bc 00 	lds	r24, 0x00BC
 128:	87 ff       	sbrs	r24, 7
 12a:	fc cf       	rjmp	.-8      	; 0x124 <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 12c:	80 91 b9 00 	lds	r24, 0x00B9
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	88 31       	cpi	r24, 0x18	; 24
 134:	c9 f4       	brne	.+50     	; 0x168 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
 136:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 140:	80 91 bc 00 	lds	r24, 0x00BC
 144:	87 ff       	sbrs	r24, 7
 146:	fc cf       	rjmp	.-8      	; 0x140 <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 148:	80 91 b9 00 	lds	r24, 0x00B9
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	88 32       	cpi	r24, 0x28	; 40
 150:	59 f4       	brne	.+22     	; 0x168 <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
 152:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 15c:	80 91 bc 00 	lds	r24, 0x00BC
 160:	87 ff       	sbrs	r24, 7
 162:	fc cf       	rjmp	.-8      	; 0x15c <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 164:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 168:	84 e9       	ldi	r24, 0x94	; 148
 16a:	80 93 bc 00 	sts	0x00BC, r24
 16e:	08 95       	ret

00000170 <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 170:	94 ea       	ldi	r25, 0xA4	; 164
 172:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 176:	90 91 bc 00 	lds	r25, 0x00BC
 17a:	97 ff       	sbrs	r25, 7
 17c:	fc cf       	rjmp	.-8      	; 0x176 <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 17e:	90 91 b9 00 	lds	r25, 0x00B9
 182:	98 7f       	andi	r25, 0xF8	; 248
 184:	98 30       	cpi	r25, 0x08	; 8
 186:	09 f0       	breq	.+2      	; 0x18a <I2C_Read+0x1a>
 188:	43 c0       	rjmp	.+134    	; 0x210 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 18a:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 18e:	94 e8       	ldi	r25, 0x84	; 132
 190:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 194:	90 91 bc 00 	lds	r25, 0x00BC
 198:	97 ff       	sbrs	r25, 7
 19a:	fc cf       	rjmp	.-8      	; 0x194 <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 19c:	90 91 b9 00 	lds	r25, 0x00B9
 1a0:	98 7f       	andi	r25, 0xF8	; 248
 1a2:	98 31       	cpi	r25, 0x18	; 24
 1a4:	a9 f5       	brne	.+106    	; 0x210 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 1a6:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1aa:	94 e8       	ldi	r25, 0x84	; 132
 1ac:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1b0:	90 91 bc 00 	lds	r25, 0x00BC
 1b4:	97 ff       	sbrs	r25, 7
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 1b8:	90 91 b9 00 	lds	r25, 0x00B9
 1bc:	98 7f       	andi	r25, 0xF8	; 248
 1be:	98 32       	cpi	r25, 0x28	; 40
 1c0:	39 f5       	brne	.+78     	; 0x210 <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 1c2:	94 ea       	ldi	r25, 0xA4	; 164
 1c4:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 1c8:	90 91 bc 00 	lds	r25, 0x00BC
 1cc:	97 ff       	sbrs	r25, 7
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 1d0:	90 91 b9 00 	lds	r25, 0x00B9
 1d4:	98 7f       	andi	r25, 0xF8	; 248
 1d6:	90 31       	cpi	r25, 0x10	; 16
 1d8:	d9 f4       	brne	.+54     	; 0x210 <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 1e0:	84 e8       	ldi	r24, 0x84	; 132
 1e2:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1e6:	80 91 bc 00 	lds	r24, 0x00BC
 1ea:	87 ff       	sbrs	r24, 7
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 1ee:	80 91 b9 00 	lds	r24, 0x00B9
 1f2:	88 7f       	andi	r24, 0xF8	; 248
 1f4:	80 34       	cpi	r24, 0x40	; 64
 1f6:	61 f4       	brne	.+24     	; 0x210 <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 1f8:	84 e8       	ldi	r24, 0x84	; 132
 1fa:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1fe:	80 91 bc 00 	lds	r24, 0x00BC
 202:	87 ff       	sbrs	r24, 7
 204:	fc cf       	rjmp	.-8      	; 0x1fe <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 206:	80 91 b9 00 	lds	r24, 0x00B9
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	88 35       	cpi	r24, 0x58	; 88
 20e:	29 f0       	breq	.+10     	; 0x21a <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 210:	84 e9       	ldi	r24, 0x94	; 148
 212:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
		
	}
	reg=TWDR;
 21a:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 21e:	94 e9       	ldi	r25, 0x94	; 148
 220:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 224:	08 95       	ret

00000226 <I2C_ReadTime>:

//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 22c:	80 ed       	ldi	r24, 0xD0	; 208
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 234:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	87 ec       	ldi	r24, 0xC7	; 199
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <I2C_ReadTime+0x14>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <I2C_ReadTime+0x1a>
 240:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 242:	80 ed       	ldi	r24, 0xD0	; 208
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	87 ec       	ldi	r24, 0xC7	; 199
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <I2C_ReadTime+0x2a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <I2C_ReadTime+0x30>
 256:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 258:	80 ed       	ldi	r24, 0xD0	; 208
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 260:	8a 83       	std	Y+2, r24	; 0x02
 262:	87 ec       	ldi	r24, 0xC7	; 199
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <I2C_ReadTime+0x40>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <I2C_ReadTime+0x46>
 26c:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 26e:	80 ed       	ldi	r24, 0xD0	; 208
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 276:	8b 83       	std	Y+3, r24	; 0x03
 278:	87 ec       	ldi	r24, 0xC7	; 199
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <I2C_ReadTime+0x56>
 280:	00 c0       	rjmp	.+0      	; 0x282 <I2C_ReadTime+0x5c>
 282:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 284:	80 ed       	ldi	r24, 0xD0	; 208
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 28c:	8c 83       	std	Y+4, r24	; 0x04
 28e:	87 ec       	ldi	r24, 0xC7	; 199
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <I2C_ReadTime+0x6c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <I2C_ReadTime+0x72>
 298:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 29a:	80 ed       	ldi	r24, 0xD0	; 208
 29c:	65 e0       	ldi	r22, 0x05	; 5
 29e:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 2a2:	8d 83       	std	Y+5, r24	; 0x05
 2a4:	87 ec       	ldi	r24, 0xC7	; 199
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <I2C_ReadTime+0x82>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <I2C_ReadTime+0x88>
 2ae:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 2b0:	80 ed       	ldi	r24, 0xD0	; 208
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 2b8:	8e 83       	std	Y+6, r24	; 0x06
 2ba:	87 ec       	ldi	r24, 0xC7	; 199
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <I2C_ReadTime+0x98>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <I2C_ReadTime+0x9e>
 2c4:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 2c6:	80 ed       	ldi	r24, 0xD0	; 208
 2c8:	67 e0       	ldi	r22, 0x07	; 7
 2ca:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 2ce:	8f 83       	std	Y+7, r24	; 0x07
 2d0:	87 ec       	ldi	r24, 0xC7	; 199
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <I2C_ReadTime+0xae>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <I2C_ReadTime+0xb4>
 2da:	00 00       	nop
	_delay_us(100);
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 2e2:	80 ed       	ldi	r24, 0xD0	; 208
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Read>
 2ea:	ef ec       	ldi	r30, 0xCF	; 207
 2ec:	f7 e0       	ldi	r31, 0x07	; 7
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <I2C_DS1307Init+0xc>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <I2C_DS1307Init+0x12>
 2f4:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 2f6:	87 ff       	sbrs	r24, 7
 2f8:	21 c0       	rjmp	.+66     	; 0x33c <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 2fa:	80 ed       	ldi	r24, 0xD0	; 208
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	42 e1       	ldi	r20, 0x12	; 18
 300:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 304:	87 ec       	ldi	r24, 0xC7	; 199
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <I2C_DS1307Init+0x26>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <I2C_DS1307Init+0x2c>
 30e:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 310:	80 ed       	ldi	r24, 0xD0	; 208
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 31a:	e7 ec       	ldi	r30, 0xC7	; 199
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <I2C_DS1307Init+0x3c>
 322:	00 c0       	rjmp	.+0      	; 0x324 <I2C_DS1307Init+0x42>
 324:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 326:	80 ed       	ldi	r24, 0xD0	; 208
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 330:	87 ec       	ldi	r24, 0xC7	; 199
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <I2C_DS1307Init+0x52>
 338:	00 c0       	rjmp	.+0      	; 0x33a <I2C_DS1307Init+0x58>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 344:	80 ed       	ldi	r24, 0xD0	; 208
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	4a 81       	ldd	r20, Y+2	; 0x02
 34a:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 34e:	87 ec       	ldi	r24, 0xC7	; 199
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <I2C_StoreTime+0x14>
 356:	00 c0       	rjmp	.+0      	; 0x358 <I2C_StoreTime+0x1a>
 358:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 35a:	80 ed       	ldi	r24, 0xD0	; 208
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	49 81       	ldd	r20, Y+1	; 0x01
 360:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 364:	87 ec       	ldi	r24, 0xC7	; 199
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <I2C_StoreTime+0x2a>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <I2C_StoreTime+0x30>
 36e:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 370:	80 ed       	ldi	r24, 0xD0	; 208
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 37a:	87 ec       	ldi	r24, 0xC7	; 199
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <I2C_StoreTime+0x40>
 382:	00 c0       	rjmp	.+0      	; 0x384 <I2C_StoreTime+0x46>
 384:	00 00       	nop
	_delay_us(100);
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 392:	80 ed       	ldi	r24, 0xD0	; 208
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	4d 81       	ldd	r20, Y+5	; 0x05
 398:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 39c:	87 ec       	ldi	r24, 0xC7	; 199
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <I2C_StoreDate+0x14>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <I2C_StoreDate+0x1a>
 3a6:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 3a8:	80 ed       	ldi	r24, 0xD0	; 208
 3aa:	64 e0       	ldi	r22, 0x04	; 4
 3ac:	4c 81       	ldd	r20, Y+4	; 0x04
 3ae:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 3b2:	87 ec       	ldi	r24, 0xC7	; 199
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <I2C_StoreDate+0x2a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <I2C_StoreDate+0x30>
 3bc:	00 00       	nop
	_delay_us(100);	
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 3c4:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 3c6:	80 ed       	ldi	r24, 0xD0	; 208
 3c8:	66 e0       	ldi	r22, 0x06	; 6
 3ca:	46 81       	ldd	r20, Z+6	; 0x06
 3cc:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Write>
 3d0:	87 ec       	ldi	r24, 0xC7	; 199
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <I2C_StoreYear+0x10>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <I2C_StoreYear+0x16>
 3da:	00 00       	nop
	_delay_us(100);
}
 3dc:	08 95       	ret

000003de <KBD_ReadPins>:

static uint8_t lastKEY=KEY_CODE_NONE, previousKEY=KEY_CODE_NONE;

uint8_t KBD_ReadPins(void)
{
	uint8_t key=0;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	48 99       	sbic	0x09, 0	; 9
 3e2:	80 e0       	ldi	r24, 0x00	; 0
	if((KBD_PIN & _BV(KBD_PIN_A))==0)
	{
		key|=(1<<0);
	}
	
	if((KBD_PIN & _BV(KBD_PIN_B))==0)
 3e4:	49 9b       	sbis	0x09, 1	; 9
	{
		key|=(1<<1);
 3e6:	82 60       	ori	r24, 0x02	; 2
	}
	
	if((KBD_PIN & _BV(KBD_PIN_C))==0)
 3e8:	4a 9b       	sbis	0x09, 2	; 9
	{
		key|=(1<<2);
 3ea:	84 60       	ori	r24, 0x04	; 4
	}
	
	if((KBD_PIN & _BV(KBD_PIN_D))==0)
 3ec:	4b 9b       	sbis	0x09, 3	; 9
	{
		key|=(1<<3);
 3ee:	88 60       	ori	r24, 0x08	; 8
	}	
	
	return key;	
}
 3f0:	08 95       	ret

000003f2 <KBD_ReadKey>:

enKey KBD_ReadKey(void) 
{
 3f2:	1f 93       	push	r17
	lastKEY=KBD_ReadPins();
 3f4:	0e 94 ef 01 	call	0x3de	; 0x3de <KBD_ReadPins>
 3f8:	80 93 00 01 	sts	0x0100, r24

	if(lastKEY!=KEY_CODE_NONE)
 3fc:	88 23       	and	r24, r24
 3fe:	c9 f0       	breq	.+50     	; 0x432 <KBD_ReadKey+0x40>
	{
		if(lastKEY!=previousKEY)
 400:	90 91 01 01 	lds	r25, 0x0101
 404:	89 17       	cp	r24, r25
 406:	b9 f0       	breq	.+46     	; 0x436 <KBD_ReadKey+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	30 e7       	ldi	r19, 0x70	; 112
 40c:	42 e0       	ldi	r20, 0x02	; 2
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	30 40       	sbci	r19, 0x00	; 0
 412:	40 40       	sbci	r20, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <KBD_ReadKey+0x1c>
 416:	00 c0       	rjmp	.+0      	; 0x418 <KBD_ReadKey+0x26>
 418:	00 00       	nop
		{
			_delay_ms(100);
			if((lastKEY!=KEY_CODE_NONE) && (lastKEY==KBD_ReadPins()))
 41a:	18 2f       	mov	r17, r24
 41c:	88 23       	and	r24, r24
 41e:	39 f0       	breq	.+14     	; 0x42e <KBD_ReadKey+0x3c>
 420:	0e 94 ef 01 	call	0x3de	; 0x3de <KBD_ReadPins>
 424:	18 17       	cp	r17, r24
 426:	19 f4       	brne	.+6      	; 0x42e <KBD_ReadKey+0x3c>
			{
				previousKEY=lastKEY;
 428:	10 93 01 01 	sts	0x0101, r17
				return lastKEY;
 42c:	05 c0       	rjmp	.+10     	; 0x438 <KBD_ReadKey+0x46>
			}
			else
			{	
				lastKEY		= KEY_CODE_NONE;
 42e:	10 92 00 01 	sts	0x0100, r1
			return KEY_CODE_NONE;
		}
	}
	else
	{
		previousKEY = KEY_CODE_NONE;
 432:	10 92 01 01 	sts	0x0101, r1
				return KEY_CODE_NONE;	
			}
		}
		else
		{
			return KEY_CODE_NONE;
 436:	10 e0       	ldi	r17, 0x00	; 0
	{
		previousKEY = KEY_CODE_NONE;
		return KEY_CODE_NONE;
	}

}
 438:	81 2f       	mov	r24, r17
 43a:	1f 91       	pop	r17
 43c:	08 95       	ret

0000043e <KBD_Init>:
//-------------------------------
void  KBD_Init(void) 
{
	KBD_PORT |= KBD_MASK;
 43e:	8b b1       	in	r24, 0x0b	; 11
 440:	8f 60       	ori	r24, 0x0F	; 15
 442:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR  &= ~ KBD_MASK;
 444:	8a b1       	in	r24, 0x0a	; 10
 446:	80 7f       	andi	r24, 0xF0	; 240
 448:	8a b9       	out	0x0a, r24	; 10
}
 44a:	08 95       	ret

0000044c <main>:
#include "clock.h"


int main(void)
{
	Clock_Init();
 44c:	0e 94 8f 02 	call	0x51e	; 0x51e <Clock_Init>
	//sei();

	while(1)
	{
		Clock_Cycle();
 450:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Clock_Cycle>
 454:	fd cf       	rjmp	.-6      	; 0x450 <main+0x4>

00000456 <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 456:	84 b1       	in	r24, 0x04	; 4
 458:	8c 62       	ori	r24, 0x2C	; 44
 45a:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 45c:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 45e:	80 e5       	ldi	r24, 0x50	; 80
 460:	8c bd       	out	0x2c, r24	; 44

   SPSR = (1<<SPI2X);
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	8d bd       	out	0x2d, r24	; 45
}
 466:	08 95       	ret

00000468 <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	00 d0       	rcall	.+0      	; 0x46e <LED_SPI_WriteWord+0x6>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 476:	fe 01       	movw	r30, r28
 478:	31 96       	adiw	r30, 0x01	; 1
 47a:	81 81       	ldd	r24, Z+1	; 0x01
 47c:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 47e:	0d b4       	in	r0, 0x2d	; 45
 480:	07 fe       	sbrs	r0, 7
 482:	fd cf       	rjmp	.-6      	; 0x47e <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 484:	80 81       	ld	r24, Z
 486:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 488:	0d b4       	in	r0, 0x2d	; 45
 48a:	07 fe       	sbrs	r0, 7
 48c:	fd cf       	rjmp	.-6      	; 0x488 <LED_SPI_WriteWord+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48e:	8a e1       	ldi	r24, 0x1A	; 26
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <LED_SPI_WriteWord+0x28>
 494:	00 c0       	rjmp	.+0      	; 0x496 <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 496:	2a 9a       	sbi	0x05, 2	; 5
 498:	8a e1       	ldi	r24, 0x1A	; 26
 49a:	8a 95       	dec	r24
 49c:	f1 f7       	brne	.-4      	; 0x49a <LED_SPI_WriteWord+0x32>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 4a0:	2a 98       	cbi	0x05, 2	; 5
 4a2:	8a e1       	ldi	r24, 0x1A	; 26
 4a4:	8a 95       	dec	r24
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LED_SPI_WriteWord+0x3c>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <LED_Out_Buf>:
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
 4b4:	df 92       	push	r13
 4b6:	ef 92       	push	r14
 4b8:	ff 92       	push	r15
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	d6 2e       	mov	r13, r22
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4c4:	08 2f       	mov	r16, r24
 4c6:	19 2f       	mov	r17, r25
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4cc:	e4 2e       	mov	r14, r20
 4ce:	ff 24       	eor	r15, r15
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <__stack+0x9>
	{
		if(i>=5)
 4d2:	85 30       	cpi	r24, 0x05	; 5
 4d4:	88 f0       	brcs	.+34     	; 0x4f8 <LED_Out_Buf+0x44>
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
 4d6:	9e 01       	movw	r18, r28
 4d8:	25 50       	subi	r18, 0x05	; 5
 4da:	30 40       	sbci	r19, 0x00	; 0

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 4dc:	c7 01       	movw	r24, r14
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <LED_Out_Buf+0x30>
 4e0:	95 95       	asr	r25
 4e2:	87 95       	ror	r24
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <LED_Out_Buf+0x2c>
 4e8:	9c 01       	movw	r18, r24
 4ea:	f8 01       	movw	r30, r16
 4ec:	80 81       	ld	r24, Z
 4ee:	91 81       	ldd	r25, Z+1	; 0x01
 4f0:	20 fd       	sbrc	r18, 0
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <LED_Out_Buf+0x4a>
			{
				LED_SPI_WriteWord(out_buf[i]);
			}
			else
			{
				LED_SPI_WriteWord(out_buf[i]|0xF);
 4f4:	8f 60       	ori	r24, 0x0F	; 15
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <LED_Out_Buf+0x4a>
			}
		}
		else
		{
			LED_SPI_WriteWord(out_buf[i]);
 4f8:	f8 01       	movw	r30, r16
 4fa:	80 81       	ld	r24, Z
 4fc:	91 81       	ldd	r25, Z+1	; 0x01
 4fe:	0e 94 34 02 	call	0x468	; 0x468 <LED_SPI_WriteWord>
 502:	21 96       	adiw	r28, 0x01	; 1
 504:	0e 5f       	subi	r16, 0xFE	; 254
 506:	1f 4f       	sbci	r17, 0xFF	; 255
 508:	8c 2f       	mov	r24, r28
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 50a:	cd 15       	cp	r28, r13
 50c:	10 f3       	brcs	.-60     	; 0x4d2 <LED_Out_Buf+0x1e>
			LED_SPI_WriteWord(out_buf[i]);
		}
	}

	return;	
}
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	08 95       	ret

0000051e <Clock_Init>:

stClock clock;

void Clock_Init(void)
{
	Menu_Init();
 51e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <Menu_Init>
	I2C_Init();
 522:	0e 94 75 00 	call	0xea	; 0xea <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 526:	85 e0       	ldi	r24, 0x05	; 5
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <I2C_DS1307Init>
	KBD_Init();
 52e:	0e 94 1f 02 	call	0x43e	; 0x43e <KBD_Init>
	LED_SPI_Init();
 532:	0e 94 2b 02 	call	0x456	; 0x456 <LED_SPI_Init>

	//clock.brightness=I2C_Read(SLA_ADDR,ADDR_BRIGHTNESS);
	clock.display_buf[0]=0xA0F;
 536:	8f e0       	ldi	r24, 0x0F	; 15
 538:	9a e0       	ldi	r25, 0x0A	; 10
 53a:	90 93 14 01 	sts	0x0114, r25
 53e:	80 93 13 01 	sts	0x0113, r24
	clock.display_buf[1]=0x9FF;
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	99 e0       	ldi	r25, 0x09	; 9
 546:	90 93 16 01 	sts	0x0116, r25
 54a:	80 93 15 01 	sts	0x0115, r24
	clock.display_buf[2]=0xB05;
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	9b e0       	ldi	r25, 0x0B	; 11
 552:	90 93 18 01 	sts	0x0118, r25
 556:	80 93 17 01 	sts	0x0117, r24
	clock.display_buf[3]=0xC01;		
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	9c e0       	ldi	r25, 0x0C	; 12
 55e:	90 93 1a 01 	sts	0x011A, r25
 562:	80 93 19 01 	sts	0x0119, r24
	clock.display_buf[4]=0xF00;
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	90 93 1c 01 	sts	0x011C, r25
 56e:	80 93 1b 01 	sts	0x011B, r24
	//clock.display_buf[3]=(0xA00|clock.brightness);
	
	clock.display_buf[5]=0x101;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	90 93 1e 01 	sts	0x011E, r25
 57a:	80 93 1d 01 	sts	0x011D, r24
	clock.display_buf[6]=0x202;
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	90 93 20 01 	sts	0x0120, r25
 586:	80 93 1f 01 	sts	0x011F, r24
	clock.display_buf[7]=0x303;
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	93 e0       	ldi	r25, 0x03	; 3
 58e:	90 93 22 01 	sts	0x0122, r25
 592:	80 93 21 01 	sts	0x0121, r24
	clock.display_buf[8]=0x404;
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	94 e0       	ldi	r25, 0x04	; 4
 59a:	90 93 24 01 	sts	0x0124, r25
 59e:	80 93 23 01 	sts	0x0123, r24
	clock.display_buf[9]=0x505;
 5a2:	85 e0       	ldi	r24, 0x05	; 5
 5a4:	95 e0       	ldi	r25, 0x05	; 5
 5a6:	90 93 26 01 	sts	0x0126, r25
 5aa:	80 93 25 01 	sts	0x0125, r24

	clock.display_mask	=0xFF;
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	80 93 33 01 	sts	0x0133, r24
}
 5b4:	08 95       	ret

000005b6 <Clock_Cycle>:

void Clock_Cycle(void)
{
	static uint16_t dispCounter=0;

	Menu_Key(KBD_ReadKey(), &clock);
 5b6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <KBD_ReadKey>
 5ba:	65 e0       	ldi	r22, 0x05	; 5
 5bc:	71 e0       	ldi	r23, 0x01	; 1
 5be:	0e 94 4f 03 	call	0x69e	; 0x69e <Menu_Key>

	if(dispCounter==DISP_COUNTER)
 5c2:	80 91 02 01 	lds	r24, 0x0102
 5c6:	90 91 03 01 	lds	r25, 0x0103
 5ca:	23 e0       	ldi	r18, 0x03	; 3
 5cc:	88 3e       	cpi	r24, 0xE8	; 232
 5ce:	92 07       	cpc	r25, r18
 5d0:	81 f4       	brne	.+32     	; 0x5f2 <Clock_Cycle+0x3c>
	{
		dispCounter=0;
 5d2:	10 92 03 01 	sts	0x0103, r1
 5d6:	10 92 02 01 	sts	0x0102, r1
		Menu_Display(&clock);
 5da:	85 e0       	ldi	r24, 0x05	; 5
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 08 03 	call	0x610	; 0x610 <Menu_Display>
		LED_Out_Buf(clock.display_buf,LED_BUF_LEN,clock.display_mask);
 5e2:	83 e1       	ldi	r24, 0x13	; 19
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	6a e0       	ldi	r22, 0x0A	; 10
 5e8:	40 91 33 01 	lds	r20, 0x0133
 5ec:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LED_Out_Buf>
 5f0:	08 95       	ret
	}
	else
	{
		dispCounter++;
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	90 93 03 01 	sts	0x0103, r25
 5f8:	80 93 02 01 	sts	0x0102, r24
 5fc:	08 95       	ret

000005fe <Menu_Change>:
MAKE_MENU(m_s4i1,  NULL_ENTRY,NULL_ENTRY,  m_s1i3,     NULL_ENTRY,   MENU_TUNE_YEAR, 		"");


void Menu_Change(menuItem* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	88 36       	cpi	r24, 0x68	; 104
 602:	92 07       	cpc	r25, r18
 604:	21 f0       	breq	.+8      	; 0x60e <Menu_Change+0x10>
	  return;

	selectedMenuItem = NewMenu;
 606:	90 93 35 01 	sts	0x0135, r25
 60a:	80 93 34 01 	sts	0x0134, r24
 60e:	08 95       	ret

00000610 <Menu_Display>:
}

#define BLINK_CONST		10
//------------------------------------
void Menu_Display(stClock *clock) 
{
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	ec 01       	movw	r28, r24
		blink_mask=~blink_mask;
	}



	switch(SELECT)
 61a:	e0 91 34 01 	lds	r30, 0x0134
 61e:	f0 91 35 01 	lds	r31, 0x0135
 622:	38 96       	adiw	r30, 0x08	; 8
 624:	e4 91       	lpm	r30, Z+
 626:	e5 30       	cpi	r30, 0x05	; 5
 628:	99 f1       	breq	.+102    	; 0x690 <Menu_Display+0x80>
 62a:	e6 30       	cpi	r30, 0x06	; 6
 62c:	38 f4       	brcc	.+14     	; 0x63c <Menu_Display+0x2c>
 62e:	e3 30       	cpi	r30, 0x03	; 3
 630:	c9 f0       	breq	.+50     	; 0x664 <Menu_Display+0x54>
 632:	e4 30       	cpi	r30, 0x04	; 4
 634:	10 f5       	brcc	.+68     	; 0x67a <Menu_Display+0x6a>
 636:	e2 30       	cpi	r30, 0x02	; 2
 638:	69 f5       	brne	.+90     	; 0x694 <Menu_Display+0x84>
 63a:	09 c0       	rjmp	.+18     	; 0x64e <Menu_Display+0x3e>
 63c:	e7 30       	cpi	r30, 0x07	; 7
 63e:	41 f1       	breq	.+80     	; 0x690 <Menu_Display+0x80>
 640:	e7 30       	cpi	r30, 0x07	; 7
 642:	30 f1       	brcs	.+76     	; 0x690 <Menu_Display+0x80>
 644:	e8 30       	cpi	r30, 0x08	; 8
 646:	21 f1       	breq	.+72     	; 0x690 <Menu_Display+0x80>
 648:	e9 30       	cpi	r30, 0x09	; 9
 64a:	21 f5       	brne	.+72     	; 0x694 <Menu_Display+0x84>
 64c:	21 c0       	rjmp	.+66     	; 0x690 <Menu_Display+0x80>
	{
		case MENU_TIME:
		{
			I2C_ReadTime(&clock->DS1307Time);
 64e:	0e 94 13 01 	call	0x226	; 0x226 <I2C_ReadTime>
			clock->display_mask=0xFF;
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	8e a7       	std	Y+46, r24	; 0x2e
			Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 656:	be 01       	movw	r22, r28
 658:	68 5e       	subi	r22, 0xE8	; 232
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	ce 01       	movw	r24, r28
 65e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Time_To_Buf>

		}
		break;
 662:	18 c0       	rjmp	.+48     	; 0x694 <Menu_Display+0x84>
		
		case MENU_DATE:
		{
			I2C_ReadTime(&clock->DS1307Time);
 664:	0e 94 13 01 	call	0x226	; 0x226 <I2C_ReadTime>
			clock->display_mask=0xFF;
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	8e a7       	std	Y+46, r24	; 0x2e
			Date_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 66c:	be 01       	movw	r22, r28
 66e:	68 5e       	subi	r22, 0xE8	; 232
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	ce 01       	movw	r24, r28
 674:	0e 94 29 04 	call	0x852	; 0x852 <Date_To_Buf>
		}
		break;
 678:	0d c0       	rjmp	.+26     	; 0x694 <Menu_Display+0x84>

		case MENU_YEAR:
		{
			I2C_ReadTime(&clock->DS1307Time);
 67a:	0e 94 13 01 	call	0x226	; 0x226 <I2C_ReadTime>
			clock->display_mask=0xFF;
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	8e a7       	std	Y+46, r24	; 0x2e
			Year_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 682:	be 01       	movw	r22, r28
 684:	68 5e       	subi	r22, 0xE8	; 232
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	ce 01       	movw	r24, r28
 68a:	0e 94 55 04 	call	0x8aa	; 0x8aa <Year_To_Buf>
		}
		break;
 68e:	02 c0       	rjmp	.+4      	; 0x694 <Menu_Display+0x84>
		}
		break;

		case MENU_TUNE_YEAR:
		{
			clock->display_mask=blink_mask;
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	8e a7       	std	Y+46, r24	; 0x2e
		default:
		{
		}
		break;
	}
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	ff 90       	pop	r15
 69a:	ef 90       	pop	r14
 69c:	08 95       	ret

0000069e <Menu_Key>:

void Menu_Key(enKey key, stClock *clock) {
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	eb 01       	movw	r28, r22
	switch (key) 
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	09 f4       	brne	.+2      	; 0x6aa <Menu_Key+0xc>
 6a8:	8e c0       	rjmp	.+284    	; 0x7c6 <Menu_Key+0x128>
 6aa:	84 30       	cpi	r24, 0x04	; 4
 6ac:	30 f4       	brcc	.+12     	; 0x6ba <Menu_Key+0x1c>
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	71 f0       	breq	.+28     	; 0x6ce <Menu_Key+0x30>
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	09 f0       	breq	.+2      	; 0x6b8 <Menu_Key+0x1a>
 6b6:	97 c0       	rjmp	.+302    	; 0x7e6 <Menu_Key+0x148>
 6b8:	3d c0       	rjmp	.+122    	; 0x734 <Menu_Key+0x96>
 6ba:	88 30       	cpi	r24, 0x08	; 8
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <Menu_Key+0x22>
 6be:	74 c0       	rjmp	.+232    	; 0x7a8 <Menu_Key+0x10a>
 6c0:	8c 30       	cpi	r24, 0x0C	; 12
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <Menu_Key+0x28>
 6c4:	8c c0       	rjmp	.+280    	; 0x7de <Menu_Key+0x140>
 6c6:	84 30       	cpi	r24, 0x04	; 4
 6c8:	09 f0       	breq	.+2      	; 0x6cc <Menu_Key+0x2e>
 6ca:	8d c0       	rjmp	.+282    	; 0x7e6 <Menu_Key+0x148>
 6cc:	4d c0       	rjmp	.+154    	; 0x768 <Menu_Key+0xca>
		}
		break;
		//------------------------
		case KEY_CODE_A: 
		{
			switch(SELECT)//пункт меню
 6ce:	80 91 34 01 	lds	r24, 0x0134
 6d2:	90 91 35 01 	lds	r25, 0x0135
 6d6:	fc 01       	movw	r30, r24
 6d8:	38 96       	adiw	r30, 0x08	; 8
 6da:	e4 91       	lpm	r30, Z+
 6dc:	e4 30       	cpi	r30, 0x04	; 4
 6de:	d9 f0       	breq	.+54     	; 0x716 <Menu_Key+0x78>
 6e0:	e5 30       	cpi	r30, 0x05	; 5
 6e2:	30 f4       	brcc	.+12     	; 0x6f0 <Menu_Key+0x52>
 6e4:	e2 30       	cpi	r30, 0x02	; 2
 6e6:	61 f0       	breq	.+24     	; 0x700 <Menu_Key+0x62>
 6e8:	e3 30       	cpi	r30, 0x03	; 3
 6ea:	09 f0       	breq	.+2      	; 0x6ee <Menu_Key+0x50>
 6ec:	7c c0       	rjmp	.+248    	; 0x7e6 <Menu_Key+0x148>
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <Menu_Key+0x6a>
 6f0:	e6 30       	cpi	r30, 0x06	; 6
 6f2:	a1 f0       	breq	.+40     	; 0x71c <Menu_Key+0x7e>
 6f4:	e6 30       	cpi	r30, 0x06	; 6
 6f6:	60 f0       	brcs	.+24     	; 0x710 <Menu_Key+0x72>
 6f8:	e7 30       	cpi	r30, 0x07	; 7
 6fa:	09 f0       	breq	.+2      	; 0x6fe <Menu_Key+0x60>
 6fc:	74 c0       	rjmp	.+232    	; 0x7e6 <Menu_Key+0x148>
 6fe:	14 c0       	rjmp	.+40     	; 0x728 <Menu_Key+0x8a>
			{
				case MENU_TIME:
				{
					Menu_Change(NEXT);
 700:	fc 01       	movw	r30, r24
 702:	25 91       	lpm	r18, Z+
 704:	34 91       	lpm	r19, Z+
 706:	69 c0       	rjmp	.+210    	; 0x7da <Menu_Key+0x13c>
				}
				break;

				case MENU_DATE:
				{
					Menu_Change(NEXT);
 708:	fc 01       	movw	r30, r24
 70a:	25 91       	lpm	r18, Z+
 70c:	34 91       	lpm	r19, Z+
 70e:	65 c0       	rjmp	.+202    	; 0x7da <Menu_Key+0x13c>
				}
				break;
										
				case MENU_TUNE_TIME:
				{
					I2C_StoreTime(&clock->DS1307Time);
 710:	cb 01       	movw	r24, r22
 712:	0e 94 9f 01 	call	0x33e	; 0x33e <I2C_StoreTime>
					Menu_Change(&m_s1i1);
 716:	82 e7       	ldi	r24, 0x72	; 114
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	63 c0       	rjmp	.+198    	; 0x7e2 <Menu_Key+0x144>
				break;


				case MENU_TUNE_DATE:
				{
					I2C_StoreDate(&clock->DS1307Time);
 71c:	cb 01       	movw	r24, r22
 71e:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_StoreDate>
					Menu_Change(&m_s1i2);
 722:	8c e7       	ldi	r24, 0x7C	; 124
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	5d c0       	rjmp	.+186    	; 0x7e2 <Menu_Key+0x144>
				break;


				case MENU_TUNE_YEAR:
				{
					I2C_StoreYear(&clock->DS1307Time);
 728:	cb 01       	movw	r24, r22
 72a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <I2C_StoreYear>
					Menu_Change(&m_s1i3);
 72e:	86 e8       	ldi	r24, 0x86	; 134
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	57 c0       	rjmp	.+174    	; 0x7e2 <Menu_Key+0x144>
		break;

		//------------------------
		case KEY_CODE_B: 
		{
			switch(SELECT)//пункт меню
 734:	80 91 34 01 	lds	r24, 0x0134
 738:	90 91 35 01 	lds	r25, 0x0135
 73c:	fc 01       	movw	r30, r24
 73e:	38 96       	adiw	r30, 0x08	; 8
 740:	e4 91       	lpm	r30, Z+
 742:	e5 30       	cpi	r30, 0x05	; 5
 744:	29 f0       	breq	.+10     	; 0x750 <Menu_Key+0xb2>
 746:	e5 30       	cpi	r30, 0x05	; 5
 748:	50 f0       	brcs	.+20     	; 0x75e <Menu_Key+0xc0>
 74a:	ea 30       	cpi	r30, 0x0A	; 10
 74c:	40 f4       	brcc	.+16     	; 0x75e <Menu_Key+0xc0>
 74e:	4b c0       	rjmp	.+150    	; 0x7e6 <Menu_Key+0x148>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Minutes=BCD_Increment(clock->DS1307Time.Minutes,0,((5<<4)|9));
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	49 e5       	ldi	r20, 0x59	; 89
 756:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <BCD_Increment>
 75a:	89 83       	std	Y+1, r24	; 0x01
 75c:	19 c0       	rjmp	.+50     	; 0x790 <Menu_Key+0xf2>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 75e:	02 96       	adiw	r24, 0x02	; 2
 760:	fc 01       	movw	r30, r24
 762:	25 91       	lpm	r18, Z+
 764:	34 91       	lpm	r19, Z+
 766:	39 c0       	rjmp	.+114    	; 0x7da <Menu_Key+0x13c>
		}
		break;
		//------------------------
		case KEY_CODE_C:
		{ 
			switch(SELECT)//пункт меню
 768:	80 91 34 01 	lds	r24, 0x0134
 76c:	90 91 35 01 	lds	r25, 0x0135
 770:	fc 01       	movw	r30, r24
 772:	38 96       	adiw	r30, 0x08	; 8
 774:	e4 91       	lpm	r30, Z+
 776:	e5 30       	cpi	r30, 0x05	; 5
 778:	29 f0       	breq	.+10     	; 0x784 <Menu_Key+0xe6>
 77a:	e5 30       	cpi	r30, 0x05	; 5
 77c:	80 f0       	brcs	.+32     	; 0x79e <Menu_Key+0x100>
 77e:	ea 30       	cpi	r30, 0x0A	; 10
 780:	70 f4       	brcc	.+28     	; 0x79e <Menu_Key+0x100>
 782:	31 c0       	rjmp	.+98     	; 0x7e6 <Menu_Key+0x148>
			{			
				case MENU_TUNE_TIME:
				{
					clock->DS1307Time.Hours=BCD_Increment(clock->DS1307Time.Hours,0,((2<<4)|3));
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	43 e2       	ldi	r20, 0x23	; 35
 78a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <BCD_Increment>
 78e:	8a 83       	std	Y+2, r24	; 0x02
					Time_To_Buf(&clock->DS1307Time, &clock->display_buf[LED_NOT_DISPLAYED_LEN]);
 790:	be 01       	movw	r22, r28
 792:	68 5e       	subi	r22, 0xE8	; 232
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	ce 01       	movw	r24, r28
 798:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Time_To_Buf>
				}
				break;
 79c:	24 c0       	rjmp	.+72     	; 0x7e6 <Menu_Key+0x148>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 79e:	02 96       	adiw	r24, 0x02	; 2
 7a0:	fc 01       	movw	r30, r24
 7a2:	25 91       	lpm	r18, Z+
 7a4:	34 91       	lpm	r19, Z+
 7a6:	19 c0       	rjmp	.+50     	; 0x7da <Menu_Key+0x13c>
		}
		break;
		//------------------------
		case KEY_CODE_D:
		{
			switch(SELECT)//пункт меню
 7a8:	80 91 34 01 	lds	r24, 0x0134
 7ac:	90 91 35 01 	lds	r25, 0x0135
 7b0:	fc 01       	movw	r30, r24
 7b2:	38 96       	adiw	r30, 0x08	; 8
 7b4:	e4 91       	lpm	r30, Z+
 7b6:	e5 50       	subi	r30, 0x05	; 5
 7b8:	e5 30       	cpi	r30, 0x05	; 5
 7ba:	a8 f0       	brcs	.+42     	; 0x7e6 <Menu_Key+0x148>
				}
				break;
				
				default:
				{
					Menu_Change(PREVIOUS);
 7bc:	02 96       	adiw	r24, 0x02	; 2
 7be:	fc 01       	movw	r30, r24
 7c0:	25 91       	lpm	r18, Z+
 7c2:	34 91       	lpm	r19, Z+
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <Menu_Key+0x13c>
		break;
			
		//------------------------
		case KEY_CODE_AB://переход в режим настройки времени/даты/года
		{ 
			I2C_ReadTime(&clock->DS1307Time);
 7c6:	cb 01       	movw	r24, r22
 7c8:	0e 94 13 01 	call	0x226	; 0x226 <I2C_ReadTime>
			Menu_Change(CHILD);
 7cc:	e0 91 34 01 	lds	r30, 0x0134
 7d0:	f0 91 35 01 	lds	r31, 0x0135
 7d4:	36 96       	adiw	r30, 0x06	; 6
 7d6:	25 91       	lpm	r18, Z+
 7d8:	34 91       	lpm	r19, Z+
 7da:	c9 01       	movw	r24, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <Menu_Key+0x144>
		}
		break;
		//------------------------
		case KEY_CODE_CD:
		{
			Menu_Change(&m_s1i4);
 7de:	80 e9       	ldi	r24, 0x90	; 144
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Menu_Change>
		{

		}
		break;
	}
}
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <Menu_Init>:
//---------------------------------------------------
void Menu_Init(void) 
{
	selectedMenuItem = (menuItem*)&m_s1i1;
 7ec:	82 e7       	ldi	r24, 0x72	; 114
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	90 93 35 01 	sts	0x0135, r25
 7f4:	80 93 34 01 	sts	0x0134, r24
}
 7f8:	08 95       	ret

000007fa <Time_To_Buf>:
#include "utilites.h"

void Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 7fa:	fc 01       	movw	r30, r24
 7fc:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 7fe:	82 81       	ldd	r24, Z+2	; 0x02
 800:	82 95       	swap	r24
 802:	8f 70       	andi	r24, 0x0F	; 15
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	95 60       	ori	r25, 0x05	; 5
 808:	11 96       	adiw	r26, 0x01	; 1
 80a:	9c 93       	st	X, r25
 80c:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 80e:	82 81       	ldd	r24, Z+2	; 0x02
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	8f 70       	andi	r24, 0x0F	; 15
 814:	90 70       	andi	r25, 0x00	; 0
 816:	94 60       	ori	r25, 0x04	; 4
 818:	13 96       	adiw	r26, 0x03	; 3
 81a:	9c 93       	st	X, r25
 81c:	8e 93       	st	-X, r24
 81e:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 820:	8a e0       	ldi	r24, 0x0A	; 10
 822:	93 e0       	ldi	r25, 0x03	; 3
 824:	15 96       	adiw	r26, 0x05	; 5
 826:	9c 93       	st	X, r25
 828:	8e 93       	st	-X, r24
 82a:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 82c:	81 81       	ldd	r24, Z+1	; 0x01
 82e:	82 95       	swap	r24
 830:	8f 70       	andi	r24, 0x0F	; 15
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	92 60       	ori	r25, 0x02	; 2
 836:	17 96       	adiw	r26, 0x07	; 7
 838:	9c 93       	st	X, r25
 83a:	8e 93       	st	-X, r24
 83c:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 83e:	81 81       	ldd	r24, Z+1	; 0x01
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	8f 70       	andi	r24, 0x0F	; 15
 844:	90 70       	andi	r25, 0x00	; 0
 846:	91 60       	ori	r25, 0x01	; 1
 848:	19 96       	adiw	r26, 0x09	; 9
 84a:	9c 93       	st	X, r25
 84c:	8e 93       	st	-X, r24
 84e:	18 97       	sbiw	r26, 0x08	; 8
}
 850:	08 95       	ret

00000852 <Date_To_Buf>:

void Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 852:	fc 01       	movw	r30, r24
 854:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Date>>4);
 856:	84 81       	ldd	r24, Z+4	; 0x04
 858:	82 95       	swap	r24
 85a:	8f 70       	andi	r24, 0x0F	; 15
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	95 60       	ori	r25, 0x05	; 5
 860:	11 96       	adiw	r26, 0x01	; 1
 862:	9c 93       	st	X, r25
 864:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Date&0x0F);
 866:	84 81       	ldd	r24, Z+4	; 0x04
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	8f 70       	andi	r24, 0x0F	; 15
 86c:	90 70       	andi	r25, 0x00	; 0
 86e:	94 60       	ori	r25, 0x04	; 4
 870:	13 96       	adiw	r26, 0x03	; 3
 872:	9c 93       	st	X, r25
 874:	8e 93       	st	-X, r24
 876:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0xFF);//"."
 878:	8f ef       	ldi	r24, 0xFF	; 255
 87a:	93 e0       	ldi	r25, 0x03	; 3
 87c:	15 96       	adiw	r26, 0x05	; 5
 87e:	9c 93       	st	X, r25
 880:	8e 93       	st	-X, r24
 882:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Month>>4);
 884:	85 81       	ldd	r24, Z+5	; 0x05
 886:	82 95       	swap	r24
 888:	8f 70       	andi	r24, 0x0F	; 15
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	92 60       	ori	r25, 0x02	; 2
 88e:	17 96       	adiw	r26, 0x07	; 7
 890:	9c 93       	st	X, r25
 892:	8e 93       	st	-X, r24
 894:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Month&0x0F);
 896:	85 81       	ldd	r24, Z+5	; 0x05
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	8f 70       	andi	r24, 0x0F	; 15
 89c:	90 70       	andi	r25, 0x00	; 0
 89e:	91 60       	ori	r25, 0x01	; 1
 8a0:	19 96       	adiw	r26, 0x09	; 9
 8a2:	9c 93       	st	X, r25
 8a4:	8e 93       	st	-X, r24
 8a6:	18 97       	sbiw	r26, 0x08	; 8
}
 8a8:	08 95       	ret

000008aa <Year_To_Buf>:

void Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 8aa:	fc 01       	movw	r30, r24
 8ac:	db 01       	movw	r26, r22
	buf[0]=0x0500|(0xF);
 8ae:	8f e0       	ldi	r24, 0x0F	; 15
 8b0:	95 e0       	ldi	r25, 0x05	; 5
 8b2:	11 96       	adiw	r26, 0x01	; 1
 8b4:	9c 93       	st	X, r25
 8b6:	8e 93       	st	-X, r24
	buf[1]=0x0400|(2);
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	94 e0       	ldi	r25, 0x04	; 4
 8bc:	13 96       	adiw	r26, 0x03	; 3
 8be:	9c 93       	st	X, r25
 8c0:	8e 93       	st	-X, r24
 8c2:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0);
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	93 e0       	ldi	r25, 0x03	; 3
 8c8:	15 96       	adiw	r26, 0x05	; 5
 8ca:	9c 93       	st	X, r25
 8cc:	8e 93       	st	-X, r24
 8ce:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Year>>4);
 8d0:	86 81       	ldd	r24, Z+6	; 0x06
 8d2:	82 95       	swap	r24
 8d4:	8f 70       	andi	r24, 0x0F	; 15
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	92 60       	ori	r25, 0x02	; 2
 8da:	17 96       	adiw	r26, 0x07	; 7
 8dc:	9c 93       	st	X, r25
 8de:	8e 93       	st	-X, r24
 8e0:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Year&0x0F);
 8e2:	86 81       	ldd	r24, Z+6	; 0x06
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	8f 70       	andi	r24, 0x0F	; 15
 8e8:	90 70       	andi	r25, 0x00	; 0
 8ea:	91 60       	ori	r25, 0x01	; 1
 8ec:	19 96       	adiw	r26, 0x09	; 9
 8ee:	9c 93       	st	X, r25
 8f0:	8e 93       	st	-X, r24
 8f2:	18 97       	sbiw	r26, 0x08	; 8
}
 8f4:	08 95       	ret

000008f6 <BCD_Increment>:

uint8_t BCD_Increment(uint8_t bcd, uint8_t bcd_min, uint8_t bcd_max)
{	
	if((bcd&0xF)<9)
 8f6:	28 2f       	mov	r18, r24
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	2f 70       	andi	r18, 0x0F	; 15
 8fc:	30 70       	andi	r19, 0x00	; 0
 8fe:	29 30       	cpi	r18, 0x09	; 9
 900:	31 05       	cpc	r19, r1
 902:	14 f4       	brge	.+4      	; 0x908 <BCD_Increment+0x12>
	{
		bcd+=0x01;
 904:	8f 5f       	subi	r24, 0xFF	; 255
 906:	02 c0       	rjmp	.+4      	; 0x90c <BCD_Increment+0x16>
	}
	else
	{
		bcd+=0x10;
 908:	80 5f       	subi	r24, 0xF0	; 240
		bcd&=0xF0;
 90a:	80 7f       	andi	r24, 0xF0	; 240
 90c:	86 17       	cp	r24, r22
 90e:	08 f4       	brcc	.+2      	; 0x912 <BCD_Increment+0x1c>
 910:	86 2f       	mov	r24, r22
	if(bcd<bcd_min)
	{
		bcd=bcd_min;			
	}

	if(bcd>bcd_max)
 912:	48 17       	cp	r20, r24
 914:	08 f4       	brcc	.+2      	; 0x918 <BCD_Increment+0x22>
 916:	86 2f       	mov	r24, r22
	{
		bcd=bcd_min;			
	}

	return bcd;
}
 918:	08 95       	ret

0000091a <_exit>:
 91a:	f8 94       	cli

0000091c <__stop_program>:
 91c:	ff cf       	rjmp	.-2      	; 0x91c <__stop_program>
