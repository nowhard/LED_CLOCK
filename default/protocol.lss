
protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002e  00800100  00800100  0000066c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000253  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001064  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000602  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b57  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b8  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f7  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000104  00000000  00000000  00003adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 32       	cpi	r26, 0x2E	; 46
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  88:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Init>:
#define I2C_SCL	 5
#define I2C_SDA	 4
//---------------------I2C_INIT------------------------------------
void I2C_Init(void)
{
	I2C_PORT |= (1<<I2C_SCL)|(1<<I2C_SDA);	// Включим подтяжку на ноги, вдруг юзер на резисторы пожмотился
  90:	88 b1       	in	r24, 0x08	; 8
  92:	80 63       	ori	r24, 0x30	; 48
  94:	88 b9       	out	0x08, r24	; 8
	I2C_DDR &=~((1<<I2C_SCL)|(1<<I2C_SDA));
  96:	87 b1       	in	r24, 0x07	; 7
  98:	8f 7c       	andi	r24, 0xCF	; 207
  9a:	87 b9       	out	0x07, r24	; 7
	TWBR = 0x20;         			// Настроим битрейт
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;
  a2:	10 92 b9 00 	sts	0x00B9, r1
}
  a6:	08 95       	ret

000000a8 <I2C_Write>:
//---------------------I2C_WRITE------------------------------------

void I2C_Write(unsigned char address,unsigned char address_reg, unsigned char data)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
  a8:	94 ea       	ldi	r25, 0xA4	; 164
  aa:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
  ae:	90 91 bc 00 	lds	r25, 0x00BC
  b2:	97 ff       	sbrs	r25, 7
  b4:	fc cf       	rjmp	.-8      	; 0xae <I2C_Write+0x6>

	if((TWSR&0xF8)!=START)//result
  b6:	90 91 b9 00 	lds	r25, 0x00B9
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	39 f5       	brne	.+78     	; 0x10e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=address;//address+write
  c0:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
  ca:	80 91 bc 00 	lds	r24, 0x00BC
  ce:	87 ff       	sbrs	r24, 7
  d0:	fc cf       	rjmp	.-8      	; 0xca <I2C_Write+0x22>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
  d2:	80 91 b9 00 	lds	r24, 0x00B9
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	88 31       	cpi	r24, 0x18	; 24
  da:	c9 f4       	brne	.+50     	; 0x10e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}
	
	TWDR=(unsigned char)address_reg;//address+write
  dc:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
  e6:	80 91 bc 00 	lds	r24, 0x00BC
  ea:	87 ff       	sbrs	r24, 7
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <I2C_Write+0x3e>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
  ee:	80 91 b9 00 	lds	r24, 0x00B9
  f2:	88 7f       	andi	r24, 0xF8	; 248
  f4:	88 32       	cpi	r24, 0x28	; 40
  f6:	59 f4       	brne	.+22     	; 0x10e <I2C_Write+0x66>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWDR=data;//address+write
  f8:	40 93 bb 00 	sts	0x00BB, r20
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 102:	80 91 bc 00 	lds	r24, 0x00BC
 106:	87 ff       	sbrs	r24, 7
 108:	fc cf       	rjmp	.-8      	; 0x102 <I2C_Write+0x5a>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 10a:	80 91 b9 00 	lds	r24, 0x00B9
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return;
	}

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	80 93 bc 00 	sts	0x00BC, r24
 114:	08 95       	ret

00000116 <I2C_Read>:
unsigned char I2C_Read(unsigned char address,unsigned char address_reg)
{

uint8_t reg;

TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 116:	94 ea       	ldi	r25, 0xA4	; 164
 118:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 11c:	90 91 bc 00 	lds	r25, 0x00BC
 120:	97 ff       	sbrs	r25, 7
 122:	fc cf       	rjmp	.-8      	; 0x11c <I2C_Read+0x6>

	if((TWSR&0xF8)!=START)//result
 124:	90 91 b9 00 	lds	r25, 0x00B9
 128:	98 7f       	andi	r25, 0xF8	; 248
 12a:	98 30       	cpi	r25, 0x08	; 8
 12c:	09 f0       	breq	.+2      	; 0x130 <I2C_Read+0x1a>
 12e:	43 c0       	rjmp	.+134    	; 0x1b6 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}

	TWDR=address;//address+write
 130:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 134:	94 e8       	ldi	r25, 0x84	; 132
 136:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 13a:	90 91 bc 00 	lds	r25, 0x00BC
 13e:	97 ff       	sbrs	r25, 7
 140:	fc cf       	rjmp	.-8      	; 0x13a <I2C_Read+0x24>

	if((TWSR&0xF8)!=MT_SLA_ACK)//result
 142:	90 91 b9 00 	lds	r25, 0x00B9
 146:	98 7f       	andi	r25, 0xF8	; 248
 148:	98 31       	cpi	r25, 0x18	; 24
 14a:	a9 f5       	brne	.+106    	; 0x1b6 <I2C_Read+0xa0>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
		return 0;
	}
	
	TWDR=address_reg;//
 14c:	60 93 bb 00 	sts	0x00BB, r22
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 150:	94 e8       	ldi	r25, 0x84	; 132
 152:	90 93 bc 00 	sts	0x00BC, r25

	while(!(TWCR&(1<<TWINT)));//...wait for start
 156:	90 91 bc 00 	lds	r25, 0x00BC
 15a:	97 ff       	sbrs	r25, 7
 15c:	fc cf       	rjmp	.-8      	; 0x156 <I2C_Read+0x40>

	if((TWSR&0xF8)!=MT_DATA_ACK)//result
 15e:	90 91 b9 00 	lds	r25, 0x00B9
 162:	98 7f       	andi	r25, 0xF8	; 248
 164:	98 32       	cpi	r25, 0x28	; 40
 166:	39 f5       	brne	.+78     	; 0x1b6 <I2C_Read+0xa0>
		return 0;
	}


//------------------read---------------------
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START2
 168:	94 ea       	ldi	r25, 0xA4	; 164
 16a:	90 93 bc 00 	sts	0x00BC, r25
	
	while(!(TWCR&(1<<TWINT)));//...wait for start
 16e:	90 91 bc 00 	lds	r25, 0x00BC
 172:	97 ff       	sbrs	r25, 7
 174:	fc cf       	rjmp	.-8      	; 0x16e <I2C_Read+0x58>

	if((TWSR&0xF8)!=START_2)//result
 176:	90 91 b9 00 	lds	r25, 0x00B9
 17a:	98 7f       	andi	r25, 0xF8	; 248
 17c:	90 31       	cpi	r25, 0x10	; 16
 17e:	d9 f4       	brne	.+54     	; 0x1b6 <I2C_Read+0xa0>
		return 0;
	}


	
	TWDR=address+1;//address+read
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 bb 00 	sts	0x00BB, r24
	
	TWCR=(1<<TWINT)|(1<<TWEN);//transfer address
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 18c:	80 91 bc 00 	lds	r24, 0x00BC
 190:	87 ff       	sbrs	r24, 7
 192:	fc cf       	rjmp	.-8      	; 0x18c <I2C_Read+0x76>

	if((TWSR&0xF8)!=MT_SLA_READ_ACK)//result
 194:	80 91 b9 00 	lds	r24, 0x00B9
 198:	88 7f       	andi	r24, 0xF8	; 248
 19a:	80 34       	cpi	r24, 0x40	; 64
 19c:	61 f4       	brne	.+24     	; 0x1b6 <I2C_Read+0xa0>
	}

    
	

	TWCR=(1<<TWINT)|(1<<TWEN);//read & nack
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	80 93 bc 00 	sts	0x00BC, r24

	while(!(TWCR&(1<<TWINT)));//...wait for start
 1a4:	80 91 bc 00 	lds	r24, 0x00BC
 1a8:	87 ff       	sbrs	r24, 7
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <I2C_Read+0x8e>
	
	if((TWSR&0xF8)!=READ_NACK)
 1ac:	80 91 b9 00 	lds	r24, 0x00B9
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	88 35       	cpi	r24, 0x58	; 88
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <I2C_Read+0xaa>
	{
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 1b6:	84 e9       	ldi	r24, 0x94	; 148
 1b8:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret
		
	}
	reg=TWDR;
 1c0:	80 91 bb 00 	lds	r24, 0x00BB
    
	
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//STOP
 1c4:	94 e9       	ldi	r25, 0x94	; 148
 1c6:	90 93 bc 00 	sts	0x00BC, r25

	return reg;

}
 1ca:	08 95       	ret

000001cc <I2C_ReadTime>:

//------------------------------------------------------------
void I2C_ReadTime(stDS1307Time *time)
{	
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
	time->Seconds	=I2C_Read(TMR_ADDR,REG_SECONDS);
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 1da:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	87 ec       	ldi	r24, 0xC7	; 199
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <I2C_ReadTime+0x14>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <I2C_ReadTime+0x1a>
 1e6:	00 00       	nop
	_delay_us(100);
	time->Minutes	=I2C_Read(TMR_ADDR,REG_MINUTES);
 1e8:	80 ed       	ldi	r24, 0xD0	; 208
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	87 ec       	ldi	r24, 0xC7	; 199
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <I2C_ReadTime+0x2a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <I2C_ReadTime+0x30>
 1fc:	00 00       	nop
	_delay_us(100);
	time->Hours		=I2C_Read(TMR_ADDR,REG_HOURS);
 1fe:	80 ed       	ldi	r24, 0xD0	; 208
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 206:	8a 83       	std	Y+2, r24	; 0x02
 208:	87 ec       	ldi	r24, 0xC7	; 199
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <I2C_ReadTime+0x40>
 210:	00 c0       	rjmp	.+0      	; 0x212 <I2C_ReadTime+0x46>
 212:	00 00       	nop
	_delay_us(100);
	time->Day		=I2C_Read(TMR_ADDR,REG_DAY);
 214:	80 ed       	ldi	r24, 0xD0	; 208
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 21c:	8b 83       	std	Y+3, r24	; 0x03
 21e:	87 ec       	ldi	r24, 0xC7	; 199
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <I2C_ReadTime+0x56>
 226:	00 c0       	rjmp	.+0      	; 0x228 <I2C_ReadTime+0x5c>
 228:	00 00       	nop
	_delay_us(100);
	time->Date		=I2C_Read(TMR_ADDR,REG_DATE);
 22a:	80 ed       	ldi	r24, 0xD0	; 208
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 232:	8c 83       	std	Y+4, r24	; 0x04
 234:	87 ec       	ldi	r24, 0xC7	; 199
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <I2C_ReadTime+0x6c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <I2C_ReadTime+0x72>
 23e:	00 00       	nop
	_delay_us(100);
	time->Month		=I2C_Read(TMR_ADDR,REG_MONTH);
 240:	80 ed       	ldi	r24, 0xD0	; 208
 242:	65 e0       	ldi	r22, 0x05	; 5
 244:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 248:	8d 83       	std	Y+5, r24	; 0x05
 24a:	87 ec       	ldi	r24, 0xC7	; 199
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <I2C_ReadTime+0x82>
 252:	00 c0       	rjmp	.+0      	; 0x254 <I2C_ReadTime+0x88>
 254:	00 00       	nop
	_delay_us(100);
	time->Year		=I2C_Read(TMR_ADDR,REG_YEAR);
 256:	80 ed       	ldi	r24, 0xD0	; 208
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 25e:	8e 83       	std	Y+6, r24	; 0x06
 260:	87 ec       	ldi	r24, 0xC7	; 199
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <I2C_ReadTime+0x98>
 268:	00 c0       	rjmp	.+0      	; 0x26a <I2C_ReadTime+0x9e>
 26a:	00 00       	nop
	_delay_us(100);
	time->Control	=I2C_Read(TMR_ADDR,REG_CONTROL);
 26c:	80 ed       	ldi	r24, 0xD0	; 208
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 274:	8f 83       	std	Y+7, r24	; 0x07
 276:	87 ec       	ldi	r24, 0xC7	; 199
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <I2C_ReadTime+0xae>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <I2C_ReadTime+0xb4>
 280:	00 00       	nop
	_delay_us(100);
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <I2C_DS1307Init>:
//----------------------------------------------------------
void I2C_DS1307Init(stDS1307Time *time)//инициализация часов, установка
{
	uint8_t reg;

	reg=I2C_Read(TMR_ADDR,REG_SECONDS);
 288:	80 ed       	ldi	r24, 0xD0	; 208
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Read>
 290:	ef ec       	ldi	r30, 0xCF	; 207
 292:	f7 e0       	ldi	r31, 0x07	; 7
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <I2C_DS1307Init+0xc>
 298:	00 c0       	rjmp	.+0      	; 0x29a <I2C_DS1307Init+0x12>
 29a:	00 00       	nop
	_delay_us(1000);

	if((reg&0x80)!=0)
 29c:	87 ff       	sbrs	r24, 7
 29e:	21 c0       	rjmp	.+66     	; 0x2e2 <I2C_DS1307Init+0x5a>
	{
		I2C_Write(TMR_ADDR,REG_HOURS,(1<<4)+2);
 2a0:	80 ed       	ldi	r24, 0xD0	; 208
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	42 e1       	ldi	r20, 0x12	; 18
 2a6:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 2aa:	87 ec       	ldi	r24, 0xC7	; 199
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <I2C_DS1307Init+0x26>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <I2C_DS1307Init+0x2c>
 2b4:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_MINUTES,(0<<4)+0); 
 2b6:	80 ed       	ldi	r24, 0xD0	; 208
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 2c0:	e7 ec       	ldi	r30, 0xC7	; 199
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <I2C_DS1307Init+0x3c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <I2C_DS1307Init+0x42>
 2ca:	00 00       	nop
		_delay_us(100);


		I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 2cc:	80 ed       	ldi	r24, 0xD0	; 208
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 2d6:	87 ec       	ldi	r24, 0xC7	; 199
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <I2C_DS1307Init+0x52>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <I2C_DS1307Init+0x58>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <I2C_StoreTime>:
		_delay_us(100);
	}
}
//---------------------------------------------------
void I2C_StoreTime(stDS1307Time *time)
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_HOURS,time->Hours);
 2ea:	80 ed       	ldi	r24, 0xD0	; 208
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	4a 81       	ldd	r20, Y+2	; 0x02
 2f0:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 2f4:	87 ec       	ldi	r24, 0xC7	; 199
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <I2C_StoreTime+0x14>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <I2C_StoreTime+0x1a>
 2fe:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_MINUTES,time->Minutes); 
 300:	80 ed       	ldi	r24, 0xD0	; 208
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	49 81       	ldd	r20, Y+1	; 0x01
 306:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 30a:	87 ec       	ldi	r24, 0xC7	; 199
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <I2C_StoreTime+0x2a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <I2C_StoreTime+0x30>
 314:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_SECONDS,0x0); 
 316:	80 ed       	ldi	r24, 0xD0	; 208
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 320:	87 ec       	ldi	r24, 0xC7	; 199
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <I2C_StoreTime+0x40>
 328:	00 c0       	rjmp	.+0      	; 0x32a <I2C_StoreTime+0x46>
 32a:	00 00       	nop
	_delay_us(100);
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <I2C_StoreDate>:
//--------------------------------------------------------
void I2C_StoreDate(stDS1307Time *time)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
	I2C_Write(TMR_ADDR,REG_MONTH,time->Month);
 338:	80 ed       	ldi	r24, 0xD0	; 208
 33a:	65 e0       	ldi	r22, 0x05	; 5
 33c:	4d 81       	ldd	r20, Y+5	; 0x05
 33e:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 342:	87 ec       	ldi	r24, 0xC7	; 199
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <I2C_StoreDate+0x14>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <I2C_StoreDate+0x1a>
 34c:	00 00       	nop
	_delay_us(100);

	I2C_Write(TMR_ADDR,REG_DATE,time->Date); 
 34e:	80 ed       	ldi	r24, 0xD0	; 208
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	4c 81       	ldd	r20, Y+4	; 0x04
 354:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 358:	87 ec       	ldi	r24, 0xC7	; 199
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <I2C_StoreDate+0x2a>
 360:	00 c0       	rjmp	.+0      	; 0x362 <I2C_StoreDate+0x30>
 362:	00 00       	nop
	_delay_us(100);	
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <I2C_StoreYear>:
//--------------------------------------------------------
void I2C_StoreYear(stDS1307Time *time)
{
 36a:	fc 01       	movw	r30, r24
	I2C_Write(TMR_ADDR,REG_YEAR,time->Year); 
 36c:	80 ed       	ldi	r24, 0xD0	; 208
 36e:	66 e0       	ldi	r22, 0x06	; 6
 370:	46 81       	ldd	r20, Z+6	; 0x06
 372:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Write>
 376:	87 ec       	ldi	r24, 0xC7	; 199
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <I2C_StoreYear+0x10>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <I2C_StoreYear+0x16>
 380:	00 00       	nop
	_delay_us(100);
}
 382:	08 95       	ret

00000384 <KBD_getKeyCode>:


/*	if (!(ah & _BV(KBD_PIN_OK))) {
		return KEY_OK;
	}*/
	if (!(ah & _BV(KBD_PIN_UP))) {
 384:	85 ff       	sbrs	r24, 5
 386:	06 c0       	rjmp	.+12     	; 0x394 <KBD_getKeyCode+0x10>
		return KEY_UP;
	}
/*	if (!(ah & _BV(KBD_PIN_DOWN))) {
		return KEY_DOWN;
	}*/
	if (!(ah & _BV(KBD_PIN_LEFT))) {
 388:	87 ff       	sbrs	r24, 7
 38a:	06 c0       	rjmp	.+12     	; 0x398 <KBD_getKeyCode+0x14>
		return KEY_LEFT;
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
 38c:	86 ff       	sbrs	r24, 6
 38e:	06 c0       	rjmp	.+12     	; 0x39c <KBD_getKeyCode+0x18>
		return KEY_RIGHT;
	}
	return 0;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret

/*	if (!(ah & _BV(KBD_PIN_OK))) {
		return KEY_OK;
	}*/
	if (!(ah & _BV(KBD_PIN_UP))) {
		return KEY_UP;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret
	}
/*	if (!(ah & _BV(KBD_PIN_DOWN))) {
		return KEY_DOWN;
	}*/
	if (!(ah & _BV(KBD_PIN_LEFT))) {
		return KEY_LEFT;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
		return KEY_RIGHT;
 39c:	83 e0       	ldi	r24, 0x03	; 3
	}
	return 0;
}
 39e:	08 95       	ret

000003a0 <KBD_readKey>:
//----------------------------
void KBD_readKey(void) 
{

	lastKey=KBD_getKeyCode(KBD_PIN & KBD_MASK);
 3a0:	89 b1       	in	r24, 0x09	; 9
 3a2:	80 7e       	andi	r24, 0xE0	; 224
 3a4:	0e 94 c2 01 	call	0x384	; 0x384 <KBD_getKeyCode>
 3a8:	80 93 01 01 	sts	0x0101, r24
	
	if (prevKey != lastKey) 
	{

	}
	prevKey = lastKey;
 3ac:	80 93 02 01 	sts	0x0102, r24

	return ;
}
 3b0:	08 95       	ret

000003b2 <KBD_init>:
//-------------------------------
void  KBD_init(void) 
{
	KBD_PORT |= KBD_MASK;
 3b2:	8b b1       	in	r24, 0x0b	; 11
 3b4:	80 6e       	ori	r24, 0xE0	; 224
 3b6:	8b b9       	out	0x0b, r24	; 11
	KBD_DDR &= ~ KBD_MASK;
 3b8:	8a b1       	in	r24, 0x0a	; 10
 3ba:	8f 71       	andi	r24, 0x1F	; 31
 3bc:	8a b9       	out	0x0a, r24	; 10

	lastKey = 0;
 3be:	10 92 01 01 	sts	0x0101, r1
	prevKey = 0;
 3c2:	10 92 02 01 	sts	0x0102, r1
}
 3c6:	08 95       	ret

000003c8 <main>:
#include "clock.h"


int main(void)
{
	Clock_Init();
 3c8:	0e 94 4e 02 	call	0x49c	; 0x49c <Clock_Init>
	sei();
 3cc:	78 94       	sei

	while(1)
	{
		Clock_Cycle();
 3ce:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Clock_Cycle>
 3d2:	fd cf       	rjmp	.-6      	; 0x3ce <main+0x6>

000003d4 <LED_SPI_Init>:
/*инициализация SPI модуля в режиме master*/
void LED_SPI_Init(void)
{
   /*настройка портов ввода-вывода
   все выводы, кроме MISO выходы*/
   SPI_DDRX |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 3d4:	84 b1       	in	r24, 0x04	; 4
 3d6:	8c 62       	ori	r24, 0x2C	; 44
 3d8:	84 b9       	out	0x04, r24	; 4
   SPI_PORTX &= ~(1<<SPI_SS); 
 3da:	2a 98       	cbi	0x05, 2	; 5
 
   /*разрешение spi,старший бит вперед,мастер, режим 0*/
   SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
 3dc:	80 e5       	ldi	r24, 0x50	; 80
 3de:	8c bd       	out	0x2c, r24	; 44

   SPSR = (1<<SPI2X);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	8d bd       	out	0x2d, r24	; 45
}
 3e4:	08 95       	ret

000003e6 <LED_SPI_WriteWord>:

void LED_SPI_WriteWord(uint16_t data)
{ 
 3e6:	df 93       	push	r29
 3e8:	cf 93       	push	r28
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <LED_SPI_WriteWord+0x6>
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	9a 83       	std	Y+2, r25	; 0x02
 3f2:	89 83       	std	Y+1, r24	; 0x01
   SPDR = ((uint8_t *)(&data))[1];
 3f4:	fe 01       	movw	r30, r28
 3f6:	31 96       	adiw	r30, 0x01	; 1
 3f8:	81 81       	ldd	r24, Z+1	; 0x01
 3fa:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 3fc:	0d b4       	in	r0, 0x2d	; 45
 3fe:	07 fe       	sbrs	r0, 7
 400:	fd cf       	rjmp	.-6      	; 0x3fc <LED_SPI_WriteWord+0x16>

   SPDR = ((uint8_t *)(&data))[0];
 402:	80 81       	ld	r24, Z
 404:	8e bd       	out	0x2e, r24	; 46
   while(!(SPSR & (1<<SPIF)));
 406:	0d b4       	in	r0, 0x2d	; 45
 408:	07 fe       	sbrs	r0, 7
 40a:	fd cf       	rjmp	.-6      	; 0x406 <LED_SPI_WriteWord+0x20>
 40c:	8a e1       	ldi	r24, 0x1A	; 26
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <LED_SPI_WriteWord+0x28>
 412:	00 c0       	rjmp	.+0      	; 0x414 <LED_SPI_WriteWord+0x2e>

	_delay_us(10);	
   SPI_PORTX |= (1<<SPI_SS);
 414:	2a 9a       	sbi	0x05, 2	; 5
 416:	8a e1       	ldi	r24, 0x1A	; 26
 418:	8a 95       	dec	r24
 41a:	f1 f7       	brne	.-4      	; 0x418 <LED_SPI_WriteWord+0x32>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <LED_SPI_WriteWord+0x38>
   _delay_us(10);
   SPI_PORTX &= ~(1<<SPI_SS);   
 41e:	2a 98       	cbi	0x05, 2	; 5
 420:	8a e1       	ldi	r24, 0x1A	; 26
 422:	8a 95       	dec	r24
 424:	f1 f7       	brne	.-4      	; 0x422 <LED_SPI_WriteWord+0x3c>
 426:	00 c0       	rjmp	.+0      	; 0x428 <LED_SPI_WriteWord+0x42>
   _delay_us(10);
}
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	cf 91       	pop	r28
 42e:	df 91       	pop	r29
 430:	08 95       	ret

00000432 <LED_Out_Buf>:
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	d6 2e       	mov	r13, r22
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 442:	08 2f       	mov	r16, r24
 444:	19 2f       	mov	r17, r25
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 44a:	e4 2e       	mov	r14, r20
 44c:	ff 24       	eor	r15, r15
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 44e:	1b c0       	rjmp	.+54     	; 0x486 <LED_Out_Buf+0x54>
	{
		if(i>=5)
 450:	85 30       	cpi	r24, 0x05	; 5
 452:	88 f0       	brcs	.+34     	; 0x476 <LED_Out_Buf+0x44>
#include "led_display.h"

//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
 454:	9e 01       	movw	r18, r28
 456:	25 50       	subi	r18, 0x05	; 5
 458:	30 40       	sbci	r19, 0x00	; 0

	for(i=0;i<out_buf_len;i++)
	{
		if(i>=5)
		{
			if(mask&(1<<(i-5)))
 45a:	c7 01       	movw	r24, r14
 45c:	02 c0       	rjmp	.+4      	; 0x462 <LED_Out_Buf+0x30>
 45e:	95 95       	asr	r25
 460:	87 95       	ror	r24
 462:	2a 95       	dec	r18
 464:	e2 f7       	brpl	.-8      	; 0x45e <LED_Out_Buf+0x2c>
 466:	9c 01       	movw	r18, r24
 468:	f8 01       	movw	r30, r16
 46a:	80 81       	ld	r24, Z
 46c:	91 81       	ldd	r25, Z+1	; 0x01
 46e:	20 ff       	sbrs	r18, 0
 470:	05 c0       	rjmp	.+10     	; 0x47c <LED_Out_Buf+0x4a>
			{
				LED_SPI_WriteWord(out_buf[i]|0xF);
 472:	8f 60       	ori	r24, 0x0F	; 15
 474:	03 c0       	rjmp	.+6      	; 0x47c <LED_Out_Buf+0x4a>
				LED_SPI_WriteWord(out_buf[i]);
			}
		}
		else
		{
			LED_SPI_WriteWord(out_buf[i]);
 476:	f8 01       	movw	r30, r16
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LED_SPI_WriteWord>
 480:	21 96       	adiw	r28, 0x01	; 1
 482:	0e 5f       	subi	r16, 0xFE	; 254
 484:	1f 4f       	sbci	r17, 0xFF	; 255
 486:	8c 2f       	mov	r24, r28
//--------------------------------------------------------------------------------
void LED_Out_Buf(uint16_t *out_buf, uint8_t out_buf_len, uint8_t mask)//вывод буфера в SPI bit-bang
{
	uint8_t i;

	for(i=0;i<out_buf_len;i++)
 488:	cd 15       	cp	r28, r13
 48a:	10 f3       	brcs	.-60     	; 0x450 <LED_Out_Buf+0x1e>
			LED_SPI_WriteWord(out_buf[i]);
		}
	}

	return;	
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	08 95       	ret

0000049c <Clock_Init>:

stClock clock;

void Clock_Init(void)
{
	I2C_Init();
 49c:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Init>
	I2C_DS1307Init(&clock.DS1307Time);
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 44 01 	call	0x288	; 0x288 <I2C_DS1307Init>
	//KBD_init();
	LED_SPI_Init();
 4a8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_SPI_Init>

	//clock.brightness=I2C_Read(SLA_ADDR,ADDR_BRIGHTNESS);
	clock.display_buf[0]=0xA0F;
 4ac:	8f e0       	ldi	r24, 0x0F	; 15
 4ae:	9a e0       	ldi	r25, 0x0A	; 10
 4b0:	90 93 0d 01 	sts	0x010D, r25
 4b4:	80 93 0c 01 	sts	0x010C, r24
	clock.display_buf[1]=0x9FF;
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	99 e0       	ldi	r25, 0x09	; 9
 4bc:	90 93 0f 01 	sts	0x010F, r25
 4c0:	80 93 0e 01 	sts	0x010E, r24
	clock.display_buf[2]=0xB05;
 4c4:	85 e0       	ldi	r24, 0x05	; 5
 4c6:	9b e0       	ldi	r25, 0x0B	; 11
 4c8:	90 93 11 01 	sts	0x0111, r25
 4cc:	80 93 10 01 	sts	0x0110, r24
	clock.display_buf[3]=0xC01;		
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	9c e0       	ldi	r25, 0x0C	; 12
 4d4:	90 93 13 01 	sts	0x0113, r25
 4d8:	80 93 12 01 	sts	0x0112, r24
	clock.display_buf[4]=0xF00;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	9f e0       	ldi	r25, 0x0F	; 15
 4e0:	90 93 15 01 	sts	0x0115, r25
 4e4:	80 93 14 01 	sts	0x0114, r24
	//clock.display_buf[3]=(0xA00|clock.brightness);
	
	clock.display_buf[5]=0x101;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	90 93 17 01 	sts	0x0117, r25
 4f0:	80 93 16 01 	sts	0x0116, r24
	clock.display_buf[6]=0x202;
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	90 93 19 01 	sts	0x0119, r25
 4fc:	80 93 18 01 	sts	0x0118, r24
	clock.display_buf[7]=0x303;
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	93 e0       	ldi	r25, 0x03	; 3
 504:	90 93 1b 01 	sts	0x011B, r25
 508:	80 93 1a 01 	sts	0x011A, r24
	clock.display_buf[8]=0x404;
 50c:	84 e0       	ldi	r24, 0x04	; 4
 50e:	94 e0       	ldi	r25, 0x04	; 4
 510:	90 93 1d 01 	sts	0x011D, r25
 514:	80 93 1c 01 	sts	0x011C, r24
	clock.display_buf[9]=0x505;
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	95 e0       	ldi	r25, 0x05	; 5
 51c:	90 93 1f 01 	sts	0x011F, r25
 520:	80 93 1e 01 	sts	0x011E, r24

	clock.display_mask	=0xFF;
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	80 93 2c 01 	sts	0x012C, r24
}
 52a:	08 95       	ret

0000052c <Clock_Time_To_Buf>:


void Clock_Time_To_Buf(stDS1307Time *time, uint16_t *buf)
{
 52c:	fc 01       	movw	r30, r24
 52e:	db 01       	movw	r26, r22
	buf[0]=0x0500|(time->Hours>>4);
 530:	82 81       	ldd	r24, Z+2	; 0x02
 532:	82 95       	swap	r24
 534:	8f 70       	andi	r24, 0x0F	; 15
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	95 60       	ori	r25, 0x05	; 5
 53a:	11 96       	adiw	r26, 0x01	; 1
 53c:	9c 93       	st	X, r25
 53e:	8e 93       	st	-X, r24
	buf[1]=0x0400|(time->Hours&0x0F);
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	8f 70       	andi	r24, 0x0F	; 15
 546:	90 70       	andi	r25, 0x00	; 0
 548:	94 60       	ori	r25, 0x04	; 4
 54a:	13 96       	adiw	r26, 0x03	; 3
 54c:	9c 93       	st	X, r25
 54e:	8e 93       	st	-X, r24
 550:	12 97       	sbiw	r26, 0x02	; 2
	buf[2]=0x0300|(0x0A);//"-"
 552:	8a e0       	ldi	r24, 0x0A	; 10
 554:	93 e0       	ldi	r25, 0x03	; 3
 556:	15 96       	adiw	r26, 0x05	; 5
 558:	9c 93       	st	X, r25
 55a:	8e 93       	st	-X, r24
 55c:	14 97       	sbiw	r26, 0x04	; 4
	buf[3]=0x0200|(time->Minutes>>4);
 55e:	81 81       	ldd	r24, Z+1	; 0x01
 560:	82 95       	swap	r24
 562:	8f 70       	andi	r24, 0x0F	; 15
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	92 60       	ori	r25, 0x02	; 2
 568:	17 96       	adiw	r26, 0x07	; 7
 56a:	9c 93       	st	X, r25
 56c:	8e 93       	st	-X, r24
 56e:	16 97       	sbiw	r26, 0x06	; 6
	buf[4]=0x0100|(time->Minutes&0x0F);
 570:	81 81       	ldd	r24, Z+1	; 0x01
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	8f 70       	andi	r24, 0x0F	; 15
 576:	90 70       	andi	r25, 0x00	; 0
 578:	91 60       	ori	r25, 0x01	; 1
 57a:	19 96       	adiw	r26, 0x09	; 9
 57c:	9c 93       	st	X, r25
 57e:	8e 93       	st	-X, r24
 580:	18 97       	sbiw	r26, 0x08	; 8
}
 582:	08 95       	ret

00000584 <Clock_Buf_To_Time>:


void Clock_Buf_To_Time(uint16_t *buf, stDS1307Time *time)
{
 584:	fc 01       	movw	r30, r24
 586:	db 01       	movw	r26, r22
	time->Hours		=((buf[0]&0x0F)<<4)|(buf[1]&0x0F);
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	8f 70       	andi	r24, 0x0F	; 15
 58c:	90 81       	ld	r25, Z
 58e:	92 95       	swap	r25
 590:	90 7f       	andi	r25, 0xF0	; 240
 592:	89 2b       	or	r24, r25
 594:	12 96       	adiw	r26, 0x02	; 2
 596:	8c 93       	st	X, r24
 598:	12 97       	sbiw	r26, 0x02	; 2
	time->Minutes	=((buf[3]&0x0F)<<4)|(buf[4]&0x0F);
 59a:	80 85       	ldd	r24, Z+8	; 0x08
 59c:	8f 70       	andi	r24, 0x0F	; 15
 59e:	96 81       	ldd	r25, Z+6	; 0x06
 5a0:	92 95       	swap	r25
 5a2:	90 7f       	andi	r25, 0xF0	; 240
 5a4:	89 2b       	or	r24, r25
 5a6:	11 96       	adiw	r26, 0x01	; 1
 5a8:	8c 93       	st	X, r24
 5aa:	11 97       	sbiw	r26, 0x01	; 1
}
 5ac:	08 95       	ret

000005ae <Clock_Date_To_Buf>:

void Clock_Date_To_Buf(stDS1307Time *time, uint16_t *buf)
{

}
 5ae:	08 95       	ret

000005b0 <Clock_Buf_To_Date>:


void Clock_Buf_To_Date(uint16_t *buf, stDS1307Time *time)
{

}
 5b0:	08 95       	ret

000005b2 <Clock_Year_To_Buf>:

void Clock_Year_To_Buf(stDS1307Time *time, uint16_t *buf)
{

}
 5b2:	08 95       	ret

000005b4 <Clock_Buf_To_Year>:


void Clock_Buf_To_Year(uint16_t *buf, stDS1307Time *time)
{

}
 5b4:	08 95       	ret

000005b6 <Clock_Cycle>:

void Clock_Cycle(void)
{
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	94 e3       	ldi	r25, 0x34	; 52
 5be:	ac e0       	ldi	r26, 0x0C	; 12
 5c0:	81 50       	subi	r24, 0x01	; 1
 5c2:	90 40       	sbci	r25, 0x00	; 0
 5c4:	a0 40       	sbci	r26, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <Clock_Cycle+0xa>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <Clock_Cycle+0x14>
 5ca:	00 00       	nop
	_delay_ms(500);
	I2C_ReadTime(&clock.DS1307Time);
 5cc:	c3 e0       	ldi	r28, 0x03	; 3
 5ce:	d1 e0       	ldi	r29, 0x01	; 1
 5d0:	ce 01       	movw	r24, r28
 5d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_ReadTime>
	Clock_Time_To_Buf(&clock.DS1307Time,&clock.display_buf[LED_NOT_DISPLAYED_LEN]);
 5d6:	be 01       	movw	r22, r28
 5d8:	6d 5e       	subi	r22, 0xED	; 237
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	ce 01       	movw	r24, r28
 5de:	0e 94 96 02 	call	0x52c	; 0x52c <Clock_Time_To_Buf>
	LED_Out_Buf(&clock.display_buf,LED_BUF_LEN,0x1);
 5e2:	ce 01       	movw	r24, r28
 5e4:	09 96       	adiw	r24, 0x09	; 9
 5e6:	6a e0       	ldi	r22, 0x0A	; 10
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	0e 94 19 02 	call	0x432	; 0x432 <LED_Out_Buf>

}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
